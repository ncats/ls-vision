/**
 * A Vega-Lite top-level specification.
 * This is the root class for all Vega-Lite specifications.
 * (The json schema is generated from this type.)
 */
export interface Coordinate {
    /**
     * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you
     * have a reason to change this, use `https://vega.github.io/schema/vega-lite/v4.json`.
     * Setting the `$schema` property allows automatic validation and autocomplete in editors
     * that support JSON schema.
     */
    $schema?: string;
    /**
     * The alignment to apply to grid rows and columns.
     * The supported string values are `"all"`, `"each"`, and `"none"`.
     *
     * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed
     * one after the other.
     * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or
     * column may be of variable size.
     * - For `"all"`, subviews will be aligned and each row or column will be sized identically
     * based on the maximum observed size. String values for this property will be applied to
     * both grid rows and columns.
     *
     * Alternatively, an object value of the form `{"row": string, "column": string}` can be
     * used to supply different alignments for rows and columns.
     *
     * __Default value:__ `"all"`.
     */
    align?: RowColLayoutAlign | LayoutAlign;
    /**
     * How the visualization size should be determined. If a string, should be one of `"pad"`,
     * `"fit"` or `"none"`.
     * Object values can additionally specify parameters for content sizing and automatic
     * resizing.
     *
     * __Default value__: `pad`
     */
    autosize?: AutoSizeParams | AutosizeType;
    /**
     * CSS color property to use as the background of the entire view.
     *
     * __Default value:__ `"white"`
     */
    background?: string;
    /**
     * The bounds calculation method to use for determining the extent of a sub-plot. One of
     * `full` (the default) or `flush`.
     *
     * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will
     * be used.
     * - If set to `flush`, only the specified width and height values for the sub-view will be
     * used. The `flush` setting can be useful when attempting to place sub-plots without axes
     * or legends into a uniform grid structure.
     *
     * __Default value:__ `"full"`
     */
    bounds?: LayoutBounds;
    /**
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply
     * different centering values for rows and columns.
     *
     * __Default value:__ `false`
     *
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * __Default value:__ `false`
     */
    center?: boolean | RowColBoolean;
    /**
     * Vega-Lite configuration object. This property can only be defined at the top-level of a
     * specification.
     */
    config?: Config;
    /**
     * An object describing the data source. Set to `null` to ignore the parent's data source.
     * If no data is set, it is derived from the parent.
     */
    data?: URLData | null;
    /**
     * A global data store for named datasets. This is a mapping from names to inline datasets.
     * This can be an array of objects or primitive values or a string. Arrays of primitive
     * values are ingested as objects with a `data` property.
     */
    datasets?: { [key: string]: Array<boolean | number | { [key: string]: any } | string> | { [key: string]: any } | string };
    /**
     * Description of this mark for commenting purpose.
     */
    description?: string;
    /**
     * A key-value mapping between encoding channels and definition of fields.
     *
     * A shared key-value mapping between encoding channels and definition of fields in the
     * underlying layers.
     */
    encoding?: EdEncoding;
    /**
     * The height of a visualization.
     *
     * - For a plot with a continuous y-field, height should be a number.
     * - For a plot with either a discrete y-field or no y-field, height can be either a number
     * indicating a fixed height or an object in the form of `{step: number}` defining the
     * height per discrete step. (No y-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on height, it should be set to `"container"`.
     *
     * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous
     * y-field and `config.view.discreteHeight` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * height of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     */
    height?: Step | number | HeightEnum;
    /**
     * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`,
     * `"line"`,
     * `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition
     * object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
     */
    mark?: string | Def | BoxPlot;
    /**
     * Name of the visualization for later reference.
     */
    name?: string;
    /**
     * The default visualization padding, in pixels, from the edge of the visualization canvas
     * to the data rectangle. If a number, specifies padding for all sides.
     * If an object, the value should have the format `{"left": 5, "top": 5, "right": 5,
     * "bottom": 5}` to specify padding for each side of the visualization.
     *
     * __Default value__: `5`
     */
    padding?: PaddingClass | number;
    /**
     * An object defining properties of geographic projection, which will be applied to `shape`
     * path for `"geoshape"` marks
     * and to `latitude` and `"longitude"` channels for other marks.
     *
     * An object defining properties of the geographic projection shared by underlying layers.
     */
    projection?: Projection;
    /**
     * Scale, axis, and legend resolutions for view composition specifications.
     */
    resolve?: Resolve;
    /**
     * A key-value mapping between selection names and definitions.
     */
    selection?: { [key: string]: SelectionDef };
    /**
     * The spacing in pixels between sub-views of the composition operator.
     * An object of the form `{"row": number, "column": number}` can be used to set
     * different spacing values for rows and columns.
     *
     * __Default value__: Depends on `"spacing"` property of [the view composition
     * configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by
     * default)
     *
     * The spacing in pixels between sub-views of the concat operator.
     *
     * __Default value__: `10`
     */
    spacing?: RowColNumber | number;
    /**
     * Title for the plot.
     */
    title?: string[] | TitleParams | string;
    /**
     * An array of data transformations such as filter and new field calculation.
     */
    transform?: Transform[];
    /**
     * Optional metadata that will be passed to Vega.
     * This object is completely ignored by Vega and Vega-Lite and can be used for custom
     * metadata.
     */
    usermeta?: { [key: string]: any };
    /**
     * An object defining the view background's fill and stroke.
     *
     * __Default value:__ none (transparent)
     */
    view?: ViewBackground;
    /**
     * The width of a visualization.
     *
     * - For a plot with a continuous x-field, width should be a number.
     * - For a plot with either a discrete x-field or no x-field, width can be either a number
     * indicating a fixed width or an object in the form of `{step: number}` defining the width
     * per discrete step. (No x-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on width, it should be set to `"container"`.
     *
     * __Default value:__
     * Based on `config.view.continuousWidth` for a plot with a continuous x-field and
     * `config.view.discreteWidth` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * width of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     */
    width?: Step | number | HeightEnum;
    /**
     * The number of columns to include in the view composition layout.
     *
     * __Default value__: `undefined` -- An infinite number of columns (a single row) will be
     * assumed. This is equivalent to
     * `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
     *
     * __Note__:
     *
     * 1) This property is only for:
     * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
     * - the `facet` and `repeat` operator with one field/repetition definition (without
     * row/column nesting)
     *
     * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using
     * the `row` channel (for `facet` and `repeat`).
     */
    columns?: number;
    /**
     * Definition for how to facet the data. One of:
     * 1) [a field definition for faceting the plot by one
     * field](https://vega.github.io/vega-lite/docs/facet.html#field-def)
     * 2) [An object that maps `row` and `column` channels to their field
     * definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
     */
    facet?: Facet;
    /**
     * A specification of the view that gets faceted.
     *
     * A specification of the view that gets repeated.
     */
    spec?: CoordinateSpec;
    /**
     * Layer or single view specifications to be layered.
     *
     * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as
     * layering facet specifications is not allowed. Instead, use the [facet
     * operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a
     * facet.
     */
    layer?: LayerElement[];
    /**
     * Definition for fields to be repeated. One of:
     * 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be
     * referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row.
     * You can set the number of columns to control the wrapping.
     * 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated
     * along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat":
     * "column"}` can be used to refer to the repeated field respectively.
     */
    repeat?: string[] | RepeatMapping;
    /**
     * A list of views to be concatenated.
     */
    concat?: NormalizedSpec[];
    /**
     * A list of views to be concatenated and put into a column.
     */
    vconcat?: NormalizedSpec[];
    /**
     * A list of views to be concatenated and put into a row.
     */
    hconcat?: NormalizedSpec[];
}

export interface RowColLayoutAlign {
    column?: LayoutAlign;
    row?: LayoutAlign;
}

/**
 * The alignment to apply to symbol legends rows and columns. The supported string values
 * are `"all"`, `"each"` (the default), and `none`. For more information, see the [grid
 * layout documentation](https://vega.github.io/vega/docs/layout).
 *
 * __Default value:__ `"each"`.
 *
 * The alignment to apply to row/column facet's subplot.
 * The supported string values are `"all"`, `"each"`, and `"none"`.
 *
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed
 * one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or
 * column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically
 * based on the maximum observed size. String values for this property will be applied to
 * both grid rows and columns.
 *
 * __Default value:__ `"all"`.
 */
export enum LayoutAlign {
    All = 'all',
    Each = 'each',
    None = 'none',
}

export interface AutoSizeParams {
    /**
     * Determines how size calculation should be performed, one of `"content"` or `"padding"`.
     * The default setting (`"content"`) interprets the width and height settings as the data
     * rectangle (plotting) dimensions, to which padding is then added. In contrast, the
     * `"padding"` setting includes the padding within the view size calculations, such that the
     * width and height settings indicate the **total** intended size of the view.
     *
     * __Default value__: `"content"`
     */
    contains?: Contains;
    /**
     * A boolean flag indicating if autosize layout should be re-calculated on every view
     * update.
     *
     * __Default value__: `false`
     */
    resize?: boolean;
    /**
     * The sizing format type. One of `"pad"`, `"fit"`, `"fit-x"`, `"fit-y"`,  or `"none"`. See
     * the [autosize type](https://vega.github.io/vega-lite/docs/size.html#autosize)
     * documentation for descriptions of each.
     *
     * __Default value__: `"pad"`
     */
    type?: AutosizeType;
}

/**
 * Determines how size calculation should be performed, one of `"content"` or `"padding"`.
 * The default setting (`"content"`) interprets the width and height settings as the data
 * rectangle (plotting) dimensions, to which padding is then added. In contrast, the
 * `"padding"` setting includes the padding within the view size calculations, such that the
 * width and height settings indicate the **total** intended size of the view.
 *
 * __Default value__: `"content"`
 */
export enum Contains {
    Content = 'content',
    Padding = 'padding',
}

/**
 * The sizing format type. One of `"pad"`, `"fit"`, `"fit-x"`, `"fit-y"`,  or `"none"`. See
 * the [autosize type](https://vega.github.io/vega-lite/docs/size.html#autosize)
 * documentation for descriptions of each.
 *
 * __Default value__: `"pad"`
 */
export enum AutosizeType {
    Fit = 'fit',
    FitX = 'fit-x',
    FitY = 'fit-y',
    None = 'none',
    Pad = 'pad',
}

/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of
 * `full` (the default) or `flush`.
 *
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will
 * be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be
 * used. The `flush` setting can be useful when attempting to place sub-plots without axes
 * or legends into a uniform grid structure.
 *
 * __Default value:__ `"full"`
 *
 * The bounds calculation to use for legend orient group layout.
 */
export enum LayoutBounds {
    Flush = 'flush',
    Full = 'full',
}

export interface RowColBoolean {
    column?: boolean;
    row?: boolean;
}

/**
 * Any specification in Vega-Lite.
 *
 * Unit spec that can have a composite mark and row or column channels (shorthand for a
 * facet spec).
 *
 * A full layered plot specification, which may contains `encoding` and `projection`
 * properties that will be applied to underlying unit (single-view) specifications.
 *
 * Base interface for a repeat specification.
 *
 * Base interface for a facet specification.
 *
 * Base interface for a generalized concatenation specification.
 *
 * Base interface for a vertical concatenation specification.
 *
 * Base interface for a horizontal concatenation specification.
 */
export interface NormalizedSpec {
    /**
     * The alignment to apply to grid rows and columns.
     * The supported string values are `"all"`, `"each"`, and `"none"`.
     *
     * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed
     * one after the other.
     * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or
     * column may be of variable size.
     * - For `"all"`, subviews will be aligned and each row or column will be sized identically
     * based on the maximum observed size. String values for this property will be applied to
     * both grid rows and columns.
     *
     * Alternatively, an object value of the form `{"row": string, "column": string}` can be
     * used to supply different alignments for rows and columns.
     *
     * __Default value:__ `"all"`.
     */
    align?: RowColLayoutAlign | LayoutAlign;
    /**
     * The bounds calculation method to use for determining the extent of a sub-plot. One of
     * `full` (the default) or `flush`.
     *
     * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will
     * be used.
     * - If set to `flush`, only the specified width and height values for the sub-view will be
     * used. The `flush` setting can be useful when attempting to place sub-plots without axes
     * or legends into a uniform grid structure.
     *
     * __Default value:__ `"full"`
     */
    bounds?: LayoutBounds;
    /**
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply
     * different centering values for rows and columns.
     *
     * __Default value:__ `false`
     *
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * __Default value:__ `false`
     */
    center?: boolean | RowColBoolean;
    /**
     * An object describing the data source. Set to `null` to ignore the parent's data source.
     * If no data is set, it is derived from the parent.
     */
    data?: URLData | null;
    /**
     * Description of this mark for commenting purpose.
     */
    description?: string;
    /**
     * A key-value mapping between encoding channels and definition of fields.
     *
     * A shared key-value mapping between encoding channels and definition of fields in the
     * underlying layers.
     */
    encoding?: EdEncoding;
    /**
     * The height of a visualization.
     *
     * - For a plot with a continuous y-field, height should be a number.
     * - For a plot with either a discrete y-field or no y-field, height can be either a number
     * indicating a fixed height or an object in the form of `{step: number}` defining the
     * height per discrete step. (No y-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on height, it should be set to `"container"`.
     *
     * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous
     * y-field and `config.view.discreteHeight` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * height of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     */
    height?: Step | number | HeightEnum;
    /**
     * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`,
     * `"line"`,
     * `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition
     * object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
     */
    mark?: Def | BoxPlot;
    /**
     * Name of the visualization for later reference.
     */
    name?: string;
    /**
     * An object defining properties of geographic projection, which will be applied to `shape`
     * path for `"geoshape"` marks
     * and to `latitude` and `"longitude"` channels for other marks.
     *
     * An object defining properties of the geographic projection shared by underlying layers.
     */
    projection?: Projection;
    /**
     * Scale, axis, and legend resolutions for view composition specifications.
     */
    resolve?: Resolve;
    /**
     * A key-value mapping between selection names and definitions.
     */
    selection?: { [key: string]: SelectionDef };
    /**
     * The spacing in pixels between sub-views of the composition operator.
     * An object of the form `{"row": number, "column": number}` can be used to set
     * different spacing values for rows and columns.
     *
     * __Default value__: Depends on `"spacing"` property of [the view composition
     * configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by
     * default)
     *
     * The spacing in pixels between sub-views of the concat operator.
     *
     * __Default value__: `10`
     */
    spacing?: RowColNumber | number;
    /**
     * Title for the plot.
     */
    title?: string[] | TitleParams | string;
    /**
     * An array of data transformations such as filter and new field calculation.
     */
    transform?: Transform[];
    /**
     * An object defining the view background's fill and stroke.
     *
     * __Default value:__ none (transparent)
     */
    view?: ViewBackground;
    /**
     * The width of a visualization.
     *
     * - For a plot with a continuous x-field, width should be a number.
     * - For a plot with either a discrete x-field or no x-field, width can be either a number
     * indicating a fixed width or an object in the form of `{step: number}` defining the width
     * per discrete step. (No x-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on width, it should be set to `"container"`.
     *
     * __Default value:__
     * Based on `config.view.continuousWidth` for a plot with a continuous x-field and
     * `config.view.discreteWidth` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * width of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     */
    width?: Step | number | HeightEnum;
    /**
     * Layer or single view specifications to be layered.
     *
     * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as
     * layering facet specifications is not allowed. Instead, use the [facet
     * operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a
     * facet.
     */
    layer?: LayerElement[];
    /**
     * The number of columns to include in the view composition layout.
     *
     * __Default value__: `undefined` -- An infinite number of columns (a single row) will be
     * assumed. This is equivalent to
     * `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
     *
     * __Note__:
     *
     * 1) This property is only for:
     * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
     * - the `facet` and `repeat` operator with one field/repetition definition (without
     * row/column nesting)
     *
     * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using
     * the `row` channel (for `facet` and `repeat`).
     */
    columns?: number;
    /**
     * Definition for fields to be repeated. One of:
     * 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be
     * referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row.
     * You can set the number of columns to control the wrapping.
     * 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated
     * along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat":
     * "column"}` can be used to refer to the repeated field respectively.
     */
    repeat?: string[] | RepeatMapping;
    /**
     * A specification of the view that gets repeated.
     *
     * A specification of the view that gets faceted.
     */
    spec?: NormalizedSpecSpec;
    /**
     * Definition for how to facet the data. One of:
     * 1) [a field definition for faceting the plot by one
     * field](https://vega.github.io/vega-lite/docs/facet.html#field-def)
     * 2) [An object that maps `row` and `column` channels to their field
     * definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
     */
    facet?: Facet;
    /**
     * A list of views to be concatenated.
     */
    concat?: NormalizedSpec[];
    /**
     * A list of views to be concatenated and put into a column.
     */
    vconcat?: NormalizedSpec[];
    /**
     * A list of views to be concatenated and put into a row.
     */
    hconcat?: NormalizedSpec[];
}

export interface URLData {
    /**
     * An object that specifies the format for parsing the data.
     */
    format?: DataFormat;
    /**
     * Provide a placeholder name and bind data at runtime.
     */
    name?: string;
    /**
     * An URL from which to load the data set. Use the `format.type` property
     * to ensure the loaded data is correctly parsed.
     */
    url?: string;
    /**
     * The full data set, included inline. This can be an array of objects or primitive values,
     * an object, or a string.
     * Arrays of primitive values are ingested as objects with a `data` property. Strings are
     * parsed according to the specified format type.
     */
    values?: Array<boolean | number | { [key: string]: any } | string> | { [key: string]: any } | string;
    /**
     * Generate a sequence of numbers.
     */
    sequence?: SequenceParams;
    /**
     * Generate sphere GeoJSON data for the full globe.
     */
    sphere?: boolean | SphereClass;
    /**
     * Generate graticule GeoJSON data for geographic reference lines.
     */
    graticule?: boolean | GraticuleParams;
}

/**
 * An object that specifies the format for parsing the data.
 */
export interface DataFormat {
    /**
     * If set to `null`, disable type inference based on the spec and only use type inference
     * based on the data.
     * Alternatively, a parsing directive object can be provided for explicit data types. Each
     * property of the object corresponds to a field name, and the value to the desired data
     * type (one of `"number"`, `"boolean"`, `"date"`, or null (do not parse the field)).
     * For example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each
     * input record a Date value.
     *
     * For `"date"`, we parse data based using Javascript's
     * [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
     * For Specific date formats can be provided (e.g., `{foo: "date:'%m%d%Y'"}`), using the
     * [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date
     * format parsing is supported similarly (e.g., `{foo: "utc:'%m%d%Y'"}`). See more about
     * [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)
     */
    parse?: { [key: string]: null | string } | null;
    /**
     * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
     *
     * __Default value:__  The default format type is determined by the extension of the file
     * URL.
     * If no extension is detected, `"json"` will be used by default.
     */
    type?: DataFormatType;
    /**
     * The delimiter between records. The delimiter must be a single character (i.e., a single
     * 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are not.
     */
    delimiter?: string;
    /**
     * The JSON property containing the desired data.
     * This parameter can be used when the loaded JSON file may have surrounding structure or
     * meta-data.
     * For example `"property": "values.features"` is equivalent to retrieving
     * `json.values.features`
     * from the loaded JSON object.
     */
    property?: string;
    /**
     * The name of the TopoJSON object set to convert to a GeoJSON feature collection.
     * For example, in a map of the world, there may be an object set named `"countries"`.
     * Using the feature property, we can extract this set and generate a GeoJSON feature object
     * for each country.
     */
    feature?: string;
    /**
     * The name of the TopoJSON object set to convert to mesh.
     * Similar to the `feature` option, `mesh` extracts a named TopoJSON object set.
     * Unlike the `feature` option, the corresponding geo data is returned as a single, unified
     * mesh instance, not as individual GeoJSON features.
     * Extracting a mesh is useful for more efficiently drawing borders or other geographic
     * elements that you do not need to associate with specific regions such as individual
     * countries, states or counties.
     */
    mesh?: string;
}

/**
 * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
 *
 * __Default value:__  The default format type is determined by the extension of the file
 * URL.
 * If no extension is detected, `"json"` will be used by default.
 */
export enum DataFormatType {
    CSV = 'csv',
    Dsv = 'dsv',
    JSON = 'json',
    Topojson = 'topojson',
    Tsv = 'tsv',
}

export interface GraticuleParams {
    /**
     * Sets both the major and minor extents to the same values.
     */
    extent?: Array<number[]>;
    /**
     * The major extent of the graticule as a two-element array of coordinates.
     */
    extentMajor?: Array<number[]>;
    /**
     * The minor extent of the graticule as a two-element array of coordinates.
     */
    extentMinor?: Array<number[]>;
    /**
     * The precision of the graticule in degrees.
     *
     * __Default value:__ `2.5`
     */
    precision?: number;
    /**
     * Sets both the major and minor step angles to the same values.
     */
    step?: number[];
    /**
     * The major step angles of the graticule.
     *
     *
     * __Default value:__ `[90, 360]`
     */
    stepMajor?: number[];
    /**
     * The minor step angles of the graticule.
     *
     * __Default value:__ `[10, 10]`
     */
    stepMinor?: number[];
}

/**
 * Generate a sequence of numbers.
 */
export interface SequenceParams {
    /**
     * The name of the generated sequence field.
     *
     * __Default value:__ `"data"`
     */
    as?: string;
    /**
     * The starting value of the sequence (inclusive).
     */
    start: number;
    /**
     * The step value between sequence entries.
     *
     * __Default value:__ `1`
     */
    step?: number;
    /**
     * The ending value of the sequence (exclusive).
     */
    stop: number;
}

export interface SphereClass {}

/**
 * A key-value mapping between encoding channels and definition of fields.
 *
 * A shared key-value mapping between encoding channels and definition of fields in the
 * underlying layers.
 */
export interface EdEncoding {
    /**
     * Rotation angle of point and text marks.
     */
    angle?: AngleClass;
    /**
     * Color of the marks – either fill or stroke color based on  the `filled` property of mark
     * definition.
     * By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,
     * `"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and
     * `"point"`.
     *
     * __Default value:__ If undefined, the default color depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
     * property.
     *
     * _Note:_
     * 1) For fine-grained control over both fill and stroke colors of the marks, please use the
     * `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence
     * than `color`, thus may override the `color` encoding if conflicting encodings are
     * specified.
     * 2) See the scale documentation for more information about customizing [color
     * scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).
     */
    color?: ColorClass;
    /**
     * A field definition for the horizontal facet of trellis plots.
     */
    column?: RowColumnEncodingFieldDef;
    /**
     * A text description of this mark for ARIA accessibility (SVG output only). For SVG output
     * the `"aria-label"` attribute will be set to this description.
     */
    description?: DescriptionClass;
    /**
     * Additional levels of detail for grouping data in aggregate views and
     * in line, trail, and area marks without mapping data to a specific visual channel.
     */
    detail?: TypedFieldDef[] | TypedFieldDef;
    /**
     * A field definition for the (flexible) facet of trellis plots.
     *
     * If either `row` or `column` is specified, this channel will be ignored.
     */
    facet?: FacetEncodingFieldDef;
    /**
     * Fill color of the marks.
     * __Default value:__ If undefined, the default color depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
     * property.
     *
     * _Note:_ The `fill` encoding has higher precedence than `color`, thus may override the
     * `color` encoding if conflicting encodings are specified.
     */
    fill?: FillClass;
    /**
     * Fill opacity of the marks.
     *
     * __Default value:__ If undefined, the default opacity depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity`
     * property.
     */
    fillOpacity?: FillOpacityClass;
    /**
     * A URL to load upon mouse click.
     */
    href?: HrefClass;
    /**
     * A data field to use as a unique key for data binding. When a visualization’s data is
     * updated, the key value will be used to match data elements to existing mark instances.
     * Use a key channel to enable object constancy for transitions over dynamic data.
     */
    key?: KeyClass;
    /**
     * Latitude position of geographically projected marks.
     */
    latitude?: LatitudeClass;
    /**
     * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and
     * `"rule"`.
     */
    latitude2?: Latitude2Class;
    /**
     * Longitude position of geographically projected marks.
     */
    longitude?: LongitudeClass;
    /**
     * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`,
     * and  `"rule"`.
     */
    longitude2?: Longitude2Class;
    /**
     * Opacity of the marks.
     *
     * __Default value:__ If undefined, the default opacity depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity`
     * property.
     */
    opacity?: OpacityClass;
    /**
     * Order of the marks.
     * - For stacked marks, this `order` channel encodes [stack
     * order](https://vega.github.io/vega-lite/docs/stack.html#order).
     * - For line and trail marks, this `order` channel encodes order of data points in the
     * lines. This can be useful for creating [a connected
     * scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html).
     * Setting `order` to `{"value": null}` makes the line marks use the original order in the
     * data sources.
     * - Otherwise, this `order` channel encodes layer order of the marks.
     *
     * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating
     * additional aggregation grouping.
     */
    order?: OrderFieldDef[] | OrderDef;
    /**
     * The outer radius in pixels of arc marks.
     */
    radius?: RadiusClass;
    /**
     * The inner radius in pixels of arc marks.
     */
    radius2?: Radius2Class;
    /**
     * A field definition for the vertical facet of trellis plots.
     */
    row?: RowColumnEncodingFieldDef;
    /**
     * Shape of the mark.
     *
     * 1. For `point` marks the supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * 2. For `geoshape` marks it should be a field definition of the geojson data
     *
     * __Default value:__ If undefined, the default shape depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s `shape`
     * property. (`"circle"` if unset.)
     */
    shape?: MarkPropDefStringNullTypeForShape;
    /**
     * Size of the mark.
     * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
     * - For `"bar"` and `"tick"` – the bar and tick's size.
     * - For `"text"` – the text's font size.
     * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of
     * line with varying size)
     */
    size?: SizeClass;
    /**
     * Stroke color of the marks.
     * __Default value:__ If undefined, the default color depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
     * property.
     *
     * _Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the
     * `color` encoding if conflicting encodings are specified.
     */
    stroke?: StrokeClass;
    /**
     * Stroke dash of the marks.
     *
     * __Default value:__ `[1,0]` (No dash).
     */
    strokeDash?: MarkPropDefNumber;
    /**
     * Stroke opacity of the marks.
     *
     * __Default value:__ If undefined, the default opacity depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity`
     * property.
     */
    strokeOpacity?: StrokeOpacityClass;
    /**
     * Stroke width of the marks.
     *
     * __Default value:__ If undefined, the default stroke width depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth`
     * property.
     */
    strokeWidth?: StrokeWidthClass;
    /**
     * Text of the `text` mark.
     */
    text?: TextDef;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: ThetaClass;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: Theta2Class;
    /**
     * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the
     * `tooltip` property in the mark
     * definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip in Vega-Lite.
     */
    tooltip?: StringFieldDef[] | FieldOrDatumDefWithConditionStringFieldDefString | null;
    /**
     * The URL of an image mark.
     */
    url?: URLClass;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: XClass;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: X2Class;
    /**
     * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    xError?: XErrorClass;
    /**
     * Secondary error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    xError2?: XError2Class;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: YClass;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: Y2Class;
    /**
     * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    yError?: YErrorClass;
    /**
     * Secondary error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    yError2?: YError2Class;
}

/**
 * Rotation angle of point and text marks.
 *
 * Fill opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity`
 * property.
 *
 * Opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity`
 * property.
 *
 * Size of the mark.
 * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
 * - For `"bar"` and `"tick"` – the bar and tick's size.
 * - For `"text"` – the text's font size.
 * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of
 * line with varying size)
 *
 * Stroke opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity`
 * property.
 *
 * Stroke width of the marks.
 *
 * __Default value:__ If undefined, the default stroke width depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth`
 * property.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface AngleClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefNumber[] | PurpleConditionalValueDefNumber;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

export interface ArgmDef {
    argmax?: string;
    argmin?: string;
}

/**
 * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to
 * perform on the field prior to sorting (e.g., `"count"`, `"mean"` and `"median"`).
 * An aggregation is required when there are multiple values of the sort field for each
 * encoded data field.
 * The input data objects will be aggregated, grouped by the encoded data field.
 *
 * For a full list of operations, please see the documentation for
 * [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).
 *
 * __Default value:__ `"sum"` for stacked plots. Otherwise, `"min"`.
 */
export enum NonArgAggregateOp {
    Average = 'average',
    Ci0 = 'ci0',
    Ci1 = 'ci1',
    Count = 'count',
    Distinct = 'distinct',
    Max = 'max',
    Mean = 'mean',
    Median = 'median',
    Min = 'min',
    Missing = 'missing',
    Product = 'product',
    Q1 = 'q1',
    Q3 = 'q3',
    Stderr = 'stderr',
    Stdev = 'stdev',
    Stdevp = 'stdevp',
    Sum = 'sum',
    Valid = 'valid',
    Values = 'values',
    Variance = 'variance',
    Variancep = 'variancep',
}

/**
 * Binning properties or boolean flag for determining whether to bin data or not.
 */
export interface BinParams {
    /**
     * A value in the binned domain at which to anchor the bins, shifting the bin boundaries if
     * necessary to ensure that a boundary aligns with the anchor value.
     *
     * __Default value:__ the minimum bin extent value
     */
    anchor?: number;
    /**
     * The number base to use for automatic bin determination (default is base 10).
     *
     * __Default value:__ `10`
     */
    base?: number;
    /**
     * When set to `true`, Vega-Lite treats the input data as already binned.
     */
    binned?: boolean;
    /**
     * Scale factors indicating allowable subdivisions. The default value is [5, 2], which
     * indicates that for base 10 numbers (the default base), the method may consider dividing
     * bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can
     * check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the
     * given constraints.
     *
     * __Default value:__ `[5, 2]`
     */
    divide?: number[];
    /**
     * A two-element (`[min, max]`) array indicating the range of desired bin values.
     */
    extent?: number[] | BinExtentClass;
    /**
     * Maximum number of bins.
     *
     * __Default value:__ `6` for `row`, `column` and `shape` channels; `10` for other channels
     */
    maxbins?: number;
    /**
     * A minimum allowable step size (particularly useful for integer values).
     */
    minstep?: number;
    /**
     * If true, attempts to make the bin boundaries use human-friendly boundaries, such as
     * multiples of ten.
     *
     * __Default value:__ `true`
     */
    nice?: boolean;
    /**
     * An exact step size to use between bins.
     *
     * __Note:__ If provided, options such as maxbins will be ignored.
     */
    step?: number;
    /**
     * An array of allowable step sizes to choose from.
     */
    steps?: number[];
}

export interface BinExtentClass {
    /**
     * The field name to extract selected values for, when a selection is
     * [projected](https://vega.github.io/vega-lite/docs/project.html)
     * over multiple fields or encodings.
     */
    field?: string;
    /**
     * The name of a selection.
     */
    selection: string;
    /**
     * The encoding channel to extract selected values for, when a selection is
     * [projected](https://vega.github.io/vega-lite/docs/project.html)
     * over multiple fields or encodings.
     */
    encoding?: SingleDefUnitChannel;
}

/**
 * The encoding channel to extract selected values for, when a selection is
 * [projected](https://vega.github.io/vega-lite/docs/project.html)
 * over multiple fields or encodings.
 */
export enum SingleDefUnitChannel {
    Angle = 'angle',
    Color = 'color',
    Description = 'description',
    Fill = 'fill',
    FillOpacity = 'fillOpacity',
    Href = 'href',
    Key = 'key',
    Latitude = 'latitude',
    Latitude2 = 'latitude2',
    Longitude = 'longitude',
    Longitude2 = 'longitude2',
    Opacity = 'opacity',
    Radius = 'radius',
    Radius2 = 'radius2',
    Shape = 'shape',
    Size = 'size',
    Stroke = 'stroke',
    StrokeDash = 'strokeDash',
    StrokeOpacity = 'strokeOpacity',
    StrokeWidth = 'strokeWidth',
    Text = 'text',
    Theta = 'theta',
    Theta2 = 'theta2',
    URL = 'url',
    X = 'x',
    X2 = 'x2',
    Y = 'y',
    Y2 = 'y2',
}

export interface ConditionalValueDefNumber {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: number;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
}

export interface Selection {
    not?: Selection | string;
    and?: Array<Selection | string>;
    or?: Array<Selection | string>;
}

export interface Predicate {
    not?: Predicate | string;
    and?: Array<Predicate | string>;
    or?: Array<Predicate | string>;
    /**
     * The value that the field should be equal to.
     */
    equal?: boolean | DateTime | number | string;
    /**
     * Field to be tested.
     */
    field?: string;
    /**
     * Time unit for the field to be tested.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * An array of inclusive minimum and maximum values
     * for a field value of a data item to be included in the filtered data.
     */
    range?: Array<DateTime | number | null>;
    /**
     * A set of values that the `field`'s value should be a member of,
     * for a data item included in the filtered data.
     */
    oneOf?: Array<boolean | DateTime | number | string>;
    /**
     * The value that the field should be less than.
     */
    lt?: DateTime | number | string;
    /**
     * The value that the field should be greater than.
     */
    gt?: DateTime | number | string;
    /**
     * The value that the field should be less than or equals to.
     */
    lte?: DateTime | number | string;
    /**
     * The value that the field should be greater than or equals to.
     */
    gte?: DateTime | number | string;
    /**
     * If set to true the field's value has to be valid, meaning both not `null` and not
     * [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).
     */
    valid?: boolean;
    /**
     * Filter using a selection name or a logical composition of selection names.
     */
    selection?: Selection | string;
}

/**
 * Object for defining datetime in Vega-Lite Filter.
 * If both month and quarter are provided, month has higher precedence.
 * `day` cannot be combined with other date.
 * We accept string for month and day names.
 */
export interface DateTime {
    /**
     * Integer value representing the date (day of the month) from 1-31.
     */
    date?: number;
    /**
     * Value representing the day of a week. This can be one of:
     * (1) integer value -- `1` represents Monday;
     * (2) case-insensitive day name (e.g., `"Monday"`);
     * (3) case-insensitive, 3-character short day name (e.g., `"Mon"`).
     *
     * **Warning:** A DateTime definition object with `day`** should not be combined with
     * `year`, `quarter`, `month`, or `date`.
     */
    day?: number | string;
    /**
     * Integer value representing the hour of a day from 0-23.
     */
    hours?: number;
    /**
     * Integer value representing the millisecond segment of time.
     */
    milliseconds?: number;
    /**
     * Integer value representing the minute segment of time from 0-59.
     */
    minutes?: number;
    /**
     * One of:
     * (1) integer value representing the month from `1`-`12`. `1` represents January;
     * (2) case-insensitive month name (e.g., `"January"`);
     * (3) case-insensitive, 3-character short month name (e.g., `"Jan"`).
     */
    month?: number | string;
    /**
     * Integer value representing the quarter of the year (from 1-4).
     */
    quarter?: number;
    /**
     * Integer value representing the second segment (0-59) of a time value
     */
    seconds?: number;
    /**
     * A boolean flag indicating if date time is in utc time. If false, the date time is in
     * local time
     */
    utc?: boolean;
    /**
     * Integer value representing the year.
     */
    year?: number;
}

export interface TimeUnitParams {
    /**
     * If no `unit` is specified, maxbins is used to infer time units.
     */
    maxbins?: number;
    /**
     * The number of steps between bins, in terms of the least
     * significant unit provided.
     */
    step?: number;
    /**
     * Defines how date-time values should be binned.
     */
    unit?: TimeUnit;
    /**
     * True to use UTC timezone. Equivalent to using a `utc` prefixed `TimeUnit`.
     */
    utc?: boolean;
}

/**
 * Defines how date-time values should be binned.
 */
export enum TimeUnit {
    Date = 'date',
    Day = 'day',
    Dayhours = 'dayhours',
    Dayhoursminutes = 'dayhoursminutes',
    Dayhoursminutesseconds = 'dayhoursminutesseconds',
    Dayofyear = 'dayofyear',
    Hours = 'hours',
    Hoursminutes = 'hoursminutes',
    Hoursminutesseconds = 'hoursminutesseconds',
    Milliseconds = 'milliseconds',
    Minutes = 'minutes',
    Minutesseconds = 'minutesseconds',
    Month = 'month',
    Monthdate = 'monthdate',
    Monthdatehours = 'monthdatehours',
    Monthdatehoursminutes = 'monthdatehoursminutes',
    Monthdatehoursminutesseconds = 'monthdatehoursminutesseconds',
    Quarter = 'quarter',
    Quartermonth = 'quartermonth',
    Seconds = 'seconds',
    Secondsmilliseconds = 'secondsmilliseconds',
    Utcdate = 'utcdate',
    Utcday = 'utcday',
    Utcdayhours = 'utcdayhours',
    Utcdayhoursminutes = 'utcdayhoursminutes',
    Utcdayhoursminutesseconds = 'utcdayhoursminutesseconds',
    Utcdayofyear = 'utcdayofyear',
    Utchours = 'utchours',
    Utchoursminutes = 'utchoursminutes',
    Utchoursminutesseconds = 'utchoursminutesseconds',
    Utcmilliseconds = 'utcmilliseconds',
    Utcminutes = 'utcminutes',
    Utcminutesseconds = 'utcminutesseconds',
    Utcmonth = 'utcmonth',
    Utcmonthdate = 'utcmonthdate',
    Utcmonthdatehours = 'utcmonthdatehours',
    Utcmonthdatehoursminutes = 'utcmonthdatehoursminutes',
    Utcmonthdatehoursminutesseconds = 'utcmonthdatehoursminutesseconds',
    Utcquarter = 'utcquarter',
    Utcquartermonth = 'utcquartermonth',
    Utcseconds = 'utcseconds',
    Utcsecondsmilliseconds = 'utcsecondsmilliseconds',
    Utcweek = 'utcweek',
    Utcweekday = 'utcweekday',
    Utcweekdayhoursminutes = 'utcweekdayhoursminutes',
    Utcweekdayhoursminutesseconds = 'utcweekdayhoursminutesseconds',
    Utcweeksdayhours = 'utcweeksdayhours',
    Utcyear = 'utcyear',
    Utcyeardayofyear = 'utcyeardayofyear',
    Utcyearmonth = 'utcyearmonth',
    Utcyearmonthdate = 'utcyearmonthdate',
    Utcyearmonthdatehours = 'utcyearmonthdatehours',
    Utcyearmonthdatehoursminutes = 'utcyearmonthdatehoursminutes',
    Utcyearmonthdatehoursminutesseconds = 'utcyearmonthdatehoursminutesseconds',
    Utcyearquarter = 'utcyearquarter',
    Utcyearquartermonth = 'utcyearquartermonth',
    Utcyearweek = 'utcyearweek',
    Utcyearweekday = 'utcyearweekday',
    Utcyearweekdayhours = 'utcyearweekdayhours',
    Utcyearweekdayhoursminutes = 'utcyearweekdayhoursminutes',
    Utcyearweekdayhoursminutesseconds = 'utcyearweekdayhoursminutesseconds',
    Week = 'week',
    Weekday = 'weekday',
    Weekdayhoursminutes = 'weekdayhoursminutes',
    Weekdayhoursminutesseconds = 'weekdayhoursminutesseconds',
    Weeksdayhours = 'weeksdayhours',
    Year = 'year',
    Yeardayofyear = 'yeardayofyear',
    Yearmonth = 'yearmonth',
    Yearmonthdate = 'yearmonthdate',
    Yearmonthdatehours = 'yearmonthdatehours',
    Yearmonthdatehoursminutes = 'yearmonthdatehoursminutes',
    Yearmonthdatehoursminutesseconds = 'yearmonthdatehoursminutesseconds',
    Yearquarter = 'yearquarter',
    Yearquartermonth = 'yearquartermonth',
    Yearweek = 'yearweek',
    Yearweekday = 'yearweekday',
    Yearweekdayhours = 'yearweekdayhours',
    Yearweekdayhoursminutes = 'yearweekdayhoursminutes',
    Yearweekdayhoursminutesseconds = 'yearweekdayhoursminutesseconds',
}

export interface PurpleConditionalValueDefNumber {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
}

/**
 * Object for defining datetime in Vega-Lite Filter.
 * If both month and quarter are provided, month has higher precedence.
 * `day` cannot be combined with other date.
 * We accept string for month and day names.
 *
 * Reference to a repeated value.
 */
export interface RepeatRefClass {
    /**
     * Integer value representing the date (day of the month) from 1-31.
     */
    date?: number;
    /**
     * Value representing the day of a week. This can be one of:
     * (1) integer value -- `1` represents Monday;
     * (2) case-insensitive day name (e.g., `"Monday"`);
     * (3) case-insensitive, 3-character short day name (e.g., `"Mon"`).
     *
     * **Warning:** A DateTime definition object with `day`** should not be combined with
     * `year`, `quarter`, `month`, or `date`.
     */
    day?: number | string;
    /**
     * Integer value representing the hour of a day from 0-23.
     */
    hours?: number;
    /**
     * Integer value representing the millisecond segment of time.
     */
    milliseconds?: number;
    /**
     * Integer value representing the minute segment of time from 0-59.
     */
    minutes?: number;
    /**
     * One of:
     * (1) integer value representing the month from `1`-`12`. `1` represents January;
     * (2) case-insensitive month name (e.g., `"January"`);
     * (3) case-insensitive, 3-character short month name (e.g., `"Jan"`).
     */
    month?: number | string;
    /**
     * Integer value representing the quarter of the year (from 1-4).
     */
    quarter?: number;
    /**
     * Integer value representing the second segment (0-59) of a time value
     */
    seconds?: number;
    /**
     * A boolean flag indicating if date time is in utc time. If false, the date time is in
     * local time
     */
    utc?: boolean;
    /**
     * Integer value representing the year.
     */
    year?: number;
    repeat?: RepeatEnum;
}

export enum RepeatEnum {
    Column = 'column',
    Layer = 'layer',
    Repeat = 'repeat',
    Row = 'row',
}

/**
 * Reference to a repeated value.
 */
export interface RepeatRef {
    repeat: RepeatEnum;
}

/**
 * Properties of a legend or boolean flag for determining whether to show it.
 */
export interface Legend {
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG group, removing the
     * legend from the ARIA accessibility tree.
     *
     * __Default value:__ `true`
     */
    aria?: boolean;
    /**
     * The height in pixels to clip symbol legend entries and limit their size.
     */
    clipHeight?: number;
    /**
     * The horizontal padding in pixels between symbol legend entries.
     *
     * __Default value:__ `10`.
     */
    columnPadding?: number;
    /**
     * The number of columns in which to arrange symbol legend entries. A value of `0` or lower
     * indicates a single row with one column per entry.
     */
    columns?: number;
    /**
     * Corner radius for the full legend.
     */
    cornerRadius?: number;
    /**
     * A text description of this legend for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If the `aria` property is true, for SVG output the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)
     * will be set to this description.
     * If the description is unspecified it will be automatically generated.
     */
    description?: string;
    /**
     * The direction of the legend, one of `"vertical"` or `"horizontal"`.
     *
     * __Default value:__
     * - For top-/bottom-`orient`ed legends, `"horizontal"`
     * - For left-/right-`orient`ed legends, `"vertical"`
     * - For top/bottom-left/right-`orient`ed legends, `"horizontal"` for gradient legends and
     * `"vertical"` for symbol legends.
     */
    direction?: Orientation;
    /**
     * Background fill color for the full legend.
     */
    fillColor?: null | string;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * The length in pixels of the primary axis of a color gradient. This value corresponds to
     * the height of a vertical gradient or the width of a horizontal gradient.
     *
     * __Default value:__ `200`.
     */
    gradientLength?: number;
    /**
     * Opacity of the color gradient.
     */
    gradientOpacity?: number;
    /**
     * The color of the gradient stroke, can be in hex color code or regular color name.
     *
     * __Default value:__ `"lightGray"`.
     */
    gradientStrokeColor?: null | string;
    /**
     * The width of the gradient stroke, in pixels.
     *
     * __Default value:__ `0`.
     */
    gradientStrokeWidth?: number;
    /**
     * The thickness in pixels of the color gradient. This value corresponds to the width of a
     * vertical gradient or the height of a horizontal gradient.
     *
     * __Default value:__ `16`.
     */
    gradientThickness?: number;
    /**
     * The alignment to apply to symbol legends rows and columns. The supported string values
     * are `"all"`, `"each"` (the default), and `none`. For more information, see the [grid
     * layout documentation](https://vega.github.io/vega/docs/layout).
     *
     * __Default value:__ `"each"`.
     */
    gridAlign?: LayoutAlign;
    /**
     * The alignment of the legend label, can be left, center, or right.
     */
    labelAlign?: Align;
    /**
     * The position of the baseline of legend label, can be `"top"`, `"middle"`, `"bottom"`, or
     * `"alphabetic"`.
     *
     * __Default value:__ `"middle"`.
     */
    labelBaseline?: Baseline;
    /**
     * The color of the legend label, can be in hex color code or regular color name.
     */
    labelColor?: null | string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the legend's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * The font of the legend label.
     */
    labelFont?: string;
    /**
     * The font size of legend label.
     *
     * __Default value:__ `10`.
     */
    labelFontSize?: number;
    /**
     * The font style of legend label.
     */
    labelFontStyle?: string;
    /**
     * The font weight of legend label.
     */
    labelFontWeight?: number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of legend tick labels.
     *
     * __Default value:__ `160`.
     */
    labelLimit?: number;
    /**
     * The offset of the legend label.
     */
    labelOffset?: number;
    /**
     * Opacity of labels.
     */
    labelOpacity?: number;
    /**
     * The strategy to use for resolving overlap of labels in gradient legends. If `false`, no
     * overlap reduction is attempted. If set to `true` (default) or `"parity"`, a strategy of
     * removing every other label is used. If set to `"greedy"`, a linear scan of the labels is
     * performed, removing any label that overlaps with the last visible label (this often works
     * better for log-scaled axes).
     *
     * __Default value:__ `true`.
     */
    labelOverlap?: boolean | LabelOverlapEnum;
    /**
     * Padding in pixels between the legend and legend labels.
     */
    labelPadding?: number;
    /**
     * The minimum separation that must be between label bounding boxes for them to be
     * considered non-overlapping (default `0`). This property is ignored if *labelOverlap*
     * resolution is not enabled.
     */
    labelSeparation?: number;
    /**
     * Custom x-position for legend with orient "none".
     */
    legendX?: number;
    /**
     * Custom y-position for legend with orient "none".
     */
    legendY?: number;
    /**
     * The offset in pixels by which to displace the legend from the data rectangle and axes.
     *
     * __Default value:__ `18`.
     */
    offset?: number;
    /**
     * The orientation of the legend, which determines how the legend is positioned within the
     * scene. One of `"left"`, `"right"`, `"top"`, `"bottom"`, `"top-left"`, `"top-right"`,
     * `"bottom-left"`, `"bottom-right"`, `"none"`.
     *
     * __Default value:__ `"right"`
     */
    orient?: LegendOrient;
    /**
     * The padding between the border and content of the legend group.
     *
     * __Default value:__ `0`.
     */
    padding?: number;
    /**
     * The vertical padding in pixels between symbol legend entries.
     *
     * __Default value:__ `2`.
     */
    rowPadding?: number;
    /**
     * Border stroke color for the full legend.
     */
    strokeColor?: null | string;
    /**
     * An array of alternating [stroke, space] lengths for dashed symbol strokes.
     */
    symbolDash?: number[];
    /**
     * The pixel offset at which to start drawing with the symbol stroke dash array.
     */
    symbolDashOffset?: number;
    /**
     * The color of the legend symbol,
     */
    symbolFillColor?: null | string;
    /**
     * The maximum number of allowed entries for a symbol legend. Additional entries will be
     * dropped.
     */
    symbolLimit?: number;
    /**
     * Horizontal pixel offset for legend symbols.
     *
     * __Default value:__ `0`.
     */
    symbolOffset?: number;
    /**
     * Opacity of the legend symbols.
     */
    symbolOpacity?: number;
    /**
     * The size of the legend symbol, in pixels.
     *
     * __Default value:__ `100`.
     */
    symbolSize?: number;
    /**
     * Stroke color for legend symbols.
     */
    symbolStrokeColor?: null | string;
    /**
     * The width of the symbol's stroke.
     *
     * __Default value:__ `1.5`.
     */
    symbolStrokeWidth?: number;
    /**
     * The symbol shape. One of the plotting shapes `circle` (default), `square`, `cross`,
     * `diamond`, `triangle-up`, `triangle-down`, `triangle-right`, or `triangle-left`, the line
     * symbol `stroke`, or one of the centered directional shapes `arrow`, `wedge`, or
     * `triangle`. Alternatively, a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) can be provided.
     * For correct sizing, custom shape paths should be defined within a square bounding box
     * with coordinates ranging from -1 to 1 along both the x and y dimensions.
     *
     * __Default value:__ `"circle"`.
     */
    symbolType?: string;
    /**
     * The desired number of tick values for quantitative legends.
     */
    tickCount?: TimeIntervalStep | number | TimeInterval;
    /**
     * The minimum desired step between legend ticks, in terms of scale domain values. For
     * example, a value of `1` indicates that ticks should not be less than 1 unit apart. If
     * `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to
     * enforce the minimum step value.
     *
     * __Default value__: `undefined`
     */
    tickMinStep?: number;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * Horizontal text alignment for legend titles.
     *
     * __Default value:__ `"left"`.
     */
    titleAlign?: Align;
    /**
     * Text anchor position for placing legend titles.
     */
    titleAnchor?: TitleAnchor | null;
    /**
     * Vertical text baseline for legend titles.  One of `"alphabetic"` (default), `"top"`,
     * `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
     * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
     * relative to the *lineHeight* rather than *fontSize* alone.
     *
     * __Default value:__ `"top"`.
     */
    titleBaseline?: Baseline;
    /**
     * The color of the legend title, can be in hex color code or regular color name.
     */
    titleColor?: null | string;
    /**
     * The font of the legend title.
     */
    titleFont?: string;
    /**
     * The font size of the legend title.
     */
    titleFontSize?: number;
    /**
     * The font style of the legend title.
     */
    titleFontStyle?: string;
    /**
     * The font weight of the legend title.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    titleFontWeight?: number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of legend titles.
     *
     * __Default value:__ `180`.
     */
    titleLimit?: number;
    /**
     * Line height in pixels for multi-line title text or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    titleLineHeight?: number;
    /**
     * Opacity of the legend title.
     */
    titleOpacity?: number;
    /**
     * Orientation of the legend title.
     */
    titleOrient?: Orient;
    /**
     * The padding, in pixels, between title and legend.
     *
     * __Default value:__ `5`.
     */
    titlePadding?: number;
    /**
     * The type of the legend. Use `"symbol"` to create a discrete legend and `"gradient"` for a
     * continuous color gradient.
     *
     * __Default value:__ `"gradient"` for non-binned quantitative fields and temporal fields;
     * `"symbol"` otherwise.
     */
    type?: LegendType;
    /**
     * Explicitly set the visible legend values.
     */
    values?: Array<boolean | DateTime | number | string>;
    /**
     * A non-negative integer indicating the z-index of the legend.
     * If zindex is 0, legend should be drawn behind all chart elements.
     * To put them in front, use zindex = 1.
     */
    zindex?: number;
}

/**
 * The orientation of a non-stacked bar, tick, area, and line charts.
 * The value is either horizontal (default) or vertical.
 * - For bar, rule and tick, this determines whether the size of the bar and tick
 * should be applied to x or y dimension.
 * - For area, this property determines the orient property of the Vega output.
 * - For line and trail marks, this property determines the sort order of the points in the
 * line
 * if `config.sortLineBy` is not specified.
 * For stacked charts, this is always determined by the orientation of the stack;
 * therefore explicitly specified value will be ignored.
 *
 * The direction of the legend, one of `"vertical"` or `"horizontal"`.
 *
 * __Default value:__
 * - For top-/bottom-`orient`ed legends, `"horizontal"`
 * - For left-/right-`orient`ed legends, `"vertical"`
 * - For top/bottom-left/right-`orient`ed legends, `"horizontal"` for gradient legends and
 * `"vertical"` for symbol legends.
 *
 * The default direction (`"horizontal"` or `"vertical"`) for gradient legends.
 *
 * __Default value:__ `"vertical"`.
 *
 * The layout direction for legend orient group layout.
 *
 * The default direction (`"horizontal"` or `"vertical"`) for symbol legends.
 *
 * __Default value:__ `"vertical"`.
 *
 * Orientation of the box plot. This is normally automatically determined based on types of
 * fields on x and y channels. However, an explicit `orient` be specified when the
 * orientation is ambiguous.
 *
 * __Default value:__ `"vertical"`.
 *
 * Orientation of the error bar. This is normally automatically determined, but can be
 * specified when the orientation is ambiguous and cannot be automatically determined.
 *
 * Orientation of the error band. This is normally automatically determined, but can be
 * specified when the orientation is ambiguous and cannot be automatically determined.
 */
export enum Orientation {
    Horizontal = 'horizontal',
    Vertical = 'vertical',
}

/**
 * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
 * of `"left"`, `"right"`, `"center"`.
 *
 * Horizontal text alignment of axis tick labels, overriding the default setting for the
 * current axis orientation.
 *
 * Horizontal text alignment of axis titles.
 *
 * Horizontal text alignment of header labels. One of `"left"`, `"center"`, or `"right"`.
 *
 * Horizontal text alignment (to the anchor) of header titles.
 *
 * The alignment of the legend label, can be left, center, or right.
 *
 * Horizontal text alignment for legend titles.
 *
 * __Default value:__ `"left"`.
 *
 * Horizontal text alignment for title text. One of `"left"`, `"center"`, or `"right"`.
 */
export enum Align {
    Center = 'center',
    Left = 'left',
    Right = 'right',
}

/**
 * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
 * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
 * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
 * `lineHeight` rather than `fontSize` alone.
 *
 * Vertical text baseline of axis tick labels, overriding the default setting for the
 * current axis orientation.
 * One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or
 * `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"`
 * and `"bottom"`, but are calculated relative to the *lineHeight* rather than *fontSize*
 * alone.
 *
 * Vertical text baseline for axis titles. One of `"alphabetic"` (default), `"top"`,
 * `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
 * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
 * relative to the *lineHeight* rather than *fontSize* alone.
 *
 * The vertical text baseline for the header labels. One of `"alphabetic"` (default),
 * `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`.
 * The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`,
 * but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
 *
 * The vertical text baseline for the header title. One of `"alphabetic"` (default),
 * `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`.
 * The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`,
 * but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
 *
 * __Default value:__ `"middle"`
 *
 * The position of the baseline of legend label, can be `"top"`, `"middle"`, `"bottom"`, or
 * `"alphabetic"`.
 *
 * __Default value:__ `"middle"`.
 *
 * Vertical text baseline for legend titles.  One of `"alphabetic"` (default), `"top"`,
 * `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
 * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
 * relative to the *lineHeight* rather than *fontSize* alone.
 *
 * __Default value:__ `"top"`.
 *
 * Vertical text baseline for title and subtitle text. One of `"alphabetic"` (default),
 * `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
 * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
 * relative to the *lineHeight* rather than *fontSize* alone.
 */
export enum Baseline {
    Alphabetic = 'alphabetic',
    Bottom = 'bottom',
    LineBottom = 'line-bottom',
    LineTop = 'line-top',
    Middle = 'middle',
    Top = 'top',
}

export enum FontWeightEnum {
    Bold = 'bold',
    Bolder = 'bolder',
    Lighter = 'lighter',
    Normal = 'normal',
}

export enum LabelOverlapEnum {
    Greedy = 'greedy',
    Parity = 'parity',
}

/**
 * The orientation of the legend, which determines how the legend is positioned within the
 * scene. One of `"left"`, `"right"`, `"top"`, `"bottom"`, `"top-left"`, `"top-right"`,
 * `"bottom-left"`, `"bottom-right"`, `"none"`.
 *
 * __Default value:__ `"right"`
 */
export enum LegendOrient {
    Bottom = 'bottom',
    BottomLeft = 'bottom-left',
    BottomRight = 'bottom-right',
    Left = 'left',
    None = 'none',
    Right = 'right',
    Top = 'top',
    TopLeft = 'top-left',
    TopRight = 'top-right',
}

export interface TimeIntervalStep {
    interval: TimeInterval;
    step: number;
}

export enum TimeInterval {
    Day = 'day',
    Hour = 'hour',
    Millisecond = 'millisecond',
    Minute = 'minute',
    Month = 'month',
    Second = 'second',
    Week = 'week',
    Year = 'year',
}

export enum TitleAnchor {
    End = 'end',
    Middle = 'middle',
    Start = 'start',
}

/**
 * The orientation of the header label. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
 *
 * Shortcut for setting both labelOrient and titleOrient.
 *
 * The orientation of the header title. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
 *
 * Orientation of the legend title.
 *
 * The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The
 * orientation can be used to further specialize the axis type (e.g., a y-axis oriented
 * towards the right edge of the chart).
 *
 * __Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.
 */
export enum Orient {
    Bottom = 'bottom',
    Left = 'left',
    Right = 'right',
    Top = 'top',
}

/**
 * The type of the legend. Use `"symbol"` to create a discrete legend and `"gradient"` for a
 * continuous color gradient.
 *
 * __Default value:__ `"gradient"` for non-binned quantitative fields and temporal fields;
 * `"symbol"` otherwise.
 */
export enum LegendType {
    Gradient = 'gradient',
    Symbol = 'symbol',
}

export interface Scale {
    /**
     * The alignment of the steps within the scale range.
     *
     * This value must lie in the range `[0,1]`. A value of `0.5` indicates that the steps
     * should be centered within the range. A value of `0` or `1` may be used to shift the bands
     * to one side, say to position them adjacent to an axis.
     *
     * __Default value:__ `0.5`
     */
    align?: number;
    /**
     * The logarithm base of the `log` scale (default `10`).
     */
    base?: number;
    /**
     * Bin boundaries can be provided to scales as either an explicit array of bin boundaries or
     * as a bin specification object. The legal values are:
     * - An [array](../types/#Array) literal of bin boundary values. For example, `[0, 5, 10,
     * 15, 20]`. The array must include both starting and ending boundaries. The previous
     * example uses five values to indicate a total of four bin intervals: [0-5), [5-10),
     * [10-15), [15-20]. Array literals may include signal references as elements.
     * - A [bin specification object](https://vega.github.io/vega-lite/docs/scale.html#bins)
     * that indicates the bin _step_ size, and optionally the _start_ and _stop_ boundaries.
     * - An array of bin boundaries over the scale domain. If provided, axes and legends will
     * use the bin boundaries to inform the choice of tick marks and text labels.
     */
    bins?: number[] | ScaleBinParams;
    /**
     * If `true`, values that exceed the data domain are clamped to either the minimum or
     * maximum range value
     *
     * __Default value:__ derived from the [scale
     * config](https://vega.github.io/vega-lite/docs/config.html#scale-config)'s `clamp` (`true`
     * by default).
     */
    clamp?: boolean;
    /**
     * A constant determining the slope of the symlog function around zero. Only used for
     * `symlog` scales.
     *
     * __Default value:__ `1`
     */
    constant?: number;
    /**
     * Customized domain values in the form of constant values or dynamic values driven by a
     * selection.
     *
     * 1) Constant `domain` for _quantitative_ fields can take one of the following forms:
     *
     * - A two-element array with minimum and maximum values. To create a diverging scale, this
     * two-element array can be combined with the `domainMid` property.
     * - An array with more than two entries, for [Piecewise quantitative
     * scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise).
     * - A string value `"unaggregated"`, if the input field is aggregated, to indicate that the
     * domain should include the raw data values prior to the aggregation.
     *
     * 2) Constant `domain` for _temporal_ fields can be a two-element array with minimum and
     * maximum values, in the form of either timestamps or the [DateTime definition
     * objects](https://vega.github.io/vega-lite/docs/types.html#datetime).
     *
     * 3) Constant `domain` for _ordinal_ and _nominal_ fields can be an array that lists valid
     * input values.
     *
     * 4) To combine (union) specified constant domain with the field's values, `domain` can be
     * an object with a `unionWith` property that specify constant domain to be combined. For
     * example, `domain: {unionWith: [0, 100]}` for a quantitative scale means that the scale
     * domain always includes `[0, 100]`, but will include other values in the fields beyond
     * `[0, 100]`.
     *
     * 5) Domain can also takes an object defining a field or encoding of a selection that
     * [interactively
     * determines](https://vega.github.io/vega-lite/docs/selection.html#scale-domains) the scale
     * domain.
     */
    domain?: Array<boolean | DateTime | number | null | string> | DomainUnionWith | Domain;
    /**
     * Sets the maximum value in the scale domain, overriding the `domain` property. This
     * property is only intended for use with scales having continuous domains.
     */
    domainMax?: DateTime | number;
    /**
     * Inserts a single mid-point value into a two-element domain. The mid-point value must lie
     * between the domain minimum and maximum values. This property can be useful for setting a
     * midpoint for [diverging color
     * scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise). The domainMid
     * property is only intended for use with scales supporting continuous, piecewise domains.
     */
    domainMid?: number;
    /**
     * Sets the minimum value in the scale domain, overriding the domain property. This property
     * is only intended for use with scales having continuous domains.
     */
    domainMin?: DateTime | number;
    /**
     * The exponent of the `pow` scale.
     */
    exponent?: number;
    /**
     * The interpolation method for range values. By default, a general interpolator for
     * numbers, dates, strings and colors (in HCL space) is used. For color ranges, this
     * property allows interpolation in alternative color spaces. Legal values include `rgb`,
     * `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`, `cubehelix` and `cubehelix-long` ('-long'
     * variants use longer paths in polar coordinate spaces). If object-valued, this property
     * accepts an object with a string-valued _type_ property and an optional numeric _gamma_
     * property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate
     * documentation](https://github.com/d3/d3-interpolate).
     *
     * * __Default value:__ `hcl`
     */
    interpolate?: ScaleInterpolateParams | ScaleInterpolateEnum;
    /**
     * Extending the domain so that it starts and ends on nice round values. This method
     * typically modifies the scale’s domain, and may only extend the bounds to the nearest
     * round value. Nicing is useful if the domain is computed from data and may be irregular.
     * For example, for a domain of _[0.201479…, 0.996679…]_, a nice domain might be _[0.2,
     * 1.0]_.
     *
     * For quantitative scales such as linear, `nice` can be either a boolean flag or a number.
     * If `nice` is a number, it will represent a desired tick count. This allows greater
     * control over the step size used to extend the bounds, guaranteeing that the returned
     * ticks will exactly cover the domain.
     *
     * For temporal fields with time and utc scales, the `nice` value can be a string indicating
     * the desired time interval. Legal values are `"millisecond"`, `"second"`, `"minute"`,
     * `"hour"`, `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively, `time` and `utc`
     * scales can accept an object-valued interval specifier of the form `{"interval": "month",
     * "step": 3}`, which includes a desired number of interval steps. Here, the domain would
     * snap to quarter (Jan, Apr, Jul, Oct) boundaries.
     *
     * __Default value:__ `true` for unbinned _quantitative_ fields; `false` otherwise.
     */
    nice?: boolean | TimeIntervalStep | number | TimeInterval;
    /**
     * For _[continuous](https://vega.github.io/vega-lite/docs/scale.html#continuous)_ scales,
     * expands the scale domain to accommodate the specified number of pixels on each of the
     * scale range. The scale range must represent pixels for this parameter to function as
     * intended. Padding adjustment is performed prior to all other adjustments, including the
     * effects of the `zero`, `nice`, `domainMin`, and `domainMax` properties.
     *
     * For _[band](https://vega.github.io/vega-lite/docs/scale.html#band)_ scales, shortcut for
     * setting `paddingInner` and `paddingOuter` to the same value.
     *
     * For _[point](https://vega.github.io/vega-lite/docs/scale.html#point)_ scales, alias for
     * `paddingOuter`.
     *
     * __Default value:__ For _continuous_ scales, derived from the [scale
     * config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `continuousPadding`.
     * For _band and point_ scales, see `paddingInner` and `paddingOuter`. By default, Vega-Lite
     * sets padding such that _width/height = number of unique values * step_.
     */
    padding?: number;
    /**
     * The inner padding (spacing) within each band step of band scales, as a fraction of the
     * step size. This value must lie in the range [0,1].
     *
     * For point scale, this property is invalid as point scales do not have internal band
     * widths (only step sizes between bands).
     *
     * __Default value:__ derived from the [scale
     * config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingInner`.
     */
    paddingInner?: number;
    /**
     * The outer padding (spacing) at the ends of the range of band and point scales,
     * as a fraction of the step size. This value must lie in the range [0,1].
     *
     * __Default value:__ derived from the [scale
     * config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingOuter` for
     * band scales and `pointPadding` for point scales.
     * By default, Vega-Lite sets outer padding such that _width/height = number of unique
     * values * step_.
     */
    paddingOuter?: number;
    /**
     * The range of the scale. One of:
     *
     * - A string indicating a [pre-defined named scale
     * range](https://vega.github.io/vega-lite/docs/scale.html#range-config) (e.g., example,
     * `"symbol"`, or `"diverging"`).
     *
     * - For [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous),
     * two-element array indicating  minimum and maximum values, or an array with more than two
     * entries for specifying a [piecewise
     * scale](https://vega.github.io/vega-lite/docs/scale.html#piecewise).
     *
     * - For [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) and
     * [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales, an
     * array of desired output values or an object with a `field` property representing the
     * range values.  For example, if a field `color` contains CSS color names, we can set
     * `range` to `{field: "color"}`.
     *
     * __Notes:__
     *
     * 1) For color scales you can also specify a color
     * [`scheme`](https://vega.github.io/vega-lite/docs/scale.html#scheme) instead of `range`.
     *
     * 2) Any directly specified `range` for `x` and `y` channels will be ignored. Range can be
     * customized via the view's corresponding
     * [size](https://vega.github.io/vega-lite/docs/size.html) (`width` and `height`).
     */
    range?: Array<number[] | number | string> | RangeClass | RangeEnum;
    /**
     * Sets the maximum value in the scale range, overriding the `range` property or the default
     * range. This property is only intended for use with scales having continuous ranges.
     */
    rangeMax?: number | string;
    /**
     * Sets the minimum value in the scale range, overriding the `range` property or the default
     * range. This property is only intended for use with scales having continuous ranges.
     */
    rangeMin?: number | string;
    /**
     * If true, reverses the order of the scale range.
     * __Default value:__ `false`.
     */
    reverse?: boolean;
    /**
     * If `true`, rounds numeric output values to integers. This can be helpful for snapping to
     * the pixel grid.
     *
     * __Default value:__ `false`.
     */
    round?: boolean;
    /**
     * A string indicating a color
     * [scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme) name (e.g.,
     * `"category10"` or `"blues"`) or a [scheme parameter
     * object](https://vega.github.io/vega-lite/docs/scale.html#scheme-params).
     *
     * Discrete color schemes may be used with
     * [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) or
     * [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales.
     * Continuous color schemes are intended for use with color scales.
     *
     * For the full list of supported schemes, please refer to the [Vega
     * Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.
     */
    scheme?: SchemeParams | string;
    /**
     * The type of scale. Vega-Lite supports the following categories of scale types:
     *
     * 1) [**Continuous Scales**](https://vega.github.io/vega-lite/docs/scale.html#continuous)
     * -- mapping continuous domains to continuous output ranges
     * ([`"linear"`](https://vega.github.io/vega-lite/docs/scale.html#linear),
     * [`"pow"`](https://vega.github.io/vega-lite/docs/scale.html#pow),
     * [`"sqrt"`](https://vega.github.io/vega-lite/docs/scale.html#sqrt),
     * [`"symlog"`](https://vega.github.io/vega-lite/docs/scale.html#symlog),
     * [`"log"`](https://vega.github.io/vega-lite/docs/scale.html#log),
     * [`"time"`](https://vega.github.io/vega-lite/docs/scale.html#time),
     * [`"utc"`](https://vega.github.io/vega-lite/docs/scale.html#utc).
     *
     * 2) [**Discrete Scales**](https://vega.github.io/vega-lite/docs/scale.html#discrete) --
     * mapping discrete domains to discrete
     * ([`"ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#ordinal)) or continuous
     * ([`"band"`](https://vega.github.io/vega-lite/docs/scale.html#band) and
     * [`"point"`](https://vega.github.io/vega-lite/docs/scale.html#point)) output ranges.
     *
     * 3) [**Discretizing
     * Scales**](https://vega.github.io/vega-lite/docs/scale.html#discretizing) -- mapping
     * continuous domains to discrete output ranges
     * [`"bin-ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal),
     * [`"quantile"`](https://vega.github.io/vega-lite/docs/scale.html#quantile),
     * [`"quantize"`](https://vega.github.io/vega-lite/docs/scale.html#quantize) and
     * [`"threshold"`](https://vega.github.io/vega-lite/docs/scale.html#threshold).
     *
     * __Default value:__ please see the [scale type
     * table](https://vega.github.io/vega-lite/docs/scale.html#type).
     */
    type?: ScaleType;
    /**
     * If `true`, ensures that a zero baseline value is included in the scale domain.
     *
     * __Default value:__ `true` for x and y channels if the quantitative field is not binned
     * and no custom `domain` is provided; `false` otherwise.
     *
     * __Note:__ Log, time, and utc scales do not support `zero`.
     */
    zero?: boolean;
}

export interface ScaleBinParams {
    /**
     * The starting (lowest-valued) bin boundary.
     *
     * __Default value:__ The lowest value of the scale domain will be used.
     */
    start?: number;
    /**
     * The step size defining the bin interval width.
     */
    step: number;
    /**
     * The stopping (highest-valued) bin boundary.
     *
     * __Default value:__ The highest value of the scale domain will be used.
     */
    stop?: number;
}

export interface DomainUnionWith {
    /**
     * The field name to extract selected values for, when a selection is
     * [projected](https://vega.github.io/vega-lite/docs/project.html)
     * over multiple fields or encodings.
     */
    field?: string;
    /**
     * The name of a selection.
     */
    selection?: string;
    /**
     * The encoding channel to extract selected values for, when a selection is
     * [projected](https://vega.github.io/vega-lite/docs/project.html)
     * over multiple fields or encodings.
     */
    encoding?: SingleDefUnitChannel;
    /**
     * Customized domain values to be union with the field's values.
     *
     * 1) `domain` for _quantitative_ fields can take one of the following forms:
     *
     * - a two-element array with minimum and maximum values.
     * - an array with more than two entries, for [Piecewise  quantitative
     * scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise). (Alternatively, the
     * `domainMid` property can be set for a diverging scale.)
     * - a string value `"unaggregated"`, if the input field is aggregated, to indicate that the
     * domain should include the raw data values prior to the aggregation.
     *
     * 2) `domain` for _temporal_ fields can be a two-element array minimum and maximum values,
     * in the form of either timestamps or the [DateTime definition
     * objects](https://vega.github.io/vega-lite/docs/types.html#datetime).
     *
     * 3) `domain` for _ordinal_ and _nominal_ fields can be an array that lists valid input
     * values.
     */
    unionWith?: Array<boolean | DateTime | number | string>;
}

export enum Domain {
    Unaggregated = 'unaggregated',
}

export interface ScaleInterpolateParams {
    gamma?: number;
    type: ScaleInterpolateParamsType;
}

export enum ScaleInterpolateParamsType {
    Cubehelix = 'cubehelix',
    CubehelixLong = 'cubehelix-long',
    RGB = 'rgb',
}

export enum ScaleInterpolateEnum {
    Cubehelix = 'cubehelix',
    CubehelixLong = 'cubehelix-long',
    HCL = 'hcl',
    HCLLong = 'hcl-long',
    Hsl = 'hsl',
    HslLong = 'hsl-long',
    Lab = 'lab',
    RGB = 'rgb',
}

export interface RangeClass {
    field: string;
}

export enum RangeEnum {
    Category = 'category',
    Diverging = 'diverging',
    Heatmap = 'heatmap',
    Height = 'height',
    Ordinal = 'ordinal',
    Ramp = 'ramp',
    Symbol = 'symbol',
    Width = 'width',
}

export interface SchemeParams {
    /**
     * The number of colors to use in the scheme. This can be useful for scale types such as
     * `"quantize"`, which use the length of the scale range to determine the number of discrete
     * bins for the scale domain.
     */
    count?: number;
    /**
     * The extent of the color range to use. For example `[0.2, 1]` will rescale the color
     * scheme such that color values in the range _[0, 0.2)_ are excluded from the scheme.
     */
    extent?: number[];
    /**
     * A color scheme name for ordinal scales (e.g., `"category10"` or `"blues"`).
     *
     * For the full list of supported schemes, please refer to the [Vega
     * Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.
     */
    name: string;
}

/**
 * The type of scale. Vega-Lite supports the following categories of scale types:
 *
 * 1) [**Continuous Scales**](https://vega.github.io/vega-lite/docs/scale.html#continuous)
 * -- mapping continuous domains to continuous output ranges
 * ([`"linear"`](https://vega.github.io/vega-lite/docs/scale.html#linear),
 * [`"pow"`](https://vega.github.io/vega-lite/docs/scale.html#pow),
 * [`"sqrt"`](https://vega.github.io/vega-lite/docs/scale.html#sqrt),
 * [`"symlog"`](https://vega.github.io/vega-lite/docs/scale.html#symlog),
 * [`"log"`](https://vega.github.io/vega-lite/docs/scale.html#log),
 * [`"time"`](https://vega.github.io/vega-lite/docs/scale.html#time),
 * [`"utc"`](https://vega.github.io/vega-lite/docs/scale.html#utc).
 *
 * 2) [**Discrete Scales**](https://vega.github.io/vega-lite/docs/scale.html#discrete) --
 * mapping discrete domains to discrete
 * ([`"ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#ordinal)) or continuous
 * ([`"band"`](https://vega.github.io/vega-lite/docs/scale.html#band) and
 * [`"point"`](https://vega.github.io/vega-lite/docs/scale.html#point)) output ranges.
 *
 * 3) [**Discretizing
 * Scales**](https://vega.github.io/vega-lite/docs/scale.html#discretizing) -- mapping
 * continuous domains to discrete output ranges
 * [`"bin-ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal),
 * [`"quantile"`](https://vega.github.io/vega-lite/docs/scale.html#quantile),
 * [`"quantize"`](https://vega.github.io/vega-lite/docs/scale.html#quantize) and
 * [`"threshold"`](https://vega.github.io/vega-lite/docs/scale.html#threshold).
 *
 * __Default value:__ please see the [scale type
 * table](https://vega.github.io/vega-lite/docs/scale.html#type).
 */
export enum ScaleType {
    Band = 'band',
    BinOrdinal = 'bin-ordinal',
    Identity = 'identity',
    Linear = 'linear',
    Log = 'log',
    Ordinal = 'ordinal',
    Point = 'point',
    Pow = 'pow',
    Quantile = 'quantile',
    Quantize = 'quantize',
    Sequential = 'sequential',
    Sqrt = 'sqrt',
    Symlog = 'symlog',
    Threshold = 'threshold',
    Time = 'time',
    UTC = 'utc',
}

/**
 * A sort definition for sorting a discrete scale in an encoding field definition.
 */
export interface EncodingSortField {
    /**
     * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.
     *
     * __Default value:__ If unspecified, defaults to the field specified in the outer data
     * reference.
     */
    field?: RepeatRef | string;
    /**
     * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to
     * perform on the field prior to sorting (e.g., `"count"`, `"mean"` and `"median"`).
     * An aggregation is required when there are multiple values of the sort field for each
     * encoded data field.
     * The input data objects will be aggregated, grouped by the encoded data field.
     *
     * For a full list of operations, please see the documentation for
     * [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).
     *
     * __Default value:__ `"sum"` for stacked plots. Otherwise, `"min"`.
     */
    op?: NonArgAggregateOp;
    /**
     * The sort order. One of `"ascending"` (default), `"descending"`, or `null` (no not sort).
     */
    order?: SortOrder | null;
    /**
     * The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to
     * sort by (e.g., `"x"`, `"y"`)
     */
    encoding?: SortByChannel;
}

/**
 * The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to
 * sort by (e.g., `"x"`, `"y"`)
 */
export enum SortByChannel {
    Color = 'color',
    Fill = 'fill',
    FillOpacity = 'fillOpacity',
    Opacity = 'opacity',
    Shape = 'shape',
    Size = 'size',
    Stroke = 'stroke',
    StrokeOpacity = 'strokeOpacity',
    StrokeWidth = 'strokeWidth',
    Text = 'text',
    X = 'x',
    Y = 'y',
}

/**
 * The sort order. One of `"ascending"` (default) or `"descending"`.
 */
export enum SortOrder {
    Ascending = 'ascending',
    Descending = 'descending',
}

/**
 * The sort order. One of `"ascending"` (default) or `"descending"`.
 *
 * The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to
 * sort by (e.g., `"x"`, `"y"`)
 */
export enum Sort {
    Ascending = 'ascending',
    Color = 'color',
    Descending = 'descending',
    Fill = 'fill',
    FillOpacity = 'fillOpacity',
    Opacity = 'opacity',
    Shape = 'shape',
    Size = 'size',
    SortColor = '-color',
    SortFill = '-fill',
    SortFillOpacity = '-fillOpacity',
    SortOpacity = '-opacity',
    SortShape = '-shape',
    SortSize = '-size',
    SortStroke = '-stroke',
    SortStrokeOpacity = '-strokeOpacity',
    SortStrokeWidth = '-strokeWidth',
    SortText = '-text',
    SortX = '-x',
    SortY = '-y',
    Stroke = 'stroke',
    StrokeOpacity = 'strokeOpacity',
    StrokeWidth = 'strokeWidth',
    Text = 'text',
    X = 'x',
    Y = 'y',
}

/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
 * the encoded field or constant value (`datum`).
 * It can also be a `"geojson"` type for encoding
 * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 *
 * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
 * discussed below. However, type is required for a field if:
 * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
 * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
 * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 *
 * __Default value:__
 *
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
 * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
 * following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
 * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
 * `longitude` channel or (3) if the specified scale type is [a quantitative
 * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
 * the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
 * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
 * (2) the specified scale type is an ordinal/point/band scale.
 *
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time
 * object](https://vega.github.io/vega-lite/docs/datetime.html)
 *
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types
 * (number, string, etc.). The same primitive data type can have different types of
 * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
 * data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
 * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
 * `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
 * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
 * (for using an ordinal bin
 * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
 * `type` property can be either `"temporal"` (default, for using a temporal scale) or
 * [`"ordinal"` (for using an ordinal
 * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
 * the `type` property refers to the post-aggregation data type. For example, we can
 * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
 * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
 * must have exactly the same type as their primary channels (e.g., `x`, `y`).
 *
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 *
 * Data type based on level of measurement
 */
export enum Type {
    Geojson = 'geojson',
    Nominal = 'nominal',
    Ordinal = 'ordinal',
    Quantitative = 'quantitative',
    Temporal = 'temporal',
}

/**
 * Color of the marks – either fill or stroke color based on  the `filled` property of mark
 * definition.
 * By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,
 * `"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and
 * `"point"`.
 *
 * __Default value:__ If undefined, the default color depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
 * property.
 *
 * _Note:_
 * 1) For fine-grained control over both fill and stroke colors of the marks, please use the
 * `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence
 * than `color`, thus may override the `color` encoding if conflicting encodings are
 * specified.
 * 2) See the scale documentation for more information about customizing [color
 * scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).
 *
 * Fill color of the marks.
 * __Default value:__ If undefined, the default color depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
 * property.
 *
 * _Note:_ The `fill` encoding has higher precedence than `color`, thus may override the
 * `color` encoding if conflicting encodings are specified.
 *
 * Stroke color of the marks.
 * __Default value:__ If undefined, the default color depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
 * property.
 *
 * _Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the
 * `color` encoding if conflicting encodings are specified.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface ColorClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefGradientStringNull[] | ConditionalPredicateValueDefGradientStringNullClass;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: ValueLinearGradient | null | string;
}

export interface ConditionalValueDefGradientStringNull {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: ValueLinearGradient | null | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
}

export interface ValueLinearGradient {
    /**
     * The type of gradient. Use `"linear"` for a linear gradient.
     *
     * The type of gradient. Use `"radial"` for a radial gradient.
     */
    gradient: Gradient;
    id?: string;
    /**
     * An array of gradient stops defining the gradient color sequence.
     */
    stops: GradientStop[];
    /**
     * The starting x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `0`
     *
     * The x-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    x1?: number;
    /**
     * The ending x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `1`
     *
     * The x-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    x2?: number;
    /**
     * The starting y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `0`
     *
     * The y-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    y1?: number;
    /**
     * The ending y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `0`
     *
     * The y-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    y2?: number;
    /**
     * The radius length, in normalized [0, 1] coordinates, of the inner circle for the
     * gradient.
     *
     * __Default value:__ `0`
     */
    r1?: number;
    /**
     * The radius length, in normalized [0, 1] coordinates, of the outer circle for the
     * gradient.
     *
     * __Default value:__ `0.5`
     */
    r2?: number;
}

/**
 * The type of gradient. Use `"linear"` for a linear gradient.
 *
 * The type of gradient. Use `"radial"` for a radial gradient.
 */
export enum Gradient {
    Linear = 'linear',
    Radial = 'radial',
}

export interface GradientStop {
    /**
     * The color value at this point in the gradient.
     */
    color: string;
    /**
     * The offset fraction for the color stop, indicating its position within the gradient.
     */
    offset: number;
}

export interface ConditionalPredicateValueDefGradientStringNullClass {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: ValueLinearGradient | null | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
}

/**
 * A field definition for the horizontal facet of trellis plots.
 *
 * A field definition for the vertical facet of trellis plots.
 */
export interface RowColumnEncodingFieldDef {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * The alignment to apply to row/column facet's subplot.
     * The supported string values are `"all"`, `"each"`, and `"none"`.
     *
     * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed
     * one after the other.
     * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or
     * column may be of variable size.
     * - For `"all"`, subviews will be aligned and each row or column will be sized identically
     * based on the maximum observed size. String values for this property will be applied to
     * both grid rows and columns.
     *
     * __Default value:__ `"all"`.
     */
    align?: LayoutAlign;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * Boolean flag indicating if facet's subviews should be centered relative to their
     * respective rows or columns.
     *
     * __Default value:__ `false`
     */
    center?: boolean;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of a facet's header.
     */
    header?: Header;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` is not supported for `row` and `column`.
     */
    sort?: Array<boolean | DateTime | number | string> | SortEncodingSortField | SortOrder | null;
    /**
     * The spacing in pixels between facet's sub-views.
     *
     * __Default value__: Depends on `"spacing"` property of [the view composition
     * configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by
     * default)
     */
    spacing?: number;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
}

/**
 * An object defining properties of a facet's header.
 *
 * Headers of row / column channels for faceted plots.
 */
export interface Header {
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * Horizontal text alignment of header labels. One of `"left"`, `"center"`, or `"right"`.
     */
    labelAlign?: Align;
    /**
     * The anchor position for placing the labels. One of `"start"`, `"middle"`, or `"end"`. For
     * example, with a label orientation of top these anchor positions map to a left-, center-,
     * or right-aligned label.
     */
    labelAnchor?: TitleAnchor | null;
    /**
     * The rotation angle of the header labels.
     *
     * __Default value:__ `0` for column header, `-90` for row header.
     */
    labelAngle?: number;
    /**
     * The vertical text baseline for the header labels. One of `"alphabetic"` (default),
     * `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`.
     * The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`,
     * but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
     */
    labelBaseline?: Baseline;
    /**
     * The color of the header label, can be in hex color code or regular color name.
     */
    labelColor?: string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the header's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * The font of the header label.
     */
    labelFont?: string;
    /**
     * The font size of the header label, in pixels.
     */
    labelFontSize?: number;
    /**
     * The font style of the header label.
     */
    labelFontStyle?: string;
    /**
     * The font weight of the header label.
     */
    labelFontWeight?: number | FontWeightEnum;
    /**
     * The maximum length of the header label in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0`, indicating no limit
     */
    labelLimit?: number;
    /**
     * Line height in pixels for multi-line header labels or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    labelLineHeight?: number;
    /**
     * The orientation of the header label. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
     */
    labelOrient?: Orient;
    /**
     * The padding, in pixel, between facet header's label and the plot.
     *
     * __Default value:__ `10`
     */
    labelPadding?: number;
    /**
     * A boolean flag indicating if labels should be included as part of the header.
     *
     * __Default value:__ `true`.
     */
    labels?: boolean;
    /**
     * Shortcut for setting both labelOrient and titleOrient.
     */
    orient?: Orient;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * Horizontal text alignment (to the anchor) of header titles.
     */
    titleAlign?: Align;
    /**
     * The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For
     * example, with an orientation of top these anchor positions map to a left-, center-, or
     * right-aligned title.
     */
    titleAnchor?: TitleAnchor | null;
    /**
     * The rotation angle of the header title.
     *
     * __Default value:__ `0`.
     */
    titleAngle?: number;
    /**
     * The vertical text baseline for the header title. One of `"alphabetic"` (default),
     * `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`.
     * The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`,
     * but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
     *
     * __Default value:__ `"middle"`
     */
    titleBaseline?: Baseline;
    /**
     * Color of the header title, can be in hex color code or regular color name.
     */
    titleColor?: string;
    /**
     * Font of the header title. (e.g., `"Helvetica Neue"`).
     */
    titleFont?: string;
    /**
     * Font size of the header title.
     */
    titleFontSize?: number;
    /**
     * The font style of the header title.
     */
    titleFontStyle?: string;
    /**
     * Font weight of the header title.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    titleFontWeight?: number | FontWeightEnum;
    /**
     * The maximum length of the header title in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0`, indicating no limit
     */
    titleLimit?: number;
    /**
     * Line height in pixels for multi-line header title text or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    titleLineHeight?: number;
    /**
     * The orientation of the header title. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
     */
    titleOrient?: Orient;
    /**
     * The padding, in pixel, between facet header's title and the label.
     *
     * __Default value:__ `10`
     */
    titlePadding?: number;
}

/**
 * A sort definition for sorting a discrete scale in an encoding field definition.
 */
export interface SortEncodingSortField {
    /**
     * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.
     *
     * __Default value:__ If unspecified, defaults to the field specified in the outer data
     * reference.
     */
    field?: RepeatRef | string;
    /**
     * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to
     * perform on the field prior to sorting (e.g., `"count"`, `"mean"` and `"median"`).
     * An aggregation is required when there are multiple values of the sort field for each
     * encoded data field.
     * The input data objects will be aggregated, grouped by the encoded data field.
     *
     * For a full list of operations, please see the documentation for
     * [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).
     *
     * __Default value:__ `"sum"` for stacked plots. Otherwise, `"min"`.
     */
    op?: NonArgAggregateOp;
    /**
     * The sort order. One of `"ascending"` (default), `"descending"`, or `null` (no not sort).
     */
    order?: SortOrder | null;
}

/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
 * the encoded field or constant value (`datum`).
 * It can also be a `"geojson"` type for encoding
 * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 *
 * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
 * discussed below. However, type is required for a field if:
 * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
 * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
 * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 *
 * __Default value:__
 *
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
 * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
 * following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
 * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
 * `longitude` channel or (3) if the specified scale type is [a quantitative
 * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
 * the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
 * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
 * (2) the specified scale type is an ordinal/point/band scale.
 *
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time
 * object](https://vega.github.io/vega-lite/docs/datetime.html)
 *
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types
 * (number, string, etc.). The same primitive data type can have different types of
 * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
 * data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
 * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
 * `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
 * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
 * (for using an ordinal bin
 * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
 * `type` property can be either `"temporal"` (default, for using a temporal scale) or
 * [`"ordinal"` (for using an ordinal
 * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
 * the `type` property refers to the post-aggregation data type. For example, we can
 * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
 * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
 * must have exactly the same type as their primary channels (e.g., `x`, `y`).
 *
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 */
export enum StandardType {
    Nominal = 'nominal',
    Ordinal = 'ordinal',
    Quantitative = 'quantitative',
    Temporal = 'temporal',
}

/**
 * A text description of this mark for ARIA accessibility (SVG output only). For SVG output
 * the `"aria-label"` attribute will be set to this description.
 *
 * A URL to load upon mouse click.
 *
 * The URL of an image mark.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface DescriptionClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: PurpleConditionalValueDefString[] | PurpleConditional;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels
     * text.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: null | string;
}

export enum BinEnum {
    Binned = 'binned',
}

export interface PurpleConditionalValueDefString {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: null | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
}

export interface PurpleConditional {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: null | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
}

/**
 * Field Def without scale (and without bin: "binned" support).
 *
 * Definition object for a data field, its type and transformation of an encoding channel.
 *
 * A data field to use as a unique key for data binding. When a visualization’s data is
 * updated, the key value will be used to match data elements to existing mark instances.
 * Use a key channel to enable object constancy for transitions over dynamic data.
 */
export interface TypedFieldDef {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
}

/**
 * A field definition for the (flexible) facet of trellis plots.
 *
 * If either `row` or `column` is specified, this channel will be ignored.
 */
export interface FacetEncodingFieldDef {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * The alignment to apply to grid rows and columns.
     * The supported string values are `"all"`, `"each"`, and `"none"`.
     *
     * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed
     * one after the other.
     * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or
     * column may be of variable size.
     * - For `"all"`, subviews will be aligned and each row or column will be sized identically
     * based on the maximum observed size. String values for this property will be applied to
     * both grid rows and columns.
     *
     * Alternatively, an object value of the form `{"row": string, "column": string}` can be
     * used to supply different alignments for rows and columns.
     *
     * __Default value:__ `"all"`.
     */
    align?: RowColLayoutAlign | LayoutAlign;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * The bounds calculation method to use for determining the extent of a sub-plot. One of
     * `full` (the default) or `flush`.
     *
     * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will
     * be used.
     * - If set to `flush`, only the specified width and height values for the sub-view will be
     * used. The `flush` setting can be useful when attempting to place sub-plots without axes
     * or legends into a uniform grid structure.
     *
     * __Default value:__ `"full"`
     */
    bounds?: LayoutBounds;
    /**
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply
     * different centering values for rows and columns.
     *
     * __Default value:__ `false`
     */
    center?: boolean | RowColBoolean;
    /**
     * The number of columns to include in the view composition layout.
     *
     * __Default value__: `undefined` -- An infinite number of columns (a single row) will be
     * assumed. This is equivalent to
     * `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
     *
     * __Note__:
     *
     * 1) This property is only for:
     * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
     * - the `facet` and `repeat` operator with one field/repetition definition (without
     * row/column nesting)
     *
     * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using
     * the `row` channel (for `facet` and `repeat`).
     */
    columns?: number;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of a facet's header.
     */
    header?: Header;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` is not supported for `row` and `column`.
     */
    sort?: Array<boolean | DateTime | number | string> | SortEncodingSortField | SortOrder | null;
    /**
     * The spacing in pixels between sub-views of the composition operator.
     * An object of the form `{"row": number, "column": number}` can be used to set
     * different spacing values for rows and columns.
     *
     * __Default value__: Depends on `"spacing"` property of [the view composition
     * configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by
     * default)
     */
    spacing?: RowColNumber | number;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
}

export interface RowColNumber {
    column?: number;
    row?: number;
}

/**
 * Color of the marks – either fill or stroke color based on  the `filled` property of mark
 * definition.
 * By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,
 * `"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and
 * `"point"`.
 *
 * __Default value:__ If undefined, the default color depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
 * property.
 *
 * _Note:_
 * 1) For fine-grained control over both fill and stroke colors of the marks, please use the
 * `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence
 * than `color`, thus may override the `color` encoding if conflicting encodings are
 * specified.
 * 2) See the scale documentation for more information about customizing [color
 * scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).
 *
 * Fill color of the marks.
 * __Default value:__ If undefined, the default color depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
 * property.
 *
 * _Note:_ The `fill` encoding has higher precedence than `color`, thus may override the
 * `color` encoding if conflicting encodings are specified.
 *
 * Stroke color of the marks.
 * __Default value:__ If undefined, the default color depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
 * property.
 *
 * _Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the
 * `color` encoding if conflicting encodings are specified.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface FillClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefGradientStringNull[] | ConditionalPredicateValueDefGradientStringNullClass;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: ValueLinearGradient | null | string;
}

/**
 * Rotation angle of point and text marks.
 *
 * Fill opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity`
 * property.
 *
 * Opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity`
 * property.
 *
 * Size of the mark.
 * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
 * - For `"bar"` and `"tick"` – the bar and tick's size.
 * - For `"text"` – the text's font size.
 * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of
 * line with varying size)
 *
 * Stroke opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity`
 * property.
 *
 * Stroke width of the marks.
 *
 * __Default value:__ If undefined, the default stroke width depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth`
 * property.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface FillOpacityClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefNumber[] | PurpleConditionalValueDefNumber;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * A text description of this mark for ARIA accessibility (SVG output only). For SVG output
 * the `"aria-label"` attribute will be set to this description.
 *
 * A URL to load upon mouse click.
 *
 * The URL of an image mark.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface HrefClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: PurpleConditionalValueDefString[] | PurpleConditional;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels
     * text.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: null | string;
}

/**
 * Field Def without scale (and without bin: "binned" support).
 *
 * Definition object for a data field, its type and transformation of an encoding channel.
 *
 * A data field to use as a unique key for data binding. When a visualization’s data is
 * updated, the key value will be used to match data elements to existing mark instances.
 * Use a key channel to enable object constancy for transitions over dynamic data.
 */
export interface KeyClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
}

/**
 * Latitude position of geographically projected marks.
 *
 * Longitude position of geographically projected marks.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface LatitudeClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and
 * `"rule"`.
 *
 * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`,
 * and  `"rule"`.
 *
 * The inner radius in pixels of arc marks.
 *
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
 * values proceed clockwise.
 *
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"width"` for the width of the
 * plot.
 *
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"height"` for the height of the
 * plot.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface Latitude2Class {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

export enum ValueEnum {
    Height = 'height',
    Width = 'width',
}

/**
 * Latitude position of geographically projected marks.
 *
 * Longitude position of geographically projected marks.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface LongitudeClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and
 * `"rule"`.
 *
 * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`,
 * and  `"rule"`.
 *
 * The inner radius in pixels of arc marks.
 *
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
 * values proceed clockwise.
 *
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"width"` for the width of the
 * plot.
 *
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"height"` for the height of the
 * plot.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface Longitude2Class {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

/**
 * Rotation angle of point and text marks.
 *
 * Fill opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity`
 * property.
 *
 * Opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity`
 * property.
 *
 * Size of the mark.
 * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
 * - For `"bar"` and `"tick"` – the bar and tick's size.
 * - For `"text"` – the text's font size.
 * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of
 * line with varying size)
 *
 * Stroke opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity`
 * property.
 *
 * Stroke width of the marks.
 *
 * __Default value:__ If undefined, the default stroke width depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth`
 * property.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface OpacityClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefNumber[] | PurpleConditionalValueDefNumber;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

export interface OrderFieldDef {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * The sort order. One of `"ascending"` (default) or `"descending"`.
     */
    sort?: SortOrder;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
}

export interface OrderDef {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * The sort order. One of `"ascending"` (default) or `"descending"`.
     */
    sort?: SortOrder;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     */
    condition?: ConditionalValueDefNumber[] | FluffyConditionalValueDefNumber;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

export interface FluffyConditionalValueDefNumber {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: number;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
}

/**
 * The outer radius in pixels of arc marks.
 *
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
 * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
 * clockwise.)
 *
 * - For text marks, polar coordinate angle in radians.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface RadiusClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Type of stacking offset if the field should be stacked.
     * `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous
     * domains.
     * For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
     *
     * `stack` can be one of the following values:
     * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for
     * creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and
     * [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
     * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar
     * and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
     * -`"center"` - stacking with center baseline (for
     * [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
     * - `null` or `false` - No-stacking. This will produce layered
     * [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area
     * chart.
     *
     * __Default value:__ `zero` for plots with all of the following conditions are true:
     * (1) the mark is `bar`, `area`, or `arc`;
     * (2) the stacked measure channel (x or y) has a linear scale;
     * (3) At least one of non-position channels mapped to an unaggregated field that is
     * different from x and y. Otherwise, `null` by default.
     *
     * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
     */
    stack?: boolean | StackOffset | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

/**
 * Mode for stacking marks. One of `"zero"` (default), `"center"`, or `"normalize"`.
 * The `"zero"` offset will stack starting at `0`. The `"center"` offset will center the
 * stacks. The `"normalize"` offset will compute percentage values for each stack point,
 * with output values in the range `[0,1]`.
 *
 * __Default value:__ `"zero"`
 */
export enum StackOffset {
    Center = 'center',
    Normalize = 'normalize',
    Zero = 'zero',
}

/**
 * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and
 * `"rule"`.
 *
 * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`,
 * and  `"rule"`.
 *
 * The inner radius in pixels of arc marks.
 *
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
 * values proceed clockwise.
 *
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"width"` for the width of the
 * plot.
 *
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"height"` for the height of the
 * plot.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface Radius2Class {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

/**
 * Shape of the mark.
 *
 * 1. For `point` marks the supported values include:
 * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
 * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
 * - the line symbol `"stroke"`
 * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
 * - a custom [SVG path
 * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
 * sizing, custom shape paths should be defined within a square bounding box with
 * coordinates ranging from -1 to 1 along both the x and y dimensions.)
 *
 * 2. For `geoshape` marks it should be a field definition of the geojson data
 *
 * __Default value:__ If undefined, the default shape depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s `shape`
 * property. (`"circle"` if unset.)
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface MarkPropDefStringNullTypeForShape {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefStringNull[] | ConditionalPredicateValueDefStringNullClass;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: null | string;
}

export interface ConditionalValueDefStringNull {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: null | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
}

export interface ConditionalPredicateValueDefStringNullClass {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: null | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
}

/**
 * Rotation angle of point and text marks.
 *
 * Fill opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity`
 * property.
 *
 * Opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity`
 * property.
 *
 * Size of the mark.
 * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
 * - For `"bar"` and `"tick"` – the bar and tick's size.
 * - For `"text"` – the text's font size.
 * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of
 * line with varying size)
 *
 * Stroke opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity`
 * property.
 *
 * Stroke width of the marks.
 *
 * __Default value:__ If undefined, the default stroke width depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth`
 * property.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface SizeClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefNumber[] | PurpleConditionalValueDefNumber;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * Color of the marks – either fill or stroke color based on  the `filled` property of mark
 * definition.
 * By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,
 * `"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and
 * `"point"`.
 *
 * __Default value:__ If undefined, the default color depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
 * property.
 *
 * _Note:_
 * 1) For fine-grained control over both fill and stroke colors of the marks, please use the
 * `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence
 * than `color`, thus may override the `color` encoding if conflicting encodings are
 * specified.
 * 2) See the scale documentation for more information about customizing [color
 * scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).
 *
 * Fill color of the marks.
 * __Default value:__ If undefined, the default color depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
 * property.
 *
 * _Note:_ The `fill` encoding has higher precedence than `color`, thus may override the
 * `color` encoding if conflicting encodings are specified.
 *
 * Stroke color of the marks.
 * __Default value:__ If undefined, the default color depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
 * property.
 *
 * _Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the
 * `color` encoding if conflicting encodings are specified.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface StrokeClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefGradientStringNull[] | ConditionalPredicateValueDefGradientStringNullClass;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: ValueLinearGradient | null | string;
}

/**
 * Stroke dash of the marks.
 *
 * __Default value:__ `[1,0]` (No dash).
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface MarkPropDefNumber {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefNumberElement[] | ConditionalPredicateValueDefNumberClass;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number[];
}

export interface ConditionalValueDefNumberElement {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: number[];
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
}

export interface ConditionalPredicateValueDefNumberClass {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number[];
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
}

/**
 * Rotation angle of point and text marks.
 *
 * Fill opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity`
 * property.
 *
 * Opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity`
 * property.
 *
 * Size of the mark.
 * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
 * - For `"bar"` and `"tick"` – the bar and tick's size.
 * - For `"text"` – the text's font size.
 * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of
 * line with varying size)
 *
 * Stroke opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity`
 * property.
 *
 * Stroke width of the marks.
 *
 * __Default value:__ If undefined, the default stroke width depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth`
 * property.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface StrokeOpacityClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefNumber[] | PurpleConditionalValueDefNumber;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * Rotation angle of point and text marks.
 *
 * Fill opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity`
 * property.
 *
 * Opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity`
 * property.
 *
 * Size of the mark.
 * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
 * - For `"bar"` and `"tick"` – the bar and tick's size.
 * - For `"text"` – the text's font size.
 * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of
 * line with varying size)
 *
 * Stroke opacity of the marks.
 *
 * __Default value:__ If undefined, the default opacity depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity`
 * property.
 *
 * Stroke width of the marks.
 *
 * __Default value:__ If undefined, the default stroke width depends on [mark
 * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth`
 * property.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface StrokeWidthClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefNumber[] | PurpleConditionalValueDefNumber;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * Text of the `text` mark.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface TextDef {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: ConditionalValueDefText[] | ConditionalPredicateValueDefTextClass;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels
     * text.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: string[] | string;
}

export interface ConditionalValueDefText {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: string[] | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
}

export interface ConditionalPredicateValueDefTextClass {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: string[] | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels
     * text.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
}

/**
 * The outer radius in pixels of arc marks.
 *
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
 * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
 * clockwise.)
 *
 * - For text marks, polar coordinate angle in radians.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface ThetaClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Type of stacking offset if the field should be stacked.
     * `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous
     * domains.
     * For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
     *
     * `stack` can be one of the following values:
     * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for
     * creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and
     * [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
     * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar
     * and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
     * -`"center"` - stacking with center baseline (for
     * [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
     * - `null` or `false` - No-stacking. This will produce layered
     * [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area
     * chart.
     *
     * __Default value:__ `zero` for plots with all of the following conditions are true:
     * (1) the mark is `bar`, `area`, or `arc`;
     * (2) the stacked measure channel (x or y) has a linear scale;
     * (3) At least one of non-position channels mapped to an unaggregated field that is
     * different from x and y. Otherwise, `null` by default.
     *
     * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
     */
    stack?: boolean | StackOffset | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

/**
 * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and
 * `"rule"`.
 *
 * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`,
 * and  `"rule"`.
 *
 * The inner radius in pixels of arc marks.
 *
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
 * values proceed clockwise.
 *
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"width"` for the width of the
 * plot.
 *
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"height"` for the height of the
 * plot.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface Theta2Class {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

export interface StringFieldDef {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels
     * text.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
}

/**
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface FieldOrDatumDefWithConditionStringFieldDefString {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: FluffyConditionalValueDefString[] | FluffyConditional;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels
     * text.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: null | string;
}

export interface FluffyConditionalValueDefString {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: null | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
}

export interface FluffyConditional {
    /**
     * Predicate for triggering the condition
     */
    test?: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: null | string;
    /**
     * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of
     * [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).
     */
    selection?: Selection | string;
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of the legend.
     * If `null`, the legend for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [legend
     * properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
     *
     * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
     */
    legend?: Legend | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
}

/**
 * A text description of this mark for ARIA accessibility (SVG output only). For SVG output
 * the `"aria-label"` attribute will be set to this description.
 *
 * A URL to load upon mouse click.
 *
 * The URL of an image mark.
 *
 * A FieldDef with Condition<ValueDef>
 * {
 * condition: {value: ...},
 * field: ...,
 * ...
 * }
 */
export interface URLClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * One or more value definition(s) with [a selection or a test
     * predicate](https://vega.github.io/vega-lite/docs/condition.html).
     *
     * __Note:__ A field definition's `condition` property can only contain [conditional value
     * definitions](https://vega.github.io/vega-lite/docs/condition.html#value)
     * since Vega-Lite only allows at most one encoded field per encoding channel.
     *
     * A field definition or one or more value definition(s) with a selection predicate.
     */
    condition?: PurpleConditionalValueDefString[] | PurpleConditional;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels
     * text.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: null | string;
}

/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
 * `x2` or `width`.
 *
 * The `value` of this channel can be a number or a string `"width"` for the width of the
 * plot.
 *
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
 * `y2` or `height`.
 *
 * The `value` of this channel can be a number or a string `"height"` for the height of the
 * plot.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface XClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * An object defining properties of axis's gridlines, ticks and labels.
     * If `null`, the axis for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [axis
     * properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.
     *
     * __See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation.
     */
    axis?: Axis | null;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining the properties of the Impute Operation to be applied.
     * The field value of the other positional channel is taken as `key` of the `Impute`
     * Operation.
     * The field of the `color` channel if specified is used as `groupby` of the `Impute`
     * Operation.
     *
     * __See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation.
     */
    impute?: ImputeParams | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Type of stacking offset if the field should be stacked.
     * `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous
     * domains.
     * For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
     *
     * `stack` can be one of the following values:
     * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for
     * creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and
     * [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
     * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar
     * and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
     * -`"center"` - stacking with center baseline (for
     * [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
     * - `null` or `false` - No-stacking. This will produce layered
     * [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area
     * chart.
     *
     * __Default value:__ `zero` for plots with all of the following conditions are true:
     * (1) the mark is `bar`, `area`, or `arc`;
     * (2) the stacked measure channel (x or y) has a linear scale;
     * (3) At least one of non-position channels mapped to an unaggregated field that is
     * different from x and y. Otherwise, `null` by default.
     *
     * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
     */
    stack?: boolean | StackOffset | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

export interface Axis {
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG group, removing the
     * axis from the ARIA accessibility tree.
     *
     * __Default value:__ `true`
     */
    aria?: boolean;
    /**
     * An interpolation fraction indicating where, for `band` scales, axis ticks should be
     * positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5`
     * places ticks in the middle of their bands.
     *
     * __Default value:__ `0.5`
     */
    bandPosition?: number;
    /**
     * A text description of this axis for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If the `aria` property is true, for SVG output the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)
     * will be set to this description.
     * If the description is unspecified it will be automatically generated.
     */
    description?: string;
    /**
     * A boolean flag indicating if the domain (the axis baseline) should be included as part of
     * the axis.
     *
     * __Default value:__ `true`
     */
    domain?: boolean;
    /**
     * The stroke cap for the domain line's ending style. One of `"butt"`, `"round"` or
     * `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    domainCap?: StrokeCap;
    /**
     * Color of axis domain line.
     *
     * __Default value:__ `"gray"`.
     */
    domainColor?: null | string;
    /**
     * An array of alternating [stroke, space] lengths for dashed domain lines.
     */
    domainDash?: number[];
    /**
     * The pixel offset at which to start drawing with the domain dash array.
     */
    domainDashOffset?: number;
    /**
     * Opacity of the axis domain line.
     */
    domainOpacity?: number;
    /**
     * Stroke width of axis domain line
     *
     * __Default value:__ `1`
     */
    domainWidth?: number;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * A boolean flag indicating if grid lines should be included as part of the axis
     *
     * __Default value:__ `true` for [continuous
     * scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned;
     * otherwise, `false`.
     */
    grid?: boolean;
    /**
     * The stroke cap for grid lines' ending style. One of `"butt"`, `"round"` or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    gridCap?: StrokeCap;
    gridColor?: ConditionalAxisPropertyColorNull | null | string;
    gridDash?: number[] | ConditionalAxisPropertyNumberNull;
    gridDashOffset?: ConditionalAxisPropertyNumberNullClass | number;
    gridOpacity?: ConditionalAxisPropertyNumberNullClass | number;
    gridWidth?: ConditionalAxisPropertyNumberNullClass | number;
    labelAlign?: ConditionalAxisPropertyAlignNull | Align;
    /**
     * The rotation angle of the axis labels.
     *
     * __Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.
     */
    labelAngle?: number;
    labelBaseline?: ConditionalAxisPropertyTextBaselineNull | Baseline;
    /**
     * Indicates if labels should be hidden if they exceed the axis range. If `false` (the
     * default) no bounds overlap analysis is performed. If `true`, labels will be hidden if
     * they exceed the axis range by more than 1 pixel. If this property is a number, it
     * specifies the pixel tolerance: the maximum amount by which a label bounding box may
     * exceed the axis range.
     *
     * __Default value:__ `false`.
     */
    labelBound?: boolean | number;
    labelColor?: ConditionalAxisPropertyColorNull | null | string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Indicates if the first and last axis labels should be aligned flush with the scale range.
     * Flush alignment for a horizontal axis will left-align the first label and right-align the
     * last label. For vertical axes, bottom and top text baselines are applied instead. If this
     * property is a number, it also indicates the number of pixels by which to offset the first
     * and last labels; for example, a value of 2 will flush-align the first and last labels and
     * also push them 2 pixels outward from the center of the axis. The additional adjustment
     * can sometimes help the labels better visually group with corresponding axis ticks.
     *
     * __Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.
     */
    labelFlush?: boolean | number;
    /**
     * Indicates the number of pixels by which to offset flush-adjusted labels. For example, a
     * value of `2` will push flush-adjusted labels 2 pixels outward from the center of the
     * axis. Offsets can help the labels better visually group with corresponding axis ticks.
     *
     * __Default value:__ `0`.
     */
    labelFlushOffset?: number;
    labelFont?: ConditionalAxisPropertyStringNull | string;
    labelFontSize?: ConditionalAxisPropertyNumberNullClass | number;
    labelFontStyle?: ConditionalAxisPropertyFontStyleNull | string;
    labelFontWeight?: ConditionalAxisPropertyFontWeightNull | number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of axis tick labels.
     *
     * __Default value:__ `180`
     */
    labelLimit?: number;
    /**
     * Line height in pixels for multi-line label text or label text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    labelLineHeight?: number;
    labelOffset?: ConditionalAxisPropertyNumberNullClass | number;
    labelOpacity?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * The strategy to use for resolving overlap of axis labels. If `false` (the default), no
     * overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing
     * every other label is used (this works well for standard linear axes). If set to
     * `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps
     * with the last visible label (this often works better for log-scaled axes).
     *
     * __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log
     * scales; otherwise `false`.
     */
    labelOverlap?: boolean | LabelOverlapEnum;
    labelPadding?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * A boolean flag indicating if labels should be included as part of the axis.
     *
     * __Default value:__ `true`.
     */
    labels?: boolean;
    /**
     * The minimum separation that must be between label bounding boxes for them to be
     * considered non-overlapping (default `0`). This property is ignored if *labelOverlap*
     * resolution is not enabled.
     */
    labelSeparation?: number;
    /**
     * The maximum extent in pixels that axis ticks and labels should use. This determines a
     * maximum offset value for axis titles.
     *
     * __Default value:__ `undefined`.
     */
    maxExtent?: number;
    /**
     * The minimum extent in pixels that axis ticks and labels should use. This determines a
     * minimum offset value for axis titles.
     *
     * __Default value:__ `30` for y-axis; `undefined` for x-axis.
     */
    minExtent?: number;
    /**
     * The offset, in pixels, by which to displace the axis from the edge of the enclosing group
     * or data rectangle.
     *
     * __Default value:__ derived from the [axis
     * config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s `offset`
     * (`0` by default)
     */
    offset?: number;
    /**
     * The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The
     * orientation can be used to further specialize the axis type (e.g., a y-axis oriented
     * towards the right edge of the chart).
     *
     * __Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.
     */
    orient?: Orient;
    /**
     * The anchor position of the axis in pixels. For x-axes with top or bottom orientation,
     * this sets the axis group x coordinate. For y-axes with left or right orientation, this
     * sets the axis group y coordinate.
     *
     * __Default value__: `0`
     */
    position?: number;
    /**
     * A string or array of strings indicating the name of custom styles to apply to the axis. A
     * style is a named collection of axis property defined within the [style
     * configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is
     * an array, later styles will override earlier styles.
     *
     * __Default value:__ (none)
     * __Note:__ Any specified style will augment the default style. For example, an x-axis mark
     * with `"style": "foo"` will use `config.axisX` and `config.style.foo` (the specified style
     * `"foo"` has higher precedence).
     */
    style?: string[] | string;
    /**
     * For band scales, indicates if ticks and grid lines should be placed at the `"center"` of
     * a band (default) or at the band `"extent"`s to indicate intervals
     */
    tickBand?: TickBand;
    /**
     * The stroke cap for the tick lines' ending style. One of `"butt"`, `"round"` or
     * `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    tickCap?: StrokeCap;
    tickColor?: ConditionalAxisPropertyColorNull | null | string;
    /**
     * A desired number of ticks, for axes visualizing quantitative scales. The resulting number
     * may be different so that values are "nice" (multiples of 2, 5, 10) and lie within the
     * underlying scale's range.
     *
     * For scales of type `"time"` or `"utc"`, the tick count can instead be a time interval
     * specifier. Legal string values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`,
     * `"day"`, `"week"`, `"month"`, and "year". Alternatively, an object-valued interval
     * specifier of the form `{"interval": "month", "step": 3}` includes a desired number of
     * interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct)
     * boundary.
     *
     * __Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)`
     * for y.
     */
    tickCount?: TimeIntervalStep | number | TimeInterval;
    tickDash?: number[] | ConditionalAxisPropertyNumberNull;
    tickDashOffset?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * Boolean flag indicating if an extra axis tick should be added for the initial position of
     * the axis. This flag is useful for styling axes for `band` scales such that ticks are
     * placed on band boundaries rather in the middle of a band. Use in conjunction with
     * `"bandPosition": 1` and an axis `"padding"` value of `0`.
     */
    tickExtra?: boolean;
    /**
     * The minimum desired step between axis ticks, in terms of scale domain values. For
     * example, a value of `1` indicates that ticks should not be less than 1 unit apart. If
     * `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to
     * enforce the minimum step value.
     */
    tickMinStep?: number;
    /**
     * Position offset in pixels to apply to ticks, labels, and gridlines.
     */
    tickOffset?: number;
    tickOpacity?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * Boolean flag indicating if pixel position values should be rounded to the nearest
     * integer.
     *
     * __Default value:__ `true`
     */
    tickRound?: boolean;
    /**
     * Boolean value that determines whether the axis should include ticks.
     *
     * __Default value:__ `true`
     */
    ticks?: boolean;
    tickSize?: ConditionalAxisPropertyNumberNullClass | number;
    tickWidth?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * Horizontal text alignment of axis titles.
     */
    titleAlign?: Align;
    /**
     * Text anchor position for placing axis titles.
     */
    titleAnchor?: TitleAnchor | null;
    /**
     * Angle in degrees of axis titles.
     */
    titleAngle?: number;
    /**
     * Vertical text baseline for axis titles. One of `"alphabetic"` (default), `"top"`,
     * `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
     * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
     * relative to the *lineHeight* rather than *fontSize* alone.
     */
    titleBaseline?: Baseline;
    /**
     * Color of the title, can be in hex color code or regular color name.
     */
    titleColor?: null | string;
    /**
     * Font of the title. (e.g., `"Helvetica Neue"`).
     */
    titleFont?: string;
    /**
     * Font size of the title.
     */
    titleFontSize?: number;
    /**
     * Font style of the title.
     */
    titleFontStyle?: string;
    /**
     * Font weight of the title.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    titleFontWeight?: number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of axis titles.
     */
    titleLimit?: number;
    /**
     * Line height in pixels for multi-line title text or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    titleLineHeight?: number;
    /**
     * Opacity of the axis title.
     */
    titleOpacity?: number;
    /**
     * The padding, in pixels, between title and axis.
     */
    titlePadding?: number;
    /**
     * X-coordinate of the axis title relative to the axis group.
     */
    titleX?: number;
    /**
     * Y-coordinate of the axis title relative to the axis group.
     */
    titleY?: number;
    /**
     * Coordinate space translation offset for axis layout. By default, axes are translated by a
     * 0.5 pixel offset for both the x and y coordinates in order to align stroked lines with
     * the pixel grid. However, for vector graphics output these pixel-specific adjustments may
     * be undesirable, in which case translate can be changed (for example, to zero).
     *
     * __Default value:__ `0.5`
     */
    translate?: number;
    /**
     * Explicitly set the visible axis tick values.
     */
    values?: Array<boolean | DateTime | number | string>;
    /**
     * A non-negative integer indicating the z-index of the axis.
     * If zindex is 0, axes should be drawn behind all chart elements.
     * To put them in front, set `zindex` to `1` or more.
     *
     * __Default value:__ `0` (behind the marks).
     */
    zindex?: number;
}

/**
 * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
 *
 * __Default value:__ `"butt"`
 *
 * The stroke cap for the domain line's ending style. One of `"butt"`, `"round"` or
 * `"square"`.
 *
 * __Default value:__ `"butt"`
 *
 * The stroke cap for grid lines' ending style. One of `"butt"`, `"round"` or `"square"`.
 *
 * __Default value:__ `"butt"`
 *
 * The stroke cap for the tick lines' ending style. One of `"butt"`, `"round"` or
 * `"square"`.
 *
 * __Default value:__ `"butt"`
 */
export enum StrokeCap {
    Butt = 'butt',
    Round = 'round',
    Square = 'square',
}

export interface ConditionalAxisPropertyColorNull {
    condition: ConditionalPredicateValueDefColorNull[] | ConditionalPredicateValueDefColorNull;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: null | string;
}

export interface ConditionalPredicateValueDefColorNull {
    /**
     * Predicate for triggering the condition
     */
    test: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: null | string;
}

export interface ConditionalAxisPropertyNumberNull {
    condition: ConditionalPredicateValueDefNumberNull[] | ConditionalPredicateValueDefNumberNull;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: number[] | null;
}

export interface ConditionalPredicateValueDefNumberNull {
    /**
     * Predicate for triggering the condition
     */
    test: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: number[] | null;
}

export interface ConditionalAxisPropertyNumberNullClass {
    condition: ConditionalPredicateValueDefNumberNullElement[] | ConditionalPredicateValueDefNumberNullElement;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: number | null;
}

export interface ConditionalPredicateValueDefNumberNullElement {
    /**
     * Predicate for triggering the condition
     */
    test: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: number | null;
}

export interface ConditionalAxisPropertyAlignNull {
    condition: ConditionalPredicateValueDefAlignNull[] | ConditionalPredicateValueDefAlignNull;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: Align | null;
}

export interface ConditionalPredicateValueDefAlignNull {
    /**
     * Predicate for triggering the condition
     */
    test: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: Align | null;
}

export interface ConditionalAxisPropertyTextBaselineNull {
    condition: ConditionalPredicateValueDefTextBaselineNull[] | ConditionalPredicateValueDefTextBaselineNull;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: Baseline | null;
}

export interface ConditionalPredicateValueDefTextBaselineNull {
    /**
     * Predicate for triggering the condition
     */
    test: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: Baseline | null;
}

export interface ConditionalAxisPropertyStringNull {
    condition: ConditionalPredicateValueDefStringNull[] | ConditionalPredicateValueDefStringNull;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: null | string;
}

export interface ConditionalPredicateValueDefStringNull {
    /**
     * Predicate for triggering the condition
     */
    test: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: null | string;
}

export interface ConditionalAxisPropertyFontStyleNull {
    condition: ConditionalPredicateValueDefFontStyleNull[] | ConditionalPredicateValueDefFontStyleNull;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: null | string;
}

export interface ConditionalPredicateValueDefFontStyleNull {
    /**
     * Predicate for triggering the condition
     */
    test: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: null | string;
}

export interface ConditionalAxisPropertyFontWeightNull {
    condition: ConditionalPredicateValueDefFontWeightNull[] | ConditionalPredicateValueDefFontWeightNull;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: number | FontWeightEnum | null;
}

export interface ConditionalPredicateValueDefFontWeightNull {
    /**
     * Predicate for triggering the condition
     */
    test: Predicate | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value: number | FontWeightEnum | null;
}

/**
 * For band scales, indicates if ticks and grid lines should be placed at the `"center"` of
 * a band (default) or at the band `"extent"`s to indicate intervals
 */
export enum TickBand {
    Center = 'center',
    Extent = 'extent',
}

export interface ImputeParams {
    /**
     * A frame specification as a two-element array used to control the window over which the
     * specified method is applied. The array entries should either be a number indicating the
     * offset from the current data object, or null to indicate unbounded rows preceding or
     * following the current data object. For example, the value `[-5, 5]` indicates that the
     * window should include five objects preceding and five objects following the current
     * object.
     *
     * __Default value:__:  `[null, null]` indicating that the window includes all objects.
     */
    frame?: Array<number | null>;
    /**
     * Defines the key values that should be considered for imputation.
     * An array of key values or an object defining a [number
     * sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).
     *
     * If provided, this will be used in addition to the key values observed within the input
     * data. If not provided, the values will be derived from all unique values of the `key`
     * field. For `impute` in `encoding`, the key field is the x-field if the y-field is
     * imputed, or vice versa.
     *
     * If there is no impute grouping, this property _must_ be specified.
     */
    keyvals?: any[] | ImputeSequence;
    /**
     * The imputation method to use for the field value of imputed data objects.
     * One of `"value"`, `"mean"`, `"median"`, `"max"` or `"min"`.
     *
     * __Default value:__  `"value"`
     */
    method?: ImputeParamsMethod;
    /**
     * The field value to use when the imputation `method` is `"value"`.
     */
    value?: any;
}

export interface ImputeSequence {
    /**
     * The starting value of the sequence.
     * __Default value:__ `0`
     */
    start?: number;
    /**
     * The step value between sequence entries.
     * __Default value:__ `1` or `-1` if `stop < start`
     */
    step?: number;
    /**
     * The ending value(exclusive) of the sequence.
     */
    stop: number;
}

/**
 * The imputation method to use for the field value of imputed data objects.
 * One of `"value"`, `"mean"`, `"median"`, `"max"` or `"min"`.
 *
 * __Default value:__  `"value"`
 */
export enum ImputeParamsMethod {
    Max = 'max',
    Mean = 'mean',
    Median = 'median',
    Min = 'min',
    Value = 'value',
}

/**
 * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and
 * `"rule"`.
 *
 * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`,
 * and  `"rule"`.
 *
 * The inner radius in pixels of arc marks.
 *
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
 * values proceed clockwise.
 *
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"width"` for the width of the
 * plot.
 *
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"height"` for the height of the
 * plot.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface X2Class {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

/**
 * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
 *
 * Secondary error value of x coordinates for error specified `"errorbar"` and
 * `"errorband"`.
 *
 * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
 *
 * Secondary error value of y coordinates for error specified `"errorbar"` and
 * `"errorband"`.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface XErrorClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
 *
 * Secondary error value of x coordinates for error specified `"errorbar"` and
 * `"errorband"`.
 *
 * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
 *
 * Secondary error value of y coordinates for error specified `"errorbar"` and
 * `"errorband"`.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface XError2Class {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
 * `x2` or `width`.
 *
 * The `value` of this channel can be a number or a string `"width"` for the width of the
 * plot.
 *
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
 * `y2` or `height`.
 *
 * The `value` of this channel can be a number or a string `"height"` for the height of the
 * plot.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface YClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * An object defining properties of axis's gridlines, ticks and labels.
     * If `null`, the axis for the encoding channel will be removed.
     *
     * __Default value:__ If undefined, default [axis
     * properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.
     *
     * __See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation.
     */
    axis?: Axis | null;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | BinEnum | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining the properties of the Impute Operation to be applied.
     * The field value of the other positional channel is taken as `key` of the `Impute`
     * Operation.
     * The field of the `color` channel if specified is used as `groupby` of the `Impute`
     * Operation.
     *
     * __See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation.
     */
    impute?: ImputeParams | null;
    /**
     * An object defining properties of the channel's scale, which is the function that
     * transforms values in the data domain (numbers, dates, strings, etc) to visual values
     * (pixels, colors, sizes) of the encoding channels.
     *
     * If `null`, the scale will be [disabled and the data value will be directly
     * encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
     *
     * __Default value:__ If undefined, default [scale
     * properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
     *
     * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
     */
    scale?: Scale | null;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A string indicating an encoding channel name to sort
     * by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or
     * `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by
     * x-field, descending). This channel string is short-form of [a sort-by-encoding
     * definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For
     * example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order":
     * "descending"}`.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
     *
     * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortField | Sort | null;
    /**
     * Type of stacking offset if the field should be stacked.
     * `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous
     * domains.
     * For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
     *
     * `stack` can be one of the following values:
     * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for
     * creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and
     * [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
     * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar
     * and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
     * -`"center"` - stacking with center baseline (for
     * [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
     * - `null` or `false` - No-stacking. This will produce layered
     * [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area
     * chart.
     *
     * __Default value:__ `zero` for plots with all of the following conditions are true:
     * (1) the mark is `bar`, `area`, or `arc`;
     * (2) the stacked measure channel (x or y) has a linear scale;
     * (3) At least one of non-position channels mapped to an unaggregated field that is
     * different from x and y. Otherwise, `null` by default.
     *
     * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
     */
    stack?: boolean | StackOffset | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

/**
 * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and
 * `"rule"`.
 *
 * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`,
 * and  `"rule"`.
 *
 * The inner radius in pixels of arc marks.
 *
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
 * values proceed clockwise.
 *
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"width"` for the width of the
 * plot.
 *
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 *
 * The `value` of this channel can be a number or a string `"height"` for the height of the
 * plot.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface Y2Class {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in data domain.
     */
    datum?: boolean | RepeatRefClass | number | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: Type;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number | ValueEnum;
}

/**
 * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
 *
 * Secondary error value of x coordinates for error specified `"errorbar"` and
 * `"errorband"`.
 *
 * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
 *
 * Secondary error value of y coordinates for error specified `"errorbar"` and
 * `"errorband"`.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface YErrorClass {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
 *
 * Secondary error value of x coordinates for error specified `"errorbar"` and
 * `"errorband"`.
 *
 * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
 *
 * Secondary error value of y coordinates for error specified `"errorbar"` and
 * `"errorband"`.
 *
 * A field definition of a secondary channel that shares a scale with another primary
 * channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 *
 * Definition object for a constant value (primitive value or gradient definition) of an
 * encoding channel.
 */
export interface YError2Class {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient
     * definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values
     * between `0` to `1` for opacity).
     */
    value?: number;
}

/**
 * Definition for how to facet the data. One of:
 * 1) [a field definition for faceting the plot by one
 * field](https://vega.github.io/vega-lite/docs/facet.html#field-def)
 * 2) [An object that maps `row` and `column` channels to their field
 * definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
 *
 * A field definition for the horizontal facet of trellis plots.
 *
 * A field definition for the vertical facet of trellis plots.
 */
export interface Facet {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of a facet's header.
     */
    header?: Header;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` is not supported for `row` and `column`.
     */
    sort?: Array<boolean | DateTime | number | string> | SortEncodingSortField | SortOrder | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
    /**
     * A field definition for the horizontal facet of trellis plots.
     */
    column?: FacetFieldDef;
    /**
     * A field definition for the vertical facet of trellis plots.
     */
    row?: FacetFieldDef;
}

/**
 * A field definition for the horizontal facet of trellis plots.
 *
 * A field definition for the vertical facet of trellis plots.
 */
export interface FacetFieldDef {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: RepeatRef | string;
    /**
     * An object defining properties of a facet's header.
     */
    header?: Header;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` is not supported for `row` and `column`.
     */
    sort?: Array<boolean | DateTime | number | string> | SortEncodingSortField | SortOrder | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
}

export interface Step {
    /**
     * The size (width/height) per discrete step.
     */
    step: number;
}

export enum HeightEnum {
    Container = 'container',
}

/**
 * A specification of the view that gets repeated.
 *
 * A full layered plot specification, which may contains `encoding` and `projection`
 * properties that will be applied to underlying unit (single-view) specifications.
 *
 * A unit specification, which can contain either [primitive marks or composite
 * marks](https://vega.github.io/vega-lite/docs/mark.html#types).
 */
export interface LayerElement {
    /**
     * An object describing the data source. Set to `null` to ignore the parent's data source.
     * If no data is set, it is derived from the parent.
     */
    data?: URLData | null;
    /**
     * Description of this mark for commenting purpose.
     */
    description?: string;
    /**
     * A shared key-value mapping between encoding channels and definition of fields in the
     * underlying layers.
     *
     * A key-value mapping between encoding channels and definition of fields.
     */
    encoding?: LayerEncoding;
    /**
     * The height of a visualization.
     *
     * - For a plot with a continuous y-field, height should be a number.
     * - For a plot with either a discrete y-field or no y-field, height can be either a number
     * indicating a fixed height or an object in the form of `{step: number}` defining the
     * height per discrete step. (No y-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on height, it should be set to `"container"`.
     *
     * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous
     * y-field and `config.view.discreteHeight` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * height of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     *
     * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
     */
    height?: Step | number | HeightEnum;
    /**
     * Layer or single view specifications to be layered.
     *
     * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as
     * layering facet specifications is not allowed. Instead, use the [facet
     * operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a
     * facet.
     */
    layer?: LayerElement[];
    /**
     * Name of the visualization for later reference.
     */
    name?: string;
    /**
     * An object defining properties of the geographic projection shared by underlying layers.
     *
     * An object defining properties of geographic projection, which will be applied to `shape`
     * path for `"geoshape"` marks
     * and to `latitude` and `"longitude"` channels for other marks.
     */
    projection?: Projection;
    /**
     * Scale, axis, and legend resolutions for view composition specifications.
     */
    resolve?: Resolve;
    /**
     * Title for the plot.
     */
    title?: string[] | TitleParams | string;
    /**
     * An array of data transformations such as filter and new field calculation.
     */
    transform?: Transform[];
    /**
     * An object defining the view background's fill and stroke.
     *
     * __Default value:__ none (transparent)
     *
     * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
     */
    view?: ViewBackground;
    /**
     * The width of a visualization.
     *
     * - For a plot with a continuous x-field, width should be a number.
     * - For a plot with either a discrete x-field or no x-field, width can be either a number
     * indicating a fixed width or an object in the form of `{step: number}` defining the width
     * per discrete step. (No x-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on width, it should be set to `"container"`.
     *
     * __Default value:__
     * Based on `config.view.continuousWidth` for a plot with a continuous x-field and
     * `config.view.discreteWidth` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * width of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     *
     * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
     */
    width?: Step | number | HeightEnum;
    /**
     * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`,
     * `"line"`,
     * `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition
     * object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
     */
    mark?: Def | BoxPlot;
    /**
     * A key-value mapping between selection names and definitions.
     */
    selection?: { [key: string]: SelectionDef };
}

/**
 * A shared key-value mapping between encoding channels and definition of fields in the
 * underlying layers.
 *
 * A key-value mapping between encoding channels and definition of fields.
 */
export interface LayerEncoding {
    /**
     * Rotation angle of point and text marks.
     */
    angle?: AngleClass;
    /**
     * Color of the marks – either fill or stroke color based on  the `filled` property of mark
     * definition.
     * By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,
     * `"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and
     * `"point"`.
     *
     * __Default value:__ If undefined, the default color depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
     * property.
     *
     * _Note:_
     * 1) For fine-grained control over both fill and stroke colors of the marks, please use the
     * `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence
     * than `color`, thus may override the `color` encoding if conflicting encodings are
     * specified.
     * 2) See the scale documentation for more information about customizing [color
     * scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).
     */
    color?: ColorClass;
    /**
     * A text description of this mark for ARIA accessibility (SVG output only). For SVG output
     * the `"aria-label"` attribute will be set to this description.
     */
    description?: DescriptionClass;
    /**
     * Additional levels of detail for grouping data in aggregate views and
     * in line, trail, and area marks without mapping data to a specific visual channel.
     */
    detail?: TypedFieldDef[] | TypedFieldDef;
    /**
     * Fill color of the marks.
     * __Default value:__ If undefined, the default color depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
     * property.
     *
     * _Note:_ The `fill` encoding has higher precedence than `color`, thus may override the
     * `color` encoding if conflicting encodings are specified.
     */
    fill?: FillClass;
    /**
     * Fill opacity of the marks.
     *
     * __Default value:__ If undefined, the default opacity depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity`
     * property.
     */
    fillOpacity?: FillOpacityClass;
    /**
     * A URL to load upon mouse click.
     */
    href?: HrefClass;
    /**
     * A data field to use as a unique key for data binding. When a visualization’s data is
     * updated, the key value will be used to match data elements to existing mark instances.
     * Use a key channel to enable object constancy for transitions over dynamic data.
     */
    key?: KeyClass;
    /**
     * Latitude position of geographically projected marks.
     */
    latitude?: LatitudeClass;
    /**
     * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and
     * `"rule"`.
     */
    latitude2?: Latitude2Class;
    /**
     * Longitude position of geographically projected marks.
     */
    longitude?: LongitudeClass;
    /**
     * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`,
     * and  `"rule"`.
     */
    longitude2?: Longitude2Class;
    /**
     * Opacity of the marks.
     *
     * __Default value:__ If undefined, the default opacity depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity`
     * property.
     */
    opacity?: OpacityClass;
    /**
     * Order of the marks.
     * - For stacked marks, this `order` channel encodes [stack
     * order](https://vega.github.io/vega-lite/docs/stack.html#order).
     * - For line and trail marks, this `order` channel encodes order of data points in the
     * lines. This can be useful for creating [a connected
     * scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html).
     * Setting `order` to `{"value": null}` makes the line marks use the original order in the
     * data sources.
     * - Otherwise, this `order` channel encodes layer order of the marks.
     *
     * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating
     * additional aggregation grouping.
     */
    order?: OrderFieldDef[] | OrderDef;
    /**
     * The outer radius in pixels of arc marks.
     */
    radius?: RadiusClass;
    /**
     * The inner radius in pixels of arc marks.
     */
    radius2?: Radius2Class;
    /**
     * Shape of the mark.
     *
     * 1. For `point` marks the supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * 2. For `geoshape` marks it should be a field definition of the geojson data
     *
     * __Default value:__ If undefined, the default shape depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s `shape`
     * property. (`"circle"` if unset.)
     */
    shape?: MarkPropDefStringNullTypeForShape;
    /**
     * Size of the mark.
     * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
     * - For `"bar"` and `"tick"` – the bar and tick's size.
     * - For `"text"` – the text's font size.
     * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of
     * line with varying size)
     */
    size?: SizeClass;
    /**
     * Stroke color of the marks.
     * __Default value:__ If undefined, the default color depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
     * property.
     *
     * _Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the
     * `color` encoding if conflicting encodings are specified.
     */
    stroke?: StrokeClass;
    /**
     * Stroke dash of the marks.
     *
     * __Default value:__ `[1,0]` (No dash).
     */
    strokeDash?: MarkPropDefNumber;
    /**
     * Stroke opacity of the marks.
     *
     * __Default value:__ If undefined, the default opacity depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity`
     * property.
     */
    strokeOpacity?: StrokeOpacityClass;
    /**
     * Stroke width of the marks.
     *
     * __Default value:__ If undefined, the default stroke width depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth`
     * property.
     */
    strokeWidth?: StrokeWidthClass;
    /**
     * Text of the `text` mark.
     */
    text?: TextDef;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: ThetaClass;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: Theta2Class;
    /**
     * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the
     * `tooltip` property in the mark
     * definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip in Vega-Lite.
     */
    tooltip?: StringFieldDef[] | FieldOrDatumDefWithConditionStringFieldDefString | null;
    /**
     * The URL of an image mark.
     */
    url?: URLClass;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: XClass;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: X2Class;
    /**
     * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    xError?: XErrorClass;
    /**
     * Secondary error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    xError2?: XError2Class;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: YClass;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: Y2Class;
    /**
     * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    yError?: YErrorClass;
    /**
     * Secondary error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    yError2?: YError2Class;
}

export interface Def {
    box?: boolean | MarkConfig;
    /**
     * Whether a composite mark be clipped to the enclosing group’s width and height.
     *
     * Whether a mark be clipped to the enclosing group’s width and height.
     */
    clip?: boolean;
    /**
     * Default color.
     *
     * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
     *
     * __Note:__
     * - This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     * - The `fill` and `stroke` properties have higher precedence than `color` and will
     * override `color`.
     */
    color?: ColorLinearGradient | string;
    /**
     * The extent of the whiskers. Available options include:
     * - `"min-max"`: min and max are the lower and upper whiskers respectively.
     * - A number representing multiple of the interquartile range. This number will be
     * multiplied by the IQR to determine whisker boundary, which spans from the smallest data
     * to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_
     * are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).
     *
     * __Default value:__ `1.5`.
     *
     * The extent of the rule. Available options include:
     * - `"ci"`: Extend the rule to the confidence interval of the mean.
     * - `"stderr"`: The size of rule are set to the value of standard error, extending from the
     * mean.
     * - `"stdev"`: The size of rule are set to the value of standard deviation, extending from
     * the mean.
     * - `"iqr"`: Extend the rule to the q1 and q3.
     *
     * __Default value:__ `"stderr"`.
     *
     * The extent of the band. Available options include:
     * - `"ci"`: Extend the band to the confidence interval of the mean.
     * - `"stderr"`: The size of band are set to the value of standard error, extending from the
     * mean.
     * - `"stdev"`: The size of band are set to the value of standard deviation, extending from
     * the mean.
     * - `"iqr"`: Extend the band to the q1 and q3.
     *
     * __Default value:__ `"stderr"`.
     */
    extent?: number | ExtentExtent;
    median?: boolean | MarkConfig;
    /**
     * The opacity (value between [0,1]) of the mark.
     *
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * Orientation of the box plot. This is normally automatically determined based on types of
     * fields on x and y channels. However, an explicit `orient` be specified when the
     * orientation is ambiguous.
     *
     * __Default value:__ `"vertical"`.
     *
     * Orientation of the error bar. This is normally automatically determined, but can be
     * specified when the orientation is ambiguous and cannot be automatically determined.
     *
     * Orientation of the error band. This is normally automatically determined, but can be
     * specified when the orientation is ambiguous and cannot be automatically determined.
     *
     * The orientation of a non-stacked bar, tick, area, and line charts.
     * The value is either horizontal (default) or vertical.
     * - For bar, rule and tick, this determines whether the size of the bar and tick
     * should be applied to x or y dimension.
     * - For area, this property determines the orient property of the Vega output.
     * - For line and trail marks, this property determines the sort order of the points in the
     * line
     * if `config.sortLineBy` is not specified.
     * For stacked charts, this is always determined by the orientation of the stack;
     * therefore explicitly specified value will be ignored.
     */
    orient?: Orientation;
    outliers?: boolean | MarkConfig;
    rule?: boolean | MarkConfig;
    /**
     * Size of the box and median tick of a box plot
     *
     * Default size for marks.
     * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that
     * this value sets the area of the symbol; the side lengths will increase with the square
     * root of this value.
     * - For `bar`, this represents the band size of the bar, in pixels.
     * - For `text`, this represents the font size, in pixels.
     *
     * __Default value:__
     * - `30` for point, circle, square marks; width/height's `step`
     * - `2` for bar marks with discrete dimensions;
     * - `5` for bar marks with continuous dimensions;
     * - `11` for text marks.
     */
    size?: number;
    ticks?: boolean | MarkConfig;
    /**
     * The mark type. This could a primitive mark type
     * (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
     * `"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`)
     * or a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).
     */
    type: BoxPlot;
    band?: boolean | MarkConfig;
    borders?: boolean | MarkConfig;
    /**
     * The line interpolation method for the error band. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: a piecewise constant function (a step function) consisting of alternating
     * horizontal and vertical lines. The y-value changes at the midpoint of each pair of
     * adjacent x-values.
     * - `"step-before"`: a piecewise constant function (a step function) consisting of
     * alternating horizontal and vertical lines. The y-value changes before the x-value.
     * - `"step-after"`: a piecewise constant function (a step function) consisting of
     * alternating horizontal and vertical lines. The y-value changes after the x-value.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     *
     * The line interpolation method to use for line and area marks. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
     * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
     * function.
     * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
     * function.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * The tension parameter for the interpolation type of the error band.
     *
     * Depending on the interpolation type, sets the tension parameter (for line and area marks).
     */
    tension?: number;
    /**
     * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
     * of `"left"`, `"right"`, `"center"`.
     */
    align?: Align;
    /**
     * The rotation angle of the text, in degrees.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG element, removing
     * the mark item from the ARIA accessibility tree.
     */
    aria?: boolean;
    /**
     * Sets the type of user interface element of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "role" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRole?: string;
    /**
     * A human-readable, author-localized description for the role of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "aria-roledescription" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRoleDescription?: string;
    /**
     * Whether to keep aspect ratio of image marks.
     */
    aspect?: boolean;
    /**
     * The width of the ticks.
     *
     * __Default value:__  3/4 of step (width step for horizontal ticks and height step for
     * vertical ticks).
     */
    bandSize?: number;
    /**
     * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
     * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
     * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
     * `lineHeight` rather than `fontSize` alone.
     */
    baseline?: Baseline;
    /**
     * Offset between bars for binned field. The ideal value for this is either 0 (preferred by
     * statisticians) or 1 (Vega-Lite default, D3 example style).
     *
     * __Default value:__ `1`
     */
    binSpacing?: number;
    /**
     * The color blend mode for drawing an item on its current background. Any valid [CSS
     * mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value
     * can be used.
     *
     * __Default value: `"source-over"`
     */
    blend?: Blend | null;
    /**
     * The default size of the bars on continuous scales.
     *
     * __Default value:__ `5`
     */
    continuousBandSize?: number;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomRight?: number;
    /**
     * - For vertical bars, top-left and top-right corner radius.
     * - For horizontal bars, top-right and bottom-right corner radius.
     */
    cornerRadiusEnd?: number;
    /**
     * The radius in pixels of rounded rectangles' top right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' top left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopRight?: number;
    /**
     * The mouse cursor used over the mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * A text description of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).
     */
    description?: string;
    /**
     * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
     * This property determines on which side is truncated in response to the limit parameter.
     *
     * __Default value:__ `"ltr"`
     */
    dir?: TextDirection;
    /**
     * The default size of the bars with discrete dimensions. If unspecified, the default size
     * is  `step-2`, which provides 2 pixel offset between bars.
     */
    discreteBandSize?: number;
    /**
     * The horizontal offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dx?: number;
    /**
     * The vertical offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dy?: number;
    /**
     * The ellipsis string for text truncated in response to the limit parameter.
     *
     * __Default value:__ `"…"`
     */
    ellipsis?: string;
    /**
     * Default fill color. This property has higher precedence than `config.color`. Set to
     * `null` to remove fill.
     *
     * __Default value:__ (None)
     */
    fill?: FillLinearGradient | null | string;
    /**
     * Whether the mark's color should be used as fill color instead of stroke color.
     *
     * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as
     * `geoshape` marks for
     * [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources;
     * otherwise, `true`.
     *
     * __Note:__ This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     */
    filled?: boolean;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The typeface to set the text in (e.g., `"Helvetica Neue"`).
     */
    font?: string;
    /**
     * The font size, in pixels.
     *
     * __Default value:__ `11`
     */
    fontSize?: number;
    /**
     * The font style (e.g., `"italic"`).
     */
    fontStyle?: string;
    /**
     * The font weight.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * Height of the marks.
     */
    height?: number;
    /**
     * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
     */
    href?: string;
    /**
     * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
     */
    innerRadius?: number;
    /**
     * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
     * - If set to `"filter"` (default), all data items with null values will be skipped (for
     * line, trail, and area marks) or filtered (for other marks).
     * - If `null`, all data items are included. In this case, invalid values will be
     * interpreted as zeroes.
     */
    invalid?: Invalid | null;
    /**
     * The maximum length of the text mark in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0` -- indicating no limit
     */
    limit?: number;
    /**
     * A flag for overlaying line on top of area marks, or an object defining the properties of
     * the overlayed lines.
     *
     * - If this value is an empty object (`{}`) or `true`, lines with default properties will
     * be used.
     *
     * - If this value is `false`, no lines would be automatically added to area marks.
     *
     * __Default value:__ `false`.
     */
    line?: boolean | OverlayMarkDef;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property is ignored if the text is array-valued.
     */
    lineBreak?: string;
    /**
     * The line height in pixels (the spacing between subsequent lines of text) for multi-line
     * text marks.
     */
    lineHeight?: number;
    /**
     * For line and trail marks, this `order` property can be set to `null` or `false` to make
     * the lines use the original order in the data sources.
     */
    order?: boolean | null;
    /**
     * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
     */
    outerRadius?: number;
    /**
     * The angular padding applied to sides of the arc, in radians.
     */
    padAngle?: number;
    /**
     * A flag for overlaying points on top of line or area marks, or an object defining the
     * properties of the overlayed points.
     *
     * - If this property is `"transparent"`, transparent points will be used (for enhancing
     * tooltips and selections).
     *
     * - If this property is an empty object (`{}`) or `true`, filled points with default
     * properties will be used.
     *
     * - If this property is `false`, no points would be automatically added to line or area
     * marks.
     *
     * __Default value:__ `false`.
     */
    point?: boolean | OverlayMarkDef | PointEnum;
    /**
     * For arc mark, the primary (outer) radius in pixels.
     *
     * For text marks, polar coordinate radial offset, in pixels, of the text from the origin
     * determined by the `x` and `y` properties.
     */
    radius?: number;
    /**
     * The secondary (inner) radius in pixels of arc marks.
     */
    radius2?: number;
    /**
     * Offset for radius2.
     */
    radius2Offset?: number;
    /**
     * Offset for radius.
     */
    radiusOffset?: number;
    /**
     * Shape of the point marks. Supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * __Default value:__ `"circle"`
     */
    shape?: string;
    /**
     * Default stroke color. This property has higher precedence than `config.color`. Set to
     * `null` to remove stroke.
     *
     * __Default value:__ (None)
     */
    stroke?: FillLinearGradient | null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The offset in pixels at which to draw the group stroke and fill. If unspecified, the
     * default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths
     * align with the pixel grid.
     */
    strokeOffset?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * A string or array of strings indicating the name of custom styles to apply to the mark. A
     * style is a named collection of mark property defaults defined within the [style
     * configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is
     * an array, later styles will override earlier styles. Any [mark
     * properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly
     * defined within the `encoding` will override a style default.
     *
     * __Default value:__ The mark's name. For example, a bar mark will have style `"bar"` by
     * default.
     * __Note:__ Any specified style will augment the default style. For example, a bar mark
     * with `"style": "foo"` will receive from `config.style.bar` and `config.style.foo` (the
     * specified style `"foo"` has higher precedence).
     */
    style?: string[] | string;
    /**
     * Placeholder text if the `text` channel is not specified
     */
    text?: string[] | string;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: number;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: number;
    /**
     * Offset for theta2.
     */
    theta2Offset?: number;
    /**
     * Offset for theta.
     */
    thetaOffset?: number;
    /**
     * Thickness of the tick mark.
     *
     * __Default value:__  `1`
     */
    thickness?: number;
    /**
     * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks
     * will be equal to the time unit band step.
     * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
     */
    timeUnitBand?: number;
    /**
     * Default relative band position for a time unit. If set to `0`, the marks will be
     * positioned at the beginning of the time unit band step.
     * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
     */
    timeUnitBandPosition?: number;
    /**
     * The tooltip text string to show upon mouse hover or an object defining which fields
     * should the tooltip be derived from.
     *
     * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding`
     * will be used.
     * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted
     * data point will be used.
     * - If set to `null` or `false`, then no tooltip will be used.
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip  in Vega-Lite.
     *
     * __Default value:__ `null`
     */
    tooltip?: boolean | TooltipContent | number | null | string;
    /**
     * Width of the marks.
     */
    width?: number;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: number | XEnum;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: number | XEnum;
    /**
     * Offset for x2-position.
     */
    x2Offset?: number;
    /**
     * Offset for x-position.
     */
    xOffset?: number;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: number | YEnum;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: number | YEnum;
    /**
     * Offset for y2-position.
     */
    y2Offset?: number;
    /**
     * Offset for y-position.
     */
    yOffset?: number;
}

/**
 * Circle-Specific Config
 *
 * Geoshape-Specific Config
 *
 * Mark Config
 *
 * Point-Specific Config
 *
 * Rule-Specific Config
 *
 * Square-Specific Config
 *
 * Default style for chart subtitles
 *
 * Default style for chart titles
 *
 * Default style for axis, legend, and header labels.
 *
 * Default style for axis, legend, and header titles.
 *
 * Text-Specific Config
 */
export interface MarkConfig {
    /**
     * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
     * of `"left"`, `"right"`, `"center"`.
     */
    align?: Align;
    /**
     * The rotation angle of the text, in degrees.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG element, removing
     * the mark item from the ARIA accessibility tree.
     */
    aria?: boolean;
    /**
     * Sets the type of user interface element of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "role" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRole?: string;
    /**
     * A human-readable, author-localized description for the role of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "aria-roledescription" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRoleDescription?: string;
    /**
     * Whether to keep aspect ratio of image marks.
     */
    aspect?: boolean;
    /**
     * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
     * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
     * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
     * `lineHeight` rather than `fontSize` alone.
     */
    baseline?: Baseline;
    /**
     * The color blend mode for drawing an item on its current background. Any valid [CSS
     * mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value
     * can be used.
     *
     * __Default value: `"source-over"`
     */
    blend?: Blend | null;
    /**
     * Default color.
     *
     * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
     *
     * __Note:__
     * - This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     * - The `fill` and `stroke` properties have higher precedence than `color` and will
     * override `color`.
     */
    color?: ColorLinearGradient | string;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomRight?: number;
    /**
     * The radius in pixels of rounded rectangles' top right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' top left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopRight?: number;
    /**
     * The mouse cursor used over the mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * A text description of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).
     */
    description?: string;
    /**
     * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
     * This property determines on which side is truncated in response to the limit parameter.
     *
     * __Default value:__ `"ltr"`
     */
    dir?: TextDirection;
    /**
     * The horizontal offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dx?: number;
    /**
     * The vertical offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dy?: number;
    /**
     * The ellipsis string for text truncated in response to the limit parameter.
     *
     * __Default value:__ `"…"`
     */
    ellipsis?: string;
    /**
     * The end angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    endAngle?: number;
    /**
     * Default fill color. This property has higher precedence than `config.color`. Set to
     * `null` to remove fill.
     *
     * __Default value:__ (None)
     */
    fill?: FillLinearGradient | null | string;
    /**
     * Whether the mark's color should be used as fill color instead of stroke color.
     *
     * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as
     * `geoshape` marks for
     * [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources;
     * otherwise, `true`.
     *
     * __Note:__ This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     */
    filled?: boolean;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The typeface to set the text in (e.g., `"Helvetica Neue"`).
     */
    font?: string;
    /**
     * The font size, in pixels.
     *
     * __Default value:__ `11`
     */
    fontSize?: number;
    /**
     * The font style (e.g., `"italic"`).
     */
    fontStyle?: string;
    /**
     * The font weight.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * Height of the marks.
     */
    height?: number;
    /**
     * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
     */
    href?: string;
    /**
     * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
     */
    innerRadius?: number;
    /**
     * The line interpolation method to use for line and area marks. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
     * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
     * function.
     * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
     * function.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
     * - If set to `"filter"` (default), all data items with null values will be skipped (for
     * line, trail, and area marks) or filtered (for other marks).
     * - If `null`, all data items are included. In this case, invalid values will be
     * interpreted as zeroes.
     */
    invalid?: Invalid | null;
    /**
     * The maximum length of the text mark in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0` -- indicating no limit
     */
    limit?: number;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property is ignored if the text is array-valued.
     */
    lineBreak?: string;
    /**
     * The line height in pixels (the spacing between subsequent lines of text) for multi-line
     * text marks.
     */
    lineHeight?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * For line and trail marks, this `order` property can be set to `null` or `false` to make
     * the lines use the original order in the data sources.
     */
    order?: boolean | null;
    /**
     * The orientation of a non-stacked bar, tick, area, and line charts.
     * The value is either horizontal (default) or vertical.
     * - For bar, rule and tick, this determines whether the size of the bar and tick
     * should be applied to x or y dimension.
     * - For area, this property determines the orient property of the Vega output.
     * - For line and trail marks, this property determines the sort order of the points in the
     * line
     * if `config.sortLineBy` is not specified.
     * For stacked charts, this is always determined by the orientation of the stack;
     * therefore explicitly specified value will be ignored.
     */
    orient?: Orientation;
    /**
     * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
     */
    outerRadius?: number;
    /**
     * The angular padding applied to sides of the arc, in radians.
     */
    padAngle?: number;
    /**
     * For arc mark, the primary (outer) radius in pixels.
     *
     * For text marks, polar coordinate radial offset, in pixels, of the text from the origin
     * determined by the `x` and `y` properties.
     */
    radius?: number;
    /**
     * The secondary (inner) radius in pixels of arc marks.
     */
    radius2?: number;
    /**
     * Shape of the point marks. Supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * __Default value:__ `"circle"`
     */
    shape?: string;
    /**
     * Default size for marks.
     * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that
     * this value sets the area of the symbol; the side lengths will increase with the square
     * root of this value.
     * - For `bar`, this represents the band size of the bar, in pixels.
     * - For `text`, this represents the font size, in pixels.
     *
     * __Default value:__
     * - `30` for point, circle, square marks; width/height's `step`
     * - `2` for bar marks with discrete dimensions;
     * - `5` for bar marks with continuous dimensions;
     * - `11` for text marks.
     */
    size?: number;
    /**
     * The start angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    startAngle?: number;
    /**
     * Default stroke color. This property has higher precedence than `config.color`. Set to
     * `null` to remove stroke.
     *
     * __Default value:__ (None)
     */
    stroke?: FillLinearGradient | null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The offset in pixels at which to draw the group stroke and fill. If unspecified, the
     * default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths
     * align with the pixel grid.
     */
    strokeOffset?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * Depending on the interpolation type, sets the tension parameter (for line and area marks).
     */
    tension?: number;
    /**
     * Placeholder text if the `text` channel is not specified
     */
    text?: string[] | string;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: number;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: number;
    /**
     * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks
     * will be equal to the time unit band step.
     * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
     */
    timeUnitBand?: number;
    /**
     * Default relative band position for a time unit. If set to `0`, the marks will be
     * positioned at the beginning of the time unit band step.
     * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
     */
    timeUnitBandPosition?: number;
    /**
     * The tooltip text string to show upon mouse hover or an object defining which fields
     * should the tooltip be derived from.
     *
     * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding`
     * will be used.
     * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted
     * data point will be used.
     * - If set to `null` or `false`, then no tooltip will be used.
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip  in Vega-Lite.
     *
     * __Default value:__ `null`
     */
    tooltip?: boolean | TooltipContent | number | null | string;
    /**
     * Width of the marks.
     */
    width?: number;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: number | XEnum;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: number | XEnum;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: number | YEnum;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: number | YEnum;
}

export enum Blend {
    Color = 'color',
    ColorBurn = 'color-burn',
    ColorDodge = 'color-dodge',
    Darken = 'darken',
    Difference = 'difference',
    Exclusion = 'exclusion',
    HardLight = 'hard-light',
    Hue = 'hue',
    Lighten = 'lighten',
    Luminosity = 'luminosity',
    Multiply = 'multiply',
    Overlay = 'overlay',
    Saturation = 'saturation',
    Screen = 'screen',
    SoftLight = 'soft-light',
}

export interface ColorLinearGradient {
    /**
     * The type of gradient. Use `"linear"` for a linear gradient.
     *
     * The type of gradient. Use `"radial"` for a radial gradient.
     */
    gradient: Gradient;
    id?: string;
    /**
     * An array of gradient stops defining the gradient color sequence.
     */
    stops: GradientStop[];
    /**
     * The starting x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `0`
     *
     * The x-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    x1?: number;
    /**
     * The ending x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `1`
     *
     * The x-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    x2?: number;
    /**
     * The starting y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `0`
     *
     * The y-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    y1?: number;
    /**
     * The ending y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `0`
     *
     * The y-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    y2?: number;
    /**
     * The radius length, in normalized [0, 1] coordinates, of the inner circle for the
     * gradient.
     *
     * __Default value:__ `0`
     */
    r1?: number;
    /**
     * The radius length, in normalized [0, 1] coordinates, of the outer circle for the
     * gradient.
     *
     * __Default value:__ `0.5`
     */
    r2?: number;
}

/**
 * The mouse cursor used over the mark. Any valid [CSS cursor
 * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
 *
 * The mouse cursor used over the interval mark. Any valid [CSS cursor
 * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
 *
 * The mouse cursor used over the view. Any valid [CSS cursor
 * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
 */
export enum Cursor {
    Alias = 'alias',
    AllScroll = 'all-scroll',
    Auto = 'auto',
    Cell = 'cell',
    ColResize = 'col-resize',
    ContextMenu = 'context-menu',
    Copy = 'copy',
    Crosshair = 'crosshair',
    Default = 'default',
    EResize = 'e-resize',
    EwResize = 'ew-resize',
    Grab = 'grab',
    Grabbing = 'grabbing',
    Help = 'help',
    Move = 'move',
    NResize = 'n-resize',
    NSResize = 'ns-resize',
    NeResize = 'ne-resize',
    NeswResize = 'nesw-resize',
    NoDrop = 'no-drop',
    None = 'none',
    NotAllowed = 'not-allowed',
    NwResize = 'nw-resize',
    NwseResize = 'nwse-resize',
    Pointer = 'pointer',
    Progress = 'progress',
    RowResize = 'row-resize',
    SEResize = 'se-resize',
    SResize = 's-resize',
    SwResize = 'sw-resize',
    Text = 'text',
    VerticalText = 'vertical-text',
    WResize = 'w-resize',
    Wait = 'wait',
    ZoomIn = 'zoom-in',
    ZoomOut = 'zoom-out',
}

/**
 * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
 * This property determines on which side is truncated in response to the limit parameter.
 *
 * __Default value:__ `"ltr"`
 */
export enum TextDirection {
    LTR = 'ltr',
    RTL = 'rtl',
}

export interface FillLinearGradient {
    /**
     * The type of gradient. Use `"linear"` for a linear gradient.
     *
     * The type of gradient. Use `"radial"` for a radial gradient.
     */
    gradient: Gradient;
    id?: string;
    /**
     * An array of gradient stops defining the gradient color sequence.
     */
    stops: GradientStop[];
    /**
     * The starting x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `0`
     *
     * The x-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    x1?: number;
    /**
     * The ending x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `1`
     *
     * The x-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    x2?: number;
    /**
     * The starting y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `0`
     *
     * The y-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    y1?: number;
    /**
     * The ending y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
     *
     * __Default value:__ `0`
     *
     * The y-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle
     * for the gradient.
     *
     * __Default value:__ `0.5`
     */
    y2?: number;
    /**
     * The radius length, in normalized [0, 1] coordinates, of the inner circle for the
     * gradient.
     *
     * __Default value:__ `0`
     */
    r1?: number;
    /**
     * The radius length, in normalized [0, 1] coordinates, of the outer circle for the
     * gradient.
     *
     * __Default value:__ `0.5`
     */
    r2?: number;
}

/**
 * The line interpolation method to use for line and area marks. One of the following:
 * - `"linear"`: piecewise linear segments, as in a polyline.
 * - `"linear-closed"`: close the linear segments to form a polygon.
 * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
 * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
 * function.
 * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
 * function.
 * - `"basis"`: a B-spline, with control point duplication on the ends.
 * - `"basis-open"`: an open B-spline; may not intersect the start or end.
 * - `"basis-closed"`: a closed B-spline, as in a loop.
 * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
 * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
 * will intersect other control points.
 * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
 * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
 * spline.
 * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
 *
 * The line interpolation method for the error band. One of the following:
 * - `"linear"`: piecewise linear segments, as in a polyline.
 * - `"linear-closed"`: close the linear segments to form a polygon.
 * - `"step"`: a piecewise constant function (a step function) consisting of alternating
 * horizontal and vertical lines. The y-value changes at the midpoint of each pair of
 * adjacent x-values.
 * - `"step-before"`: a piecewise constant function (a step function) consisting of
 * alternating horizontal and vertical lines. The y-value changes before the x-value.
 * - `"step-after"`: a piecewise constant function (a step function) consisting of
 * alternating horizontal and vertical lines. The y-value changes after the x-value.
 * - `"basis"`: a B-spline, with control point duplication on the ends.
 * - `"basis-open"`: an open B-spline; may not intersect the start or end.
 * - `"basis-closed"`: a closed B-spline, as in a loop.
 * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
 * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
 * will intersect other control points.
 * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
 * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
 * spline.
 * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
 */
export enum Interpolate {
    Basis = 'basis',
    BasisClosed = 'basis-closed',
    BasisOpen = 'basis-open',
    Bundle = 'bundle',
    Cardinal = 'cardinal',
    CardinalClosed = 'cardinal-closed',
    CardinalOpen = 'cardinal-open',
    CatmullROM = 'catmull-rom',
    Linear = 'linear',
    LinearClosed = 'linear-closed',
    Monotone = 'monotone',
    Natural = 'natural',
    Step = 'step',
    StepAfter = 'step-after',
    StepBefore = 'step-before',
}

export enum Invalid {
    Filter = 'filter',
}

/**
 * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
 *
 * __Default value:__ `"miter"`
 */
export enum StrokeJoin {
    Bevel = 'bevel',
    Miter = 'miter',
    Round = 'round',
}

export interface TooltipContent {
    content: Content;
}

export enum Content {
    Data = 'data',
    Encoding = 'encoding',
}

export enum XEnum {
    Width = 'width',
}

export enum YEnum {
    Height = 'height',
}

/**
 * The extent of the band. Available options include:
 * - `"ci"`: Extend the band to the confidence interval of the mean.
 * - `"stderr"`: The size of band are set to the value of standard error, extending from the
 * mean.
 * - `"stdev"`: The size of band are set to the value of standard deviation, extending from
 * the mean.
 * - `"iqr"`: Extend the band to the q1 and q3.
 *
 * __Default value:__ `"stderr"`.
 *
 * The extent of the rule. Available options include:
 * - `"ci"`: Extend the rule to the confidence interval of the mean.
 * - `"stderr"`: The size of rule are set to the value of standard error, extending from the
 * mean.
 * - `"stdev"`: The size of rule are set to the value of standard deviation, extending from
 * the mean.
 * - `"iqr"`: Extend the rule to the q1 and q3.
 *
 * __Default value:__ `"stderr"`.
 */
export enum ExtentExtent {
    Ci = 'ci',
    Iqr = 'iqr',
    MinMax = 'min-max',
    Stderr = 'stderr',
    Stdev = 'stdev',
}

export interface OverlayMarkDef {
    /**
     * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
     * of `"left"`, `"right"`, `"center"`.
     */
    align?: Align;
    /**
     * The rotation angle of the text, in degrees.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG element, removing
     * the mark item from the ARIA accessibility tree.
     */
    aria?: boolean;
    /**
     * Sets the type of user interface element of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "role" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRole?: string;
    /**
     * A human-readable, author-localized description for the role of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "aria-roledescription" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRoleDescription?: string;
    /**
     * Whether to keep aspect ratio of image marks.
     */
    aspect?: boolean;
    /**
     * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
     * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
     * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
     * `lineHeight` rather than `fontSize` alone.
     */
    baseline?: Baseline;
    /**
     * The color blend mode for drawing an item on its current background. Any valid [CSS
     * mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value
     * can be used.
     *
     * __Default value: `"source-over"`
     */
    blend?: Blend | null;
    /**
     * Whether a mark be clipped to the enclosing group’s width and height.
     */
    clip?: boolean;
    /**
     * Default color.
     *
     * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
     *
     * __Note:__
     * - This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     * - The `fill` and `stroke` properties have higher precedence than `color` and will
     * override `color`.
     */
    color?: ColorLinearGradient | string;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomRight?: number;
    /**
     * The radius in pixels of rounded rectangles' top right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' top left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopRight?: number;
    /**
     * The mouse cursor used over the mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * A text description of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).
     */
    description?: string;
    /**
     * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
     * This property determines on which side is truncated in response to the limit parameter.
     *
     * __Default value:__ `"ltr"`
     */
    dir?: TextDirection;
    /**
     * The horizontal offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dx?: number;
    /**
     * The vertical offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dy?: number;
    /**
     * The ellipsis string for text truncated in response to the limit parameter.
     *
     * __Default value:__ `"…"`
     */
    ellipsis?: string;
    /**
     * The end angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    endAngle?: number;
    /**
     * Default fill color. This property has higher precedence than `config.color`. Set to
     * `null` to remove fill.
     *
     * __Default value:__ (None)
     */
    fill?: FillLinearGradient | null | string;
    /**
     * Whether the mark's color should be used as fill color instead of stroke color.
     *
     * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as
     * `geoshape` marks for
     * [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources;
     * otherwise, `true`.
     *
     * __Note:__ This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     */
    filled?: boolean;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The typeface to set the text in (e.g., `"Helvetica Neue"`).
     */
    font?: string;
    /**
     * The font size, in pixels.
     *
     * __Default value:__ `11`
     */
    fontSize?: number;
    /**
     * The font style (e.g., `"italic"`).
     */
    fontStyle?: string;
    /**
     * The font weight.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * Height of the marks.
     */
    height?: number;
    /**
     * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
     */
    href?: string;
    /**
     * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
     */
    innerRadius?: number;
    /**
     * The line interpolation method to use for line and area marks. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
     * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
     * function.
     * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
     * function.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
     * - If set to `"filter"` (default), all data items with null values will be skipped (for
     * line, trail, and area marks) or filtered (for other marks).
     * - If `null`, all data items are included. In this case, invalid values will be
     * interpreted as zeroes.
     */
    invalid?: Invalid | null;
    /**
     * The maximum length of the text mark in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0` -- indicating no limit
     */
    limit?: number;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property is ignored if the text is array-valued.
     */
    lineBreak?: string;
    /**
     * The line height in pixels (the spacing between subsequent lines of text) for multi-line
     * text marks.
     */
    lineHeight?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * For line and trail marks, this `order` property can be set to `null` or `false` to make
     * the lines use the original order in the data sources.
     */
    order?: boolean | null;
    /**
     * The orientation of a non-stacked bar, tick, area, and line charts.
     * The value is either horizontal (default) or vertical.
     * - For bar, rule and tick, this determines whether the size of the bar and tick
     * should be applied to x or y dimension.
     * - For area, this property determines the orient property of the Vega output.
     * - For line and trail marks, this property determines the sort order of the points in the
     * line
     * if `config.sortLineBy` is not specified.
     * For stacked charts, this is always determined by the orientation of the stack;
     * therefore explicitly specified value will be ignored.
     */
    orient?: Orientation;
    /**
     * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
     */
    outerRadius?: number;
    /**
     * The angular padding applied to sides of the arc, in radians.
     */
    padAngle?: number;
    /**
     * For arc mark, the primary (outer) radius in pixels.
     *
     * For text marks, polar coordinate radial offset, in pixels, of the text from the origin
     * determined by the `x` and `y` properties.
     */
    radius?: number;
    /**
     * The secondary (inner) radius in pixels of arc marks.
     */
    radius2?: number;
    /**
     * Offset for radius2.
     */
    radius2Offset?: number;
    /**
     * Offset for radius.
     */
    radiusOffset?: number;
    /**
     * Shape of the point marks. Supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * __Default value:__ `"circle"`
     */
    shape?: string;
    /**
     * Default size for marks.
     * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that
     * this value sets the area of the symbol; the side lengths will increase with the square
     * root of this value.
     * - For `bar`, this represents the band size of the bar, in pixels.
     * - For `text`, this represents the font size, in pixels.
     *
     * __Default value:__
     * - `30` for point, circle, square marks; width/height's `step`
     * - `2` for bar marks with discrete dimensions;
     * - `5` for bar marks with continuous dimensions;
     * - `11` for text marks.
     */
    size?: number;
    /**
     * The start angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    startAngle?: number;
    /**
     * Default stroke color. This property has higher precedence than `config.color`. Set to
     * `null` to remove stroke.
     *
     * __Default value:__ (None)
     */
    stroke?: FillLinearGradient | null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The offset in pixels at which to draw the group stroke and fill. If unspecified, the
     * default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths
     * align with the pixel grid.
     */
    strokeOffset?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * A string or array of strings indicating the name of custom styles to apply to the mark. A
     * style is a named collection of mark property defaults defined within the [style
     * configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is
     * an array, later styles will override earlier styles. Any [mark
     * properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly
     * defined within the `encoding` will override a style default.
     *
     * __Default value:__ The mark's name. For example, a bar mark will have style `"bar"` by
     * default.
     * __Note:__ Any specified style will augment the default style. For example, a bar mark
     * with `"style": "foo"` will receive from `config.style.bar` and `config.style.foo` (the
     * specified style `"foo"` has higher precedence).
     */
    style?: string[] | string;
    /**
     * Depending on the interpolation type, sets the tension parameter (for line and area marks).
     */
    tension?: number;
    /**
     * Placeholder text if the `text` channel is not specified
     */
    text?: string[] | string;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: number;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: number;
    /**
     * Offset for theta2.
     */
    theta2Offset?: number;
    /**
     * Offset for theta.
     */
    thetaOffset?: number;
    /**
     * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks
     * will be equal to the time unit band step.
     * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
     */
    timeUnitBand?: number;
    /**
     * Default relative band position for a time unit. If set to `0`, the marks will be
     * positioned at the beginning of the time unit band step.
     * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
     */
    timeUnitBandPosition?: number;
    /**
     * The tooltip text string to show upon mouse hover or an object defining which fields
     * should the tooltip be derived from.
     *
     * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding`
     * will be used.
     * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted
     * data point will be used.
     * - If set to `null` or `false`, then no tooltip will be used.
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip  in Vega-Lite.
     *
     * __Default value:__ `null`
     */
    tooltip?: boolean | TooltipContent | number | null | string;
    /**
     * Width of the marks.
     */
    width?: number;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: number | XEnum;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: number | XEnum;
    /**
     * Offset for x2-position.
     */
    x2Offset?: number;
    /**
     * Offset for x-position.
     */
    xOffset?: number;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: number | YEnum;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: number | YEnum;
    /**
     * Offset for y2-position.
     */
    y2Offset?: number;
    /**
     * Offset for y-position.
     */
    yOffset?: number;
}

export enum PointEnum {
    Transparent = 'transparent',
}

/**
 * The mark type. This could a primitive mark type
 * (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
 * `"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`)
 * or a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).
 *
 * All types of primitive marks.
 */
export enum BoxPlot {
    Arc = 'arc',
    Area = 'area',
    Bar = 'bar',
    Boxplot = 'boxplot',
    Circle = 'circle',
    Errorband = 'errorband',
    Errorbar = 'errorbar',
    Geoshape = 'geoshape',
    Image = 'image',
    Line = 'line',
    Point = 'point',
    Rect = 'rect',
    Rule = 'rule',
    Square = 'square',
    Text = 'text',
    Tick = 'tick',
    Trail = 'trail',
}

/**
 * Projection configuration, which determines default properties for all
 * [projections](https://vega.github.io/vega-lite/docs/projection.html). For a full list of
 * projection configuration options, please see the [corresponding section of the projection
 * documentation](https://vega.github.io/vega-lite/docs/projection.html#config).
 *
 * Any property of Projection can be in config
 *
 * An object defining properties of geographic projection, which will be applied to `shape`
 * path for `"geoshape"` marks
 * and to `latitude` and `"longitude"` channels for other marks.
 *
 * An object defining properties of the geographic projection shared by underlying layers.
 */
export interface Projection {
    /**
     * The projection's center, a two-element array of longitude and latitude in degrees.
     *
     * __Default value:__ `[0, 0]`
     */
    center?: number[];
    /**
     * The projection's clipping circle radius to the specified angle in degrees. If `null`,
     * switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than
     * small-circle clipping.
     */
    clipAngle?: number;
    /**
     * The projection's viewport clip extent to the specified bounds in pixels. The extent
     * bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of
     * the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no
     * viewport clipping is performed.
     */
    clipExtent?: Array<number[]>;
    coefficient?: number;
    distance?: number;
    extent?: Array<number[]>;
    fit?: any;
    fraction?: number;
    lobes?: number;
    parallel?: number;
    /**
     * For conic projections, the [two standard
     * parallels](https://en.wikipedia.org/wiki/Map_projection#Conic) that define the map
     * layout. The default depends on the specific conic projection used.
     */
    parallels?: number[];
    /**
     * The default radius (in pixels) to use when drawing GeoJSON `Point` and `MultiPoint`
     * geometries. This parameter sets a constant default value. To modify the point radius in
     * response to data, see the corresponding parameter of the GeoPath and GeoShape
     * transforms.
     *
     * __Default value:__ `4.5`
     */
    pointRadius?: number;
    /**
     * The threshold for the projection's [adaptive
     * resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This
     * value corresponds to the [Douglas–Peucker
     * distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm).
     * If precision is not specified, returns the projection's current resampling precision
     * which defaults to `√0.5 ≅ 0.70710…`.
     */
    precision?: number;
    radius?: number;
    ratio?: number;
    reflectX?: boolean;
    reflectY?: boolean;
    /**
     * The projection's three-axis rotation to the specified angles, which must be a two- or
     * three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles
     * in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)
     *
     * __Default value:__ `[0, 0, 0]`
     */
    rotate?: number[];
    /**
     * The projection’s scale (zoom) factor, overriding automatic fitting. The default scale is
     * projection-specific. The scale factor corresponds linearly to the distance between
     * projected points; however, scale factor values are not equivalent across projections.
     */
    scale?: number;
    size?: number[];
    spacing?: number;
    tilt?: number;
    /**
     * The projection’s translation offset as a two-element array `[tx, ty]`.
     */
    translate?: number[];
    /**
     * The cartographic projection to use. This value is case-insensitive, for example
     * `"albers"` and `"Albers"` indicate the same projection type. You can find all valid
     * projection types [in the
     * documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).
     *
     * __Default value:__ `mercator`
     */
    type?: ProjectionType;
}

/**
 * The cartographic projection to use. This value is case-insensitive, for example
 * `"albers"` and `"Albers"` indicate the same projection type. You can find all valid
 * projection types [in the
 * documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).
 *
 * __Default value:__ `mercator`
 */
export enum ProjectionType {
    Albers = 'albers',
    AlbersUsa = 'albersUsa',
    AzimuthalEqualArea = 'azimuthalEqualArea',
    AzimuthalEquidistant = 'azimuthalEquidistant',
    ConicConformal = 'conicConformal',
    ConicEqualArea = 'conicEqualArea',
    ConicEquidistant = 'conicEquidistant',
    EqualEarth = 'equalEarth',
    Equirectangular = 'equirectangular',
    Gnomonic = 'gnomonic',
    Identity = 'identity',
    Mercator = 'mercator',
    NaturalEarth1 = 'naturalEarth1',
    Orthographic = 'orthographic',
    Stereographic = 'stereographic',
    TransverseMercator = 'transverseMercator',
}

/**
 * Scale, axis, and legend resolutions for view composition specifications.
 *
 * Defines how scales, axes, and legends from different specs should be combined. Resolve is
 * a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions.
 * Scales and guides can be resolved to be `"independent"` or `"shared"`.
 */
export interface Resolve {
    axis?: AxisResolveMap;
    legend?: LegendResolveMap;
    scale?: ScaleResolveMap;
}

export interface AxisResolveMap {
    x?: ResolveMode;
    y?: ResolveMode;
}

export enum ResolveMode {
    Independent = 'independent',
    Shared = 'shared',
}

export interface LegendResolveMap {
    angle?: ResolveMode;
    color?: ResolveMode;
    fill?: ResolveMode;
    fillOpacity?: ResolveMode;
    opacity?: ResolveMode;
    shape?: ResolveMode;
    size?: ResolveMode;
    stroke?: ResolveMode;
    strokeDash?: ResolveMode;
    strokeOpacity?: ResolveMode;
    strokeWidth?: ResolveMode;
}

export interface ScaleResolveMap {
    angle?: ResolveMode;
    color?: ResolveMode;
    fill?: ResolveMode;
    fillOpacity?: ResolveMode;
    opacity?: ResolveMode;
    radius?: ResolveMode;
    shape?: ResolveMode;
    size?: ResolveMode;
    stroke?: ResolveMode;
    strokeDash?: ResolveMode;
    strokeOpacity?: ResolveMode;
    strokeWidth?: ResolveMode;
    theta?: ResolveMode;
    x?: ResolveMode;
    y?: ResolveMode;
}

export interface SelectionDef {
    /**
     * When set, a selection is populated by input elements (also known as dynamic query
     * widgets)
     * or by interacting with the corresponding legend. Direct manipulation interaction is
     * disabled by default;
     * to re-enable it, set the selection's
     * [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties)
     * property.
     *
     * Legend bindings are restricted to selections that only specify a single field or
     * encoding.
     *
     * Query widget binding takes the form of Vega's [input element binding
     * definition](https://vega.github.io/vega/docs/signals/#bind)
     * or can be a mapping between projected field/encodings and binding definitions.
     *
     * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
     *
     * When set, a selection is populated by interacting with the corresponding legend. Direct
     * manipulation interaction is disabled by default;
     * to re-enable it, set the selection's
     * [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties)
     * property.
     *
     * Legend bindings are restricted to selections that only specify a single field or
     * encoding.
     *
     * Establishes a two-way binding between the interval selection and the scales
     * used within the same view. This allows a user to interactively pan and
     * zoom the view.
     *
     * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
     */
    bind?: PurpleLegendBinding | PurpleBindCheckbox;
    /**
     * Clears the selection, emptying it of all values. Can be a
     * [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable.
     *
     * __Default value:__ `dblclick`.
     *
     * __See also:__ [`clear`](https://vega.github.io/vega-lite/docs/clear.html) documentation.
     */
    clear?: boolean | ClearDerivedStream | string;
    /**
     * By default, `all` data values are considered to lie within an empty selection.
     * When set to `none`, empty selections contain no data values.
     */
    empty?: Empty;
    /**
     * An array of encoding channels. The corresponding data field values
     * must match for a data tuple to fall within the selection.
     *
     * __See also:__ [`encodings`](https://vega.github.io/vega-lite/docs/project.html)
     * documentation.
     */
    encodings?: SingleDefUnitChannel[];
    /**
     * An array of field names whose values must match for a data tuple to
     * fall within the selection.
     *
     * __See also:__ [`fields`](https://vega.github.io/vega-lite/docs/project.html)
     * documentation.
     */
    fields?: string[];
    /**
     * Initialize the selection with a mapping between [projected channels or field
     * names](https://vega.github.io/vega-lite/docs/project.html) and initial values.
     *
     * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/init.html) documentation.
     *
     * Initialize the selection with a mapping between [projected channels or field
     * names](https://vega.github.io/vega-lite/docs/project.html) and an initial
     * value (or array of values).
     *
     * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/init.html) documentation.
     *
     * Initialize the selection with a mapping between [projected channels or field
     * names](https://vega.github.io/vega-lite/docs/project.html) and arrays of
     * initial values.
     *
     * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/init.html) documentation.
     */
    init?:
        | { [key: string]: boolean | DateTime | number | null | string }[]
        | { [key: string]: Array<boolean | DateTime | number | string> | boolean | DateTime | number | null | string };
    /**
     * When true, an invisible voronoi diagram is computed to accelerate discrete
     * selection. The data value _nearest_ the mouse cursor is added to the selection.
     *
     * __See also:__ [`nearest`](https://vega.github.io/vega-lite/docs/nearest.html)
     * documentation.
     */
    nearest?: boolean;
    /**
     * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or
     * selector) that triggers the selection.
     * For interval selections, the event stream must specify a [start and
     * end](https://vega.github.io/vega/docs/event-streams/#between-filters).
     */
    on?: OnDerivedStream | string;
    /**
     * With layered and multi-view displays, a strategy that determines how
     * selections' data queries are resolved when applied in a filter transform,
     * conditional encoding rule, or scale domain.
     *
     * __See also:__ [`resolve`](https://vega.github.io/vega-lite/docs/selection-resolve.html)
     * documentation.
     */
    resolve?: SelectionResolution;
    /**
     * Determines the default event processing and data query for the selection. Vega-Lite
     * currently supports three selection types:
     *
     * - `"single"` -- to select a single discrete data value on `click`.
     * - `"multi"` -- to select multiple discrete data value; the first value is selected on
     * `click` and additional values toggled on shift-`click`.
     * - `"interval"` -- to select a continuous range of data values on `drag`.
     */
    type: SelectionDefType;
    /**
     * Controls whether data values should be toggled or only ever inserted into
     * multi selections. Can be `true`, `false` (for insertion only), or a
     * [Vega expression](https://vega.github.io/vega/docs/expressions/).
     *
     * __Default value:__ `true`, which corresponds to `event.shiftKey` (i.e.,
     * data values are toggled when a user interacts with the shift-key pressed).
     *
     * Setting the value to the Vega expression `"true"` will toggle data values
     * without the user pressing the shift-key.
     *
     * __See also:__ [`toggle`](https://vega.github.io/vega-lite/docs/toggle.html) documentation.
     */
    toggle?: boolean | string;
    /**
     * An interval selection also adds a rectangle mark to depict the
     * extents of the interval. The `mark` property can be used to customize the
     * appearance of the mark.
     *
     * __See also:__ [`mark`](https://vega.github.io/vega-lite/docs/selection-mark.html)
     * documentation.
     */
    mark?: BrushConfig;
    /**
     * When truthy, allows a user to interactively move an interval selection
     * back-and-forth. Can be `true`, `false` (to disable panning), or a
     * [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)
     * which must include a start and end event to trigger continuous panning.
     *
     * __Default value:__ `true`, which corresponds to
     * `[mousedown, window:mouseup] > window:mousemove!` which corresponds to
     * clicks and dragging within an interval selection to reposition it.
     *
     * __See also:__ [`translate`](https://vega.github.io/vega-lite/docs/translate.html)
     * documentation.
     */
    translate?: boolean | string;
    /**
     * When truthy, allows a user to interactively resize an interval selection.
     * Can be `true`, `false` (to disable zooming), or a [Vega event stream
     * definition](https://vega.github.io/vega/docs/event-streams/). Currently,
     * only `wheel` events are supported.
     *
     * __Default value:__ `true`, which corresponds to `wheel!`.
     *
     * __See also:__ [`zoom`](https://vega.github.io/vega-lite/docs/zoom.html) documentation.
     */
    zoom?: boolean | string;
}

/**
 * Establishes a two-way binding between the interval selection and the scales
 * used within the same view. This allows a user to interactively pan and
 * zoom the view.
 *
 * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
 */
export enum PurpleLegendBinding {
    Legend = 'legend',
    Scales = 'scales',
}

export interface PurpleBindCheckbox {
    debounce?: Binding | number;
    element?: Binding | string;
    input?: Binding | string;
    name?: Binding | string;
    type?: Binding | string;
    labels?: string[] | Binding;
    options?: any[] | Binding;
    max?: Binding | number;
    min?: Binding | number;
    step?: Binding | number;
    autocomplete?: Binding | string;
    placeholder?: Binding | string;
    legend?: PurpleBinding | string;
}

export interface Binding {
    debounce?: number;
    element?: string;
    input?: string;
    name?: string;
    type?: string;
    labels?: string[];
    options?: any[];
    max?: number;
    min?: number;
    step?: number;
    autocomplete?: string;
    placeholder?: string;
}

export interface PurpleBinding {
    debounce?: number;
    element?: string;
    input?: string;
    name?: string;
    type?: string;
    labels?: string[];
    options?: any[];
    max?: number;
    min?: number;
    step?: number;
    autocomplete?: string;
    placeholder?: string;
    between?: Stream[];
    consume?: boolean;
    filter?: string[] | string;
    markname?: string;
    marktype?: MarkType;
    source?: Source;
    throttle?: number;
    stream?: Stream;
    merge?: Stream[];
}

export interface Stream {
    between?: Stream[];
    consume?: boolean;
    debounce?: number;
    filter?: string[] | string;
    markname?: string;
    marktype?: MarkType;
    source?: Source;
    throttle?: number;
    type?: string;
    stream?: Stream;
    merge?: Stream[];
}

export enum MarkType {
    Arc = 'arc',
    Area = 'area',
    Group = 'group',
    Image = 'image',
    Line = 'line',
    Path = 'path',
    Rect = 'rect',
    Rule = 'rule',
    Shape = 'shape',
    Symbol = 'symbol',
    Text = 'text',
    Trail = 'trail',
}

export enum Source {
    Scope = 'scope',
    View = 'view',
    Window = 'window',
}

export interface ClearDerivedStream {
    between?: Stream[];
    consume?: boolean;
    debounce?: number;
    filter?: string[] | string;
    markname?: string;
    marktype?: MarkType;
    source?: Source;
    throttle?: number;
    type?: string;
    stream?: Stream;
    merge?: Stream[];
}

/**
 * By default, `all` data values are considered to lie within an empty selection.
 * When set to `none`, empty selections contain no data values.
 */
export enum Empty {
    All = 'all',
    None = 'none',
}

/**
 * An interval selection also adds a rectangle mark to depict the
 * extents of the interval. The `mark` property can be used to customize the
 * appearance of the mark.
 *
 * __See also:__ [`mark`](https://vega.github.io/vega-lite/docs/selection-mark.html)
 * documentation.
 */
export interface BrushConfig {
    /**
     * The mouse cursor used over the interval mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * The fill color of the interval mark.
     *
     * __Default value:__ `"#333333"`
     */
    fill?: string;
    /**
     * The fill opacity of the interval mark (a value between `0` and `1`).
     *
     * __Default value:__ `0.125`
     */
    fillOpacity?: number;
    /**
     * The stroke color of the interval mark.
     *
     * __Default value:__ `"#ffffff"`
     */
    stroke?: string;
    /**
     * An array of alternating stroke and space lengths, for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) with which to begin drawing the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke opacity of the interval mark (a value between `0` and `1`).
     */
    strokeOpacity?: number;
    /**
     * The stroke width of the interval mark.
     */
    strokeWidth?: number;
}

export interface OnDerivedStream {
    between?: Stream[];
    consume?: boolean;
    debounce?: number;
    filter?: string[] | string;
    markname?: string;
    marktype?: MarkType;
    source?: Source;
    throttle?: number;
    type?: string;
    stream?: Stream;
    merge?: Stream[];
}

/**
 * With layered and multi-view displays, a strategy that determines how
 * selections' data queries are resolved when applied in a filter transform,
 * conditional encoding rule, or scale domain.
 *
 * __See also:__ [`resolve`](https://vega.github.io/vega-lite/docs/selection-resolve.html)
 * documentation.
 */
export enum SelectionResolution {
    Global = 'global',
    Intersect = 'intersect',
    Union = 'union',
}

/**
 * Determines the default event processing and data query for the selection. Vega-Lite
 * currently supports three selection types:
 *
 * - `"single"` -- to select a single discrete data value on `click`.
 * - `"multi"` -- to select multiple discrete data value; the first value is selected on
 * `click` and additional values toggled on shift-`click`.
 * - `"interval"` -- to select a continuous range of data values on `drag`.
 */
export enum SelectionDefType {
    Interval = 'interval',
    Multi = 'multi',
    Single = 'single',
}

export interface TitleParams {
    /**
     * Horizontal text alignment for title text. One of `"left"`, `"center"`, or `"right"`.
     */
    align?: Align;
    /**
     * The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For
     * example, with an orientation of top these anchor positions map to a left-, center-, or
     * right-aligned title.
     *
     * __Default value:__ `"middle"` for
     * [single](https://vega.github.io/vega-lite/docs/spec.html) and
     * [layered](https://vega.github.io/vega-lite/docs/layer.html) views.
     * `"start"` for other composite views.
     *
     * __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only
     * customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and
     * [layered](https://vega.github.io/vega-lite/docs/layer.html) views. For other composite
     * views, `anchor` is always `"start"`.
     */
    anchor?: TitleAnchor | null;
    /**
     * Angle in degrees of title and subtitle text.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG group, removing the
     * title from the ARIA accessibility tree.
     *
     * __Default value:__ `true`
     */
    aria?: boolean;
    /**
     * Vertical text baseline for title and subtitle text. One of `"alphabetic"` (default),
     * `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
     * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
     * relative to the *lineHeight* rather than *fontSize* alone.
     */
    baseline?: Baseline;
    /**
     * Text color for title text.
     */
    color?: null | string;
    /**
     * Delta offset for title and subtitle text x-coordinate.
     */
    dx?: number;
    /**
     * Delta offset for title and subtitle text y-coordinate.
     */
    dy?: number;
    /**
     * Font name for title text.
     */
    font?: string;
    /**
     * Font size in pixels for title text.
     */
    fontSize?: number;
    /**
     * Font style for title text.
     */
    fontStyle?: string;
    /**
     * Font weight for title text.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * The reference frame for the anchor position, one of `"bounds"` (to anchor relative to the
     * full bounding box) or `"group"` (to anchor relative to the group width or height).
     */
    frame?: string;
    /**
     * The maximum allowed length in pixels of title and subtitle text.
     */
    limit?: number;
    /**
     * Line height in pixels for multi-line title text or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    lineHeight?: number;
    /**
     * The orthogonal offset in pixels by which to displace the title group from its position
     * along the edge of the chart.
     */
    offset?: number;
    /**
     * Default title orientation (`"top"`, `"bottom"`, `"left"`, or `"right"`)
     */
    orient?: TitleOrient;
    /**
     * A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply
     * to the title text mark.
     *
     * __Default value:__ `"group-title"`.
     */
    style?: string[] | string;
    /**
     * The subtitle Text.
     */
    subtitle?: string[] | string;
    /**
     * Text color for subtitle text.
     */
    subtitleColor?: null | string;
    /**
     * Font name for subtitle text.
     */
    subtitleFont?: string;
    /**
     * Font size in pixels for subtitle text.
     */
    subtitleFontSize?: number;
    /**
     * Font style for subtitle text.
     */
    subtitleFontStyle?: string;
    /**
     * Font weight for subtitle text.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    subtitleFontWeight?: number | FontWeightEnum;
    /**
     * Line height in pixels for multi-line subtitle text.
     */
    subtitleLineHeight?: number;
    /**
     * The padding in pixels between title and subtitle text.
     */
    subtitlePadding?: number;
    /**
     * The title text.
     */
    text: string[] | string;
    /**
     * The integer z-index indicating the layering of the title group relative to other axis,
     * mark and legend groups.
     *
     * __Default value:__ `0`.
     */
    zindex?: number;
}

/**
 * Default title orientation (`"top"`, `"bottom"`, `"left"`, or `"right"`)
 */
export enum TitleOrient {
    Bottom = 'bottom',
    Left = 'left',
    None = 'none',
    Right = 'right',
    Top = 'top',
}

export interface Transform {
    /**
     * Array of objects that define fields to aggregate.
     */
    aggregate?: AggregatedFieldDef[];
    /**
     * The data fields to group by. If not specified, a single group containing all data objects
     * will be used.
     *
     * An optional array of fields by which to group the values.
     * Imputation will then be performed on a per-group basis.
     *
     * The data fields for partitioning the data objects into separate groups. If unspecified,
     * all data points will be in a single group.
     *
     * The data fields to group by.
     *
     * The data fields for partitioning the data objects into separate windows. If unspecified,
     * all data points will be in a single window.
     *
     * The optional data fields to group by. If not specified, a single group containing all
     * data objects will be used.
     */
    groupby?: string[];
    /**
     * The output fields at which to write the start and end bin values.
     * This can be either a string or an array of strings with two elements denoting the name
     * for the fields for bin start and bin end respectively.
     * If a single string (e.g., `"val"`) is provided, the end field will be `"val_end"`.
     *
     * The field for storing the computed formula value.
     *
     * The output fields for the sample value and corresponding density estimate.
     *
     * __Default value:__ `["value", "density"]`
     *
     * The output field names for extracted array values.
     *
     * __Default value:__ The field name of the corresponding array field
     *
     * The output field names for the key and value properties produced by the fold transform.
     * __Default value:__ `["key", "value"]`
     *
     * The output field names for the smoothed points generated by the loess transform.
     *
     * __Default value:__ The field names of the input x and y values.
     *
     * The output fields on which to store the looked up data values.
     *
     * For data lookups, this property may be left blank if `from.fields`
     * has been specified (those field names will be used); if `from.fields`
     * has not been specified, `as` must be a string.
     *
     * For selection lookups, this property is optional: if unspecified,
     * looked up values will be stored under a property named for the selection;
     * and if specified, it must correspond to `from.fields`.
     *
     * The output field names for the probability and quantile values.
     *
     * __Default value:__ `["prob", "value"]`
     *
     * The output field names for the smoothed points generated by the regression transform.
     *
     * __Default value:__ The field names of the input x and y values.
     *
     * The output field to write the timeUnit value.
     *
     * Output field names. This can be either a string or an array of strings with two elements
     * denoting the name for the fields for stack start and stack end respectively.
     * If a single string(e.g., `"val"`) is provided, the end field will be `"val_end"`.
     */
    as?: string[] | string;
    /**
     * An object indicating bin properties, or simply `true` for using default bin parameters.
     */
    bin?: boolean | BinParams;
    /**
     * The data field to bin.
     *
     * The data field to apply time unit.
     */
    field?: string;
    /**
     * A [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string. Use
     * the variable `datum` to refer to the current data object.
     */
    calculate?: string;
    /**
     * The bandwidth (standard deviation) of the Gaussian kernel. If unspecified or set to zero,
     * the bandwidth value is automatically estimated from the input data using Scott’s rule.
     *
     * A bandwidth parameter in the range `[0, 1]` that determines the amount of smoothing.
     *
     * __Default value:__ `0.3`
     */
    bandwidth?: number;
    /**
     * A boolean flag indicating if the output values should be probability estimates (false) or
     * smoothed counts (true).
     *
     * __Default value:__ `false`
     */
    counts?: boolean;
    /**
     * A boolean flag indicating whether to produce density estimates (false) or cumulative
     * density estimates (true).
     *
     * __Default value:__ `false`
     */
    cumulative?: boolean;
    /**
     * The data field for which to perform density estimation.
     */
    density?: string;
    /**
     * A [min, max] domain from which to sample the distribution. If unspecified, the extent
     * will be determined by the observed minimum and maximum values of the density value
     * field.
     *
     * A [min, max] domain over the independent (x) field for the starting and ending points of
     * the generated trend line.
     */
    extent?: number[];
    /**
     * The maximum number of samples to take along the extent domain for plotting the density.
     *
     * __Default value:__ `200`
     */
    maxsteps?: number;
    /**
     * The minimum number of samples to take along the extent domain for plotting the density.
     *
     * __Default value:__ `25`
     */
    minsteps?: number;
    /**
     * The exact number of samples to take along the extent domain for plotting the density. If
     * specified, overrides both minsteps and maxsteps to set an exact number of uniform
     * samples. Potentially useful in conjunction with a fixed extent to ensure consistent
     * sample points for stacked densities.
     */
    steps?: number;
    /**
     * The `filter` property must be a predication definition, which can takes one of the
     * following forms:
     *
     * 1) an [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string,
     * where `datum` can be used to refer to the current data object.
     * For example, `{filter: "datum.b2 > 60"}` would make the output data includes only items
     * that have values in the field `b2` over 60.
     *
     * 2) one of the [field
     * predicates](https://vega.github.io/vega-lite/docs/predicate.html#field-predicate):
     * [`equal`](https://vega.github.io/vega-lite/docs/predicate.html#field-equal-predicate),
     * [`lt`](https://vega.github.io/vega-lite/docs/predicate.html#lt-predicate),
     * [`lte`](https://vega.github.io/vega-lite/docs/predicate.html#lte-predicate),
     * [`gt`](https://vega.github.io/vega-lite/docs/predicate.html#gt-predicate),
     * [`gte`](https://vega.github.io/vega-lite/docs/predicate.html#gte-predicate),
     * [`range`](https://vega.github.io/vega-lite/docs/predicate.html#range-predicate),
     * [`oneOf`](https://vega.github.io/vega-lite/docs/predicate.html#one-of-predicate),
     * or [`valid`](https://vega.github.io/vega-lite/docs/predicate.html#valid-predicate),
     *
     * 3) a [selection
     * predicate](https://vega.github.io/vega-lite/docs/predicate.html#selection-predicate),
     * which define the names of a selection that the data point should belong to (or a logical
     * composition of selections).
     *
     * 4) a [logical
     * composition](https://vega.github.io/vega-lite/docs/predicate.html#composition) of (1),
     * (2), or (3).
     */
    filter?: Predicate | string;
    /**
     * An array of one or more data fields containing arrays to flatten.
     * If multiple fields are specified, their array values should have a parallel structure,
     * ideally with the same length.
     * If the lengths of parallel arrays do not match,
     * the longest array will be used with `null` values added for missing entries.
     */
    flatten?: string[];
    /**
     * An array of data fields indicating the properties to fold.
     */
    fold?: string[];
    /**
     * A frame specification as a two-element array used to control the window over which the
     * specified method is applied. The array entries should either be a number indicating the
     * offset from the current data object, or null to indicate unbounded rows preceding or
     * following the current data object. For example, the value `[-5, 5]` indicates that the
     * window should include five objects preceding and five objects following the current
     * object.
     *
     * __Default value:__:  `[null, null]` indicating that the window includes all objects.
     *
     * A frame specification as a two-element array indicating how the sliding window should
     * proceed. The array entries should either be a number indicating the offset from the
     * current data object, or null to indicate unbounded rows preceding or following the
     * current data object. The default value is `[null, 0]`, indicating that the sliding window
     * includes the current object and all preceding objects. The value `[-5, 5]` indicates that
     * the window should include five objects preceding and five objects following the current
     * object. Finally, `[null, null]` indicates that the window frame should always include all
     * data objects. If you this frame and want to assign the same value to add objects, you can
     * use the simpler [join aggregate
     * transform](https://vega.github.io/vega-lite/docs/joinaggregate.html). The only operators
     * affected are the aggregation operations and the `first_value`, `last_value`, and
     * `nth_value` window operations. The other window operations are not affected by this.
     *
     * __Default value:__:  `[null, 0]` (includes the current object and all preceding objects)
     */
    frame?: Array<number | null>;
    /**
     * The data field for which the missing values should be imputed.
     */
    impute?: string;
    /**
     * A key field that uniquely identifies data objects within a group.
     * Missing key values (those occurring in the data but not in the current group) will be
     * imputed.
     */
    key?: string;
    /**
     * Defines the key values that should be considered for imputation.
     * An array of key values or an object defining a [number
     * sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).
     *
     * If provided, this will be used in addition to the key values observed within the input
     * data. If not provided, the values will be derived from all unique values of the `key`
     * field. For `impute` in `encoding`, the key field is the x-field if the y-field is
     * imputed, or vice versa.
     *
     * If there is no impute grouping, this property _must_ be specified.
     */
    keyvals?: any[] | ImputeSequence;
    /**
     * The imputation method to use for the field value of imputed data objects.
     * One of `"value"`, `"mean"`, `"median"`, `"max"` or `"min"`.
     *
     * __Default value:__  `"value"`
     *
     * The functional form of the regression model. One of `"linear"`, `"log"`, `"exp"`,
     * `"pow"`, `"quad"`, or `"poly"`.
     *
     * __Default value:__ `"linear"`
     */
    method?: TransformMethod;
    /**
     * The field value to use when the imputation `method` is `"value"`.
     *
     * The data field to populate pivoted fields. The aggregate values of this field become the
     * values of the new pivoted fields.
     */
    value?: any;
    /**
     * The definition of the fields in the join aggregate, and what calculations to use.
     */
    joinaggregate?: JoinAggregateFieldDef[];
    /**
     * The data field of the dependent variable to smooth.
     */
    loess?: string;
    /**
     * The data field of the independent variable to use a predictor.
     */
    on?: string;
    /**
     * The default value to use if lookup fails.
     *
     * __Default value:__ `null`
     */
    default?: string;
    /**
     * Data source or selection for secondary data reference.
     */
    from?: Lookup;
    /**
     * Key in primary data source.
     */
    lookup?: string;
    /**
     * An array of probabilities in the range (0, 1) for which to compute quantile values. If
     * not specified, the *step* parameter will be used.
     */
    probs?: number[];
    /**
     * The data field for which to perform quantile estimation.
     */
    quantile?: string;
    /**
     * A probability step size (default 0.01) for sampling quantile values. All values from
     * one-half the step size up to 1 (exclusive) will be sampled. This parameter is only used
     * if the *probs* parameter is not provided.
     */
    step?: number;
    /**
     * The polynomial order (number of coefficients) for the 'poly' method.
     *
     * __Default value:__ `3`
     */
    order?: number;
    /**
     * A boolean flag indicating if the transform should return the regression model parameters
     * (one object per group), rather than trend line points.
     * The resulting objects include a `coef` array of fitted coefficient values (starting with
     * the intercept term and then including terms of increasing order)
     * and an `rSquared` value (indicating the total variance explained by the model).
     *
     * __Default value:__ `false`
     */
    params?: boolean;
    /**
     * The data field of the dependent variable to predict.
     */
    regression?: string;
    /**
     * The timeUnit.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * The maximum number of data objects to include in the sample.
     *
     * __Default value:__ `1000`
     */
    sample?: number;
    /**
     * Mode for stacking marks. One of `"zero"` (default), `"center"`, or `"normalize"`.
     * The `"zero"` offset will stack starting at `0`. The `"center"` offset will center the
     * stacks. The `"normalize"` offset will compute percentage values for each stack point,
     * with output values in the range `[0,1]`.
     *
     * __Default value:__ `"zero"`
     */
    offset?: StackOffset;
    /**
     * Field that determines the order of leaves in the stacked charts.
     *
     * A sort field definition for sorting data objects within a window. If two data objects are
     * considered equal by the comparator, they are considered "peer" values of equal rank. If
     * sort is not specified, the order is undefined: data objects are processed in the order
     * they are observed and none are considered peers (the ignorePeers parameter is ignored and
     * treated as if set to `true`).
     */
    sort?: SortField[];
    /**
     * The field which is stacked.
     */
    stack?: string;
    /**
     * Indicates if the sliding window frame should ignore peer values (data that are considered
     * identical by the sort criteria). The default is false, causing the window frame to expand
     * to include all peer values. If set to true, the window frame will be defined by offset
     * values only. This setting only affects those operations that depend on the window frame,
     * namely aggregation operations and the first_value, last_value, and nth_value window
     * operations.
     *
     * __Default value:__ `false`
     */
    ignorePeers?: boolean;
    /**
     * The definition of the fields in the window, and what calculations to use.
     */
    window?: WindowFieldDef[];
    /**
     * An optional parameter indicating the maximum number of pivoted fields to generate.
     * The default (`0`) applies no limit. The pivoted `pivot` names are sorted in ascending
     * order prior to enforcing the limit.
     * __Default value:__ `0`
     */
    limit?: number;
    /**
     * The aggregation operation to apply to grouped `value` field values.
     * __Default value:__ `sum`
     */
    op?: string;
    /**
     * The data field to pivot on. The unique values of this field become new field names in the
     * output stream.
     */
    pivot?: string;
}

export interface AggregatedFieldDef {
    /**
     * The output field names to use for each aggregated field.
     */
    as: string;
    /**
     * The data field for which to compute aggregate function. This is required for all
     * aggregation operations except `"count"`.
     */
    field?: string;
    /**
     * The aggregation operation to apply to the fields (e.g., `"sum"`, `"average"`, or
     * `"count"`).
     * See the [full list of supported aggregation
     * operations](https://vega.github.io/vega-lite/docs/aggregate.html#ops)
     * for more information.
     */
    op: AggregateOp;
}

/**
 * The aggregation operation to apply to the fields (e.g., `"sum"`, `"average"`, or
 * `"count"`).
 * See the [full list of supported aggregation
 * operations](https://vega.github.io/vega-lite/docs/aggregate.html#ops)
 * for more information.
 *
 * The aggregation operation to apply (e.g., `"sum"`, `"average"` or `"count"`). See the
 * list of all supported operations
 * [here](https://vega.github.io/vega-lite/docs/aggregate.html#ops).
 */
export enum AggregateOp {
    Argmax = 'argmax',
    Argmin = 'argmin',
    Average = 'average',
    Ci0 = 'ci0',
    Ci1 = 'ci1',
    Count = 'count',
    Distinct = 'distinct',
    Max = 'max',
    Mean = 'mean',
    Median = 'median',
    Min = 'min',
    Missing = 'missing',
    Product = 'product',
    Q1 = 'q1',
    Q3 = 'q3',
    Stderr = 'stderr',
    Stdev = 'stdev',
    Stdevp = 'stdevp',
    Sum = 'sum',
    Valid = 'valid',
    Values = 'values',
    Variance = 'variance',
    Variancep = 'variancep',
}

/**
 * Data source or selection for secondary data reference.
 */
export interface Lookup {
    /**
     * Secondary data source to lookup in.
     */
    data?: Data;
    /**
     * Fields in foreign data or selection to lookup.
     * If not specified, the entire object is queried.
     */
    fields?: string[];
    /**
     * Key in data to lookup.
     */
    key: string;
    /**
     * Selection name to look up.
     */
    selection?: string;
}

/**
 * Secondary data source to lookup in.
 */
export interface Data {
    /**
     * An object that specifies the format for parsing the data.
     */
    format?: DataFormat;
    /**
     * Provide a placeholder name and bind data at runtime.
     */
    name?: string;
    /**
     * An URL from which to load the data set. Use the `format.type` property
     * to ensure the loaded data is correctly parsed.
     */
    url?: string;
    /**
     * The full data set, included inline. This can be an array of objects or primitive values,
     * an object, or a string.
     * Arrays of primitive values are ingested as objects with a `data` property. Strings are
     * parsed according to the specified format type.
     */
    values?: Array<boolean | number | { [key: string]: any } | string> | { [key: string]: any } | string;
    /**
     * Generate a sequence of numbers.
     */
    sequence?: SequenceParams;
    /**
     * Generate sphere GeoJSON data for the full globe.
     */
    sphere?: boolean | SphereClass;
    /**
     * Generate graticule GeoJSON data for geographic reference lines.
     */
    graticule?: boolean | GraticuleParams;
}

export interface JoinAggregateFieldDef {
    /**
     * The output name for the join aggregate operation.
     */
    as: string;
    /**
     * The data field for which to compute the aggregate function. This can be omitted for
     * functions that do not operate over a field such as `"count"`.
     */
    field?: string;
    /**
     * The aggregation operation to apply (e.g., `"sum"`, `"average"` or `"count"`). See the
     * list of all supported operations
     * [here](https://vega.github.io/vega-lite/docs/aggregate.html#ops).
     */
    op: AggregateOp;
}

/**
 * The imputation method to use for the field value of imputed data objects.
 * One of `"value"`, `"mean"`, `"median"`, `"max"` or `"min"`.
 *
 * __Default value:__  `"value"`
 *
 * The functional form of the regression model. One of `"linear"`, `"log"`, `"exp"`,
 * `"pow"`, `"quad"`, or `"poly"`.
 *
 * __Default value:__ `"linear"`
 */
export enum TransformMethod {
    Exp = 'exp',
    Linear = 'linear',
    Log = 'log',
    Max = 'max',
    Mean = 'mean',
    Median = 'median',
    Min = 'min',
    Poly = 'poly',
    Pow = 'pow',
    Quad = 'quad',
    Value = 'value',
}

/**
 * A sort definition for transform
 */
export interface SortField {
    /**
     * The name of the field to sort.
     */
    field: string;
    /**
     * Whether to sort the field in ascending or descending order. One of `"ascending"`
     * (default), `"descending"`, or `null` (no not sort).
     */
    order?: SortOrder | null;
}

export interface WindowFieldDef {
    /**
     * The output name for the window operation.
     */
    as: string;
    /**
     * The data field for which to compute the aggregate or window function. This can be omitted
     * for window functions that do not operate over a field such as `"count"`, `"rank"`,
     * `"dense_rank"`.
     */
    field?: string;
    /**
     * The window or aggregation operation to apply within a window (e.g., `"rank"`, `"lead"`,
     * `"sum"`, `"average"` or `"count"`). See the list of all supported operations
     * [here](https://vega.github.io/vega-lite/docs/window.html#ops).
     */
    op: Op;
    /**
     * Parameter values for the window functions. Parameter values can be omitted for operations
     * that do not accept a parameter.
     *
     * See the list of all supported operations and their parameters
     * [here](https://vega.github.io/vega-lite/docs/transforms/window.html).
     */
    param?: number;
}

/**
 * The window or aggregation operation to apply within a window (e.g., `"rank"`, `"lead"`,
 * `"sum"`, `"average"` or `"count"`). See the list of all supported operations
 * [here](https://vega.github.io/vega-lite/docs/window.html#ops).
 *
 * The aggregation operation to apply to the fields (e.g., `"sum"`, `"average"`, or
 * `"count"`).
 * See the [full list of supported aggregation
 * operations](https://vega.github.io/vega-lite/docs/aggregate.html#ops)
 * for more information.
 *
 * The aggregation operation to apply (e.g., `"sum"`, `"average"` or `"count"`). See the
 * list of all supported operations
 * [here](https://vega.github.io/vega-lite/docs/aggregate.html#ops).
 */
export enum Op {
    Argmax = 'argmax',
    Argmin = 'argmin',
    Average = 'average',
    Ci0 = 'ci0',
    Ci1 = 'ci1',
    Count = 'count',
    CumeDist = 'cume_dist',
    DenseRank = 'dense_rank',
    Distinct = 'distinct',
    FirstValue = 'first_value',
    Lag = 'lag',
    LastValue = 'last_value',
    Lead = 'lead',
    Max = 'max',
    Mean = 'mean',
    Median = 'median',
    Min = 'min',
    Missing = 'missing',
    NthValue = 'nth_value',
    Ntile = 'ntile',
    PercentRank = 'percent_rank',
    Product = 'product',
    Q1 = 'q1',
    Q3 = 'q3',
    Rank = 'rank',
    RowNumber = 'row_number',
    Stderr = 'stderr',
    Stdev = 'stdev',
    Stdevp = 'stdevp',
    Sum = 'sum',
    Valid = 'valid',
    Values = 'values',
    Variance = 'variance',
    Variancep = 'variancep',
}

/**
 * An object defining the view background's fill and stroke.
 *
 * __Default value:__ none (transparent)
 *
 * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
 */
export interface ViewBackground {
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The mouse cursor used over the view. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * The fill color.
     *
     * __Default value:__ `undefined`
     */
    fill?: null | string;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * The stroke color.
     *
     * __Default value:__ `"#ddd"`
     */
    stroke?: null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * A string or array of strings indicating the name of custom styles to apply to the view
     * background. A style is a named collection of mark property defaults defined within the
     * [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If
     * style is an array, later styles will override earlier styles.
     *
     * __Default value:__ `"cell"`
     * __Note:__ Any specified view background properties will augment the default style.
     */
    style?: string[] | string;
}

/**
 * Definition for fields to be repeated. One of:
 * 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be
 * referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row.
 * You can set the number of columns to control the wrapping.
 * 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated
 * along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat":
 * "column"}` can be used to refer to the repeated field respectively.
 */
export interface RepeatMapping {
    /**
     * An array of fields to be repeated horizontally.
     */
    column?: string[];
    /**
     * An array of fields to be repeated vertically.
     */
    row?: string[];
    /**
     * An array of fields to be repeated as layers.
     */
    layer?: string[];
}

/**
 * A specification of the view that gets repeated.
 *
 * Any specification in Vega-Lite.
 *
 * Unit spec that can have a composite mark and row or column channels (shorthand for a
 * facet spec).
 *
 * A full layered plot specification, which may contains `encoding` and `projection`
 * properties that will be applied to underlying unit (single-view) specifications.
 *
 * Base interface for a repeat specification.
 *
 * Base interface for a facet specification.
 *
 * Base interface for a generalized concatenation specification.
 *
 * Base interface for a vertical concatenation specification.
 *
 * Base interface for a horizontal concatenation specification.
 */
export interface Spec {
    /**
     * The alignment to apply to grid rows and columns.
     * The supported string values are `"all"`, `"each"`, and `"none"`.
     *
     * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed
     * one after the other.
     * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or
     * column may be of variable size.
     * - For `"all"`, subviews will be aligned and each row or column will be sized identically
     * based on the maximum observed size. String values for this property will be applied to
     * both grid rows and columns.
     *
     * Alternatively, an object value of the form `{"row": string, "column": string}` can be
     * used to supply different alignments for rows and columns.
     *
     * __Default value:__ `"all"`.
     */
    align?: RowColLayoutAlign | LayoutAlign;
    /**
     * The bounds calculation method to use for determining the extent of a sub-plot. One of
     * `full` (the default) or `flush`.
     *
     * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will
     * be used.
     * - If set to `flush`, only the specified width and height values for the sub-view will be
     * used. The `flush` setting can be useful when attempting to place sub-plots without axes
     * or legends into a uniform grid structure.
     *
     * __Default value:__ `"full"`
     */
    bounds?: LayoutBounds;
    /**
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply
     * different centering values for rows and columns.
     *
     * __Default value:__ `false`
     *
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * __Default value:__ `false`
     */
    center?: boolean | RowColBoolean;
    /**
     * An object describing the data source. Set to `null` to ignore the parent's data source.
     * If no data is set, it is derived from the parent.
     */
    data?: URLData | null;
    /**
     * Description of this mark for commenting purpose.
     */
    description?: string;
    /**
     * A key-value mapping between encoding channels and definition of fields.
     *
     * A shared key-value mapping between encoding channels and definition of fields in the
     * underlying layers.
     */
    encoding?: EdEncoding;
    /**
     * The height of a visualization.
     *
     * - For a plot with a continuous y-field, height should be a number.
     * - For a plot with either a discrete y-field or no y-field, height can be either a number
     * indicating a fixed height or an object in the form of `{step: number}` defining the
     * height per discrete step. (No y-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on height, it should be set to `"container"`.
     *
     * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous
     * y-field and `config.view.discreteHeight` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * height of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     */
    height?: Step | number | HeightEnum;
    /**
     * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`,
     * `"line"`,
     * `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition
     * object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
     */
    mark?: Def | BoxPlot;
    /**
     * Name of the visualization for later reference.
     */
    name?: string;
    /**
     * An object defining properties of geographic projection, which will be applied to `shape`
     * path for `"geoshape"` marks
     * and to `latitude` and `"longitude"` channels for other marks.
     *
     * An object defining properties of the geographic projection shared by underlying layers.
     */
    projection?: Projection;
    /**
     * Scale, axis, and legend resolutions for view composition specifications.
     */
    resolve?: Resolve;
    /**
     * A key-value mapping between selection names and definitions.
     */
    selection?: { [key: string]: SelectionDef };
    /**
     * The spacing in pixels between sub-views of the composition operator.
     * An object of the form `{"row": number, "column": number}` can be used to set
     * different spacing values for rows and columns.
     *
     * __Default value__: Depends on `"spacing"` property of [the view composition
     * configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by
     * default)
     *
     * The spacing in pixels between sub-views of the concat operator.
     *
     * __Default value__: `10`
     */
    spacing?: RowColNumber | number;
    /**
     * Title for the plot.
     */
    title?: string[] | TitleParams | string;
    /**
     * An array of data transformations such as filter and new field calculation.
     */
    transform?: Transform[];
    /**
     * An object defining the view background's fill and stroke.
     *
     * __Default value:__ none (transparent)
     */
    view?: ViewBackground;
    /**
     * The width of a visualization.
     *
     * - For a plot with a continuous x-field, width should be a number.
     * - For a plot with either a discrete x-field or no x-field, width can be either a number
     * indicating a fixed width or an object in the form of `{step: number}` defining the width
     * per discrete step. (No x-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on width, it should be set to `"container"`.
     *
     * __Default value:__
     * Based on `config.view.continuousWidth` for a plot with a continuous x-field and
     * `config.view.discreteWidth` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * width of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     */
    width?: Step | number | HeightEnum;
    /**
     * Layer or single view specifications to be layered.
     *
     * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as
     * layering facet specifications is not allowed. Instead, use the [facet
     * operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a
     * facet.
     */
    layer?: LayerElement[];
    /**
     * The number of columns to include in the view composition layout.
     *
     * __Default value__: `undefined` -- An infinite number of columns (a single row) will be
     * assumed. This is equivalent to
     * `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
     *
     * __Note__:
     *
     * 1) This property is only for:
     * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
     * - the `facet` and `repeat` operator with one field/repetition definition (without
     * row/column nesting)
     *
     * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using
     * the `row` channel (for `facet` and `repeat`).
     */
    columns?: number;
    /**
     * Definition for fields to be repeated. One of:
     * 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be
     * referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row.
     * You can set the number of columns to control the wrapping.
     * 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated
     * along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat":
     * "column"}` can be used to refer to the repeated field respectively.
     */
    repeat?: string[] | RepeatMapping;
    /**
     * A specification of the view that gets repeated.
     *
     * A specification of the view that gets faceted.
     */
    spec?: NormalizedSpecSpec;
    /**
     * Definition for how to facet the data. One of:
     * 1) [a field definition for faceting the plot by one
     * field](https://vega.github.io/vega-lite/docs/facet.html#field-def)
     * 2) [An object that maps `row` and `column` channels to their field
     * definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
     */
    facet?: FacetFieldName;
    /**
     * A list of views to be concatenated.
     */
    concat?: Spec[];
    /**
     * A list of views to be concatenated and put into a column.
     */
    vconcat?: Spec[];
    /**
     * A list of views to be concatenated and put into a row.
     */
    hconcat?: Spec[];
}

/**
 * A specification of the view that gets repeated.
 *
 * Any specification in Vega-Lite.
 *
 * Unit spec that can have a composite mark and row or column channels (shorthand for a
 * facet spec).
 *
 * A full layered plot specification, which may contains `encoding` and `projection`
 * properties that will be applied to underlying unit (single-view) specifications.
 *
 * Base interface for a repeat specification.
 *
 * Base interface for a facet specification.
 *
 * Base interface for a generalized concatenation specification.
 *
 * Base interface for a vertical concatenation specification.
 *
 * Base interface for a horizontal concatenation specification.
 *
 * A unit specification, which can contain either [primitive marks or composite
 * marks](https://vega.github.io/vega-lite/docs/mark.html#types).
 *
 * A specification of the view that gets faceted.
 */
export interface NormalizedSpecSpec {
    /**
     * The alignment to apply to grid rows and columns.
     * The supported string values are `"all"`, `"each"`, and `"none"`.
     *
     * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed
     * one after the other.
     * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or
     * column may be of variable size.
     * - For `"all"`, subviews will be aligned and each row or column will be sized identically
     * based on the maximum observed size. String values for this property will be applied to
     * both grid rows and columns.
     *
     * Alternatively, an object value of the form `{"row": string, "column": string}` can be
     * used to supply different alignments for rows and columns.
     *
     * __Default value:__ `"all"`.
     */
    align?: RowColLayoutAlign | LayoutAlign;
    /**
     * The bounds calculation method to use for determining the extent of a sub-plot. One of
     * `full` (the default) or `flush`.
     *
     * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will
     * be used.
     * - If set to `flush`, only the specified width and height values for the sub-view will be
     * used. The `flush` setting can be useful when attempting to place sub-plots without axes
     * or legends into a uniform grid structure.
     *
     * __Default value:__ `"full"`
     */
    bounds?: LayoutBounds;
    /**
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply
     * different centering values for rows and columns.
     *
     * __Default value:__ `false`
     *
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * __Default value:__ `false`
     */
    center?: boolean | RowColBoolean;
    /**
     * An object describing the data source. Set to `null` to ignore the parent's data source.
     * If no data is set, it is derived from the parent.
     */
    data?: URLData | null;
    /**
     * Description of this mark for commenting purpose.
     */
    description?: string;
    /**
     * A key-value mapping between encoding channels and definition of fields.
     *
     * A shared key-value mapping between encoding channels and definition of fields in the
     * underlying layers.
     */
    encoding?: SpecEncoding;
    /**
     * The height of a visualization.
     *
     * - For a plot with a continuous y-field, height should be a number.
     * - For a plot with either a discrete y-field or no y-field, height can be either a number
     * indicating a fixed height or an object in the form of `{step: number}` defining the
     * height per discrete step. (No y-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on height, it should be set to `"container"`.
     *
     * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous
     * y-field and `config.view.discreteHeight` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * height of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     *
     * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
     */
    height?: Step | number | HeightEnum;
    /**
     * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`,
     * `"line"`,
     * `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition
     * object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
     */
    mark?: Def | BoxPlot;
    /**
     * Name of the visualization for later reference.
     */
    name?: string;
    /**
     * An object defining properties of geographic projection, which will be applied to `shape`
     * path for `"geoshape"` marks
     * and to `latitude` and `"longitude"` channels for other marks.
     *
     * An object defining properties of the geographic projection shared by underlying layers.
     */
    projection?: Projection;
    /**
     * Scale, axis, and legend resolutions for view composition specifications.
     */
    resolve?: Resolve;
    /**
     * A key-value mapping between selection names and definitions.
     */
    selection?: { [key: string]: SelectionDef };
    /**
     * The spacing in pixels between sub-views of the composition operator.
     * An object of the form `{"row": number, "column": number}` can be used to set
     * different spacing values for rows and columns.
     *
     * __Default value__: Depends on `"spacing"` property of [the view composition
     * configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by
     * default)
     *
     * The spacing in pixels between sub-views of the concat operator.
     *
     * __Default value__: `10`
     */
    spacing?: RowColNumber | number;
    /**
     * Title for the plot.
     */
    title?: string[] | TitleParams | string;
    /**
     * An array of data transformations such as filter and new field calculation.
     */
    transform?: Transform[];
    /**
     * An object defining the view background's fill and stroke.
     *
     * __Default value:__ none (transparent)
     *
     * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
     */
    view?: ViewBackground;
    /**
     * The width of a visualization.
     *
     * - For a plot with a continuous x-field, width should be a number.
     * - For a plot with either a discrete x-field or no x-field, width can be either a number
     * indicating a fixed width or an object in the form of `{step: number}` defining the width
     * per discrete step. (No x-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on width, it should be set to `"container"`.
     *
     * __Default value:__
     * Based on `config.view.continuousWidth` for a plot with a continuous x-field and
     * `config.view.discreteWidth` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * width of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     *
     * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
     */
    width?: Step | number | HeightEnum;
    /**
     * Layer or single view specifications to be layered.
     *
     * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as
     * layering facet specifications is not allowed. Instead, use the [facet
     * operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a
     * facet.
     */
    layer?: LayerElement[];
    /**
     * The number of columns to include in the view composition layout.
     *
     * __Default value__: `undefined` -- An infinite number of columns (a single row) will be
     * assumed. This is equivalent to
     * `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
     *
     * __Note__:
     *
     * 1) This property is only for:
     * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
     * - the `facet` and `repeat` operator with one field/repetition definition (without
     * row/column nesting)
     *
     * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using
     * the `row` channel (for `facet` and `repeat`).
     */
    columns?: number;
    /**
     * Definition for fields to be repeated. One of:
     * 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be
     * referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row.
     * You can set the number of columns to control the wrapping.
     * 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated
     * along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat":
     * "column"}` can be used to refer to the repeated field respectively.
     */
    repeat?: string[] | RepeatMapping;
    /**
     * A specification of the view that gets repeated.
     *
     * A specification of the view that gets faceted.
     */
    spec?: NormalizedSpecSpec;
    /**
     * Definition for how to facet the data. One of:
     * 1) [a field definition for faceting the plot by one
     * field](https://vega.github.io/vega-lite/docs/facet.html#field-def)
     * 2) [An object that maps `row` and `column` channels to their field
     * definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
     */
    facet?: FacetFieldName;
    /**
     * A list of views to be concatenated.
     */
    concat?: Spec[];
    /**
     * A list of views to be concatenated and put into a column.
     */
    vconcat?: Spec[];
    /**
     * A list of views to be concatenated and put into a row.
     */
    hconcat?: Spec[];
}

/**
 * Definition for how to facet the data. One of:
 * 1) [a field definition for faceting the plot by one
 * field](https://vega.github.io/vega-lite/docs/facet.html#field-def)
 * 2) [An object that maps `row` and `column` channels to their field
 * definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
 *
 * A field definition for the horizontal facet of trellis plots.
 *
 * A field definition for the vertical facet of trellis plots.
 */
export interface FacetFieldName {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: string;
    /**
     * An object defining properties of a facet's header.
     */
    header?: Header;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` is not supported for `row` and `column`.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortFieldFieldName | SortOrder | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
    /**
     * A field definition for the horizontal facet of trellis plots.
     */
    column?: FacetFieldDefFieldName;
    /**
     * A field definition for the vertical facet of trellis plots.
     */
    row?: FacetFieldDefFieldName;
}

/**
 * A field definition for the horizontal facet of trellis plots.
 *
 * A field definition for the vertical facet of trellis plots.
 */
export interface FacetFieldDefFieldName {
    /**
     * Aggregation function for the field
     * (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html)
     * documentation.
     */
    aggregate?: ArgmDef | NonArgAggregateOp;
    /**
     * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of
     * [band scales](https://vega.github.io/vega-lite/docs/scale.html#band), bins or time units.
     * If set to `1`, the mark size is set to the bandwidth, the bin interval, or the time unit
     * interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit
     * interval.
     *
     * For other marks, relative position on a band of a stacked, binned, time unit or band
     * scale. If set to `0`, the marks will be positioned at the beginning of the band. If set
     * to `0.5`, the marks will be positioned in the middle of the band.
     */
    band?: number;
    /**
     * A flag for binning a `quantitative` field, [an object defining binning
     * parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that
     * the data for `x` or `y` channel are binned before they are imported into Vega-Lite
     * (`"binned"`).
     *
     * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html)
     * will be applied.
     *
     * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already
     * binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or
     * `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust
     * the axis ticks based on the bin step, you can also set the axis's
     * [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
     *
     * __Default value:__ `false`
     *
     * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
     */
    bin?: boolean | BinParams | null;
    /**
     * __Required.__ A string defining the name of the field from which to pull a data value
     * or an object defining iterated values from the
     * [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
     *
     * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
     *
     * __Notes:__
     * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g.,
     * `"field": "foo.bar"` and `"field": "foo['bar']"`).
     * If field names contain dots or brackets but are not nested, you can use `\\` to escape
     * dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`).
     * See more details about escaping in the [field
     * documentation](https://vega.github.io/vega-lite/docs/field.html).
     * 2) `field` is not required if `aggregate` is `count`.
     */
    field?: string;
    /**
     * An object defining properties of a facet's header.
     */
    header?: Header;
    /**
     * Sort order for the encoded field.
     *
     * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or
     * `"descending"`.
     *
     * For discrete fields, `sort` can be one of the following:
     * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in
     * JavaScript.
     * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field)
     * for sorting by another field.
     * - [An array specifying the field values in preferred
     * order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the
     * sort order will obey the values in the array, followed by any unspecified values in their
     * original order. For discrete time field, values in the sort array can be [date-time
     * definition objects](types#datetime). In addition, for time units `"month"` and `"day"`,
     * the values can be the month or day names (case insensitive) or their 3-letter initials
     * (e.g., `"Mon"`, `"Tue"`).
     * - `null` indicating no sort.
     *
     * __Default value:__ `"ascending"`
     *
     * __Note:__ `null` is not supported for `row` and `column`.
     */
    sort?: Array<boolean | DateTime | number | string> | EncodingSortFieldFieldName | SortOrder | null;
    /**
     * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.
     * or [a temporal field that gets casted as
     * ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
     *
     * __Default value:__ `undefined` (None)
     *
     * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html)
     * documentation.
     */
    timeUnit?: TimeUnitParams | TimeUnit;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for
     * the encoded field or constant value (`datum`).
     * It can also be a `"geojson"` type for encoding
     * ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
     *
     * Since Vega-Lite 4.14.0, Vega-Lite automatically infers data types in many cases as
     * discussed below. However, type is required for a field if:
     * (1) the field is not nominal and the field encoding has no specified `aggregate` (except
     * `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit`
     * or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
     *
     * __Default value:__
     *
     * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has
     * `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the
     * following criteria:
     * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or
     * `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or
     * `longitude` channel or (3) if the specified scale type is [a quantitative
     * scale](https://vega.github.io/vega-lite/docs/scale.html#type).
     * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2)
     * the specified scale type is a time or utc scale
     * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort`
     * order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order) or
     * (2) the specified scale type is an ordinal/point/band scale.
     *
     * 2) For a constant value in data domain (`datum`):
     * - `"quantitative"` if the datum is a number
     * - `"nominal"` if the datum is a string
     * - `"temporal"` if the datum is [a date time
     * object](https://vega.github.io/vega-lite/docs/datetime.html)
     *
     * __Note:__
     * - Data `type` describes the semantics of the data rather than the primitive data types
     * (number, string, etc.). The same primitive data type can have different types of
     * measurement. For example, numeric data can represent quantitative, ordinal, or nominal
     * data.
     * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07
     * 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g.,
     * `1552199579097`).
     * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type`
     * property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"`
     * (for using an ordinal bin
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the
     * `type` property can be either `"temporal"` (default, for using a temporal scale) or
     * [`"ordinal"` (for using an ordinal
     * scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
     * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html),
     * the `type` property refers to the post-aggregation data type. For example, we can
     * calculate count `distinct` of a categorical field `"cat"` using `{"aggregate":
     * "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
     * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they
     * must have exactly the same type as their primary channels (e.g., `x`, `y`).
     *
     * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
     */
    type?: StandardType;
}

/**
 * A sort definition for sorting a discrete scale in an encoding field definition.
 */
export interface EncodingSortFieldFieldName {
    /**
     * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.
     *
     * __Default value:__ If unspecified, defaults to the field specified in the outer data
     * reference.
     */
    field?: string;
    /**
     * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to
     * perform on the field prior to sorting (e.g., `"count"`, `"mean"` and `"median"`).
     * An aggregation is required when there are multiple values of the sort field for each
     * encoded data field.
     * The input data objects will be aggregated, grouped by the encoded data field.
     *
     * For a full list of operations, please see the documentation for
     * [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).
     *
     * __Default value:__ `"sum"` for stacked plots. Otherwise, `"min"`.
     */
    op?: NonArgAggregateOp;
    /**
     * The sort order. One of `"ascending"` (default), `"descending"`, or `null` (no not sort).
     */
    order?: SortOrder | null;
}

/**
 * A key-value mapping between encoding channels and definition of fields.
 *
 * A shared key-value mapping between encoding channels and definition of fields in the
 * underlying layers.
 */
export interface SpecEncoding {
    /**
     * Rotation angle of point and text marks.
     */
    angle?: AngleClass;
    /**
     * Color of the marks – either fill or stroke color based on  the `filled` property of mark
     * definition.
     * By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,
     * `"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and
     * `"point"`.
     *
     * __Default value:__ If undefined, the default color depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
     * property.
     *
     * _Note:_
     * 1) For fine-grained control over both fill and stroke colors of the marks, please use the
     * `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence
     * than `color`, thus may override the `color` encoding if conflicting encodings are
     * specified.
     * 2) See the scale documentation for more information about customizing [color
     * scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).
     */
    color?: ColorClass;
    /**
     * A field definition for the horizontal facet of trellis plots.
     */
    column?: RowColumnEncodingFieldDef;
    /**
     * A text description of this mark for ARIA accessibility (SVG output only). For SVG output
     * the `"aria-label"` attribute will be set to this description.
     */
    description?: DescriptionClass;
    /**
     * Additional levels of detail for grouping data in aggregate views and
     * in line, trail, and area marks without mapping data to a specific visual channel.
     */
    detail?: TypedFieldDef[] | TypedFieldDef;
    /**
     * A field definition for the (flexible) facet of trellis plots.
     *
     * If either `row` or `column` is specified, this channel will be ignored.
     */
    facet?: FacetEncodingFieldDef;
    /**
     * Fill color of the marks.
     * __Default value:__ If undefined, the default color depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
     * property.
     *
     * _Note:_ The `fill` encoding has higher precedence than `color`, thus may override the
     * `color` encoding if conflicting encodings are specified.
     */
    fill?: FillClass;
    /**
     * Fill opacity of the marks.
     *
     * __Default value:__ If undefined, the default opacity depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity`
     * property.
     */
    fillOpacity?: FillOpacityClass;
    /**
     * A URL to load upon mouse click.
     */
    href?: HrefClass;
    /**
     * A data field to use as a unique key for data binding. When a visualization’s data is
     * updated, the key value will be used to match data elements to existing mark instances.
     * Use a key channel to enable object constancy for transitions over dynamic data.
     */
    key?: KeyClass;
    /**
     * Latitude position of geographically projected marks.
     */
    latitude?: LatitudeClass;
    /**
     * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and
     * `"rule"`.
     */
    latitude2?: Latitude2Class;
    /**
     * Longitude position of geographically projected marks.
     */
    longitude?: LongitudeClass;
    /**
     * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`,
     * and  `"rule"`.
     */
    longitude2?: Longitude2Class;
    /**
     * Opacity of the marks.
     *
     * __Default value:__ If undefined, the default opacity depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity`
     * property.
     */
    opacity?: OpacityClass;
    /**
     * Order of the marks.
     * - For stacked marks, this `order` channel encodes [stack
     * order](https://vega.github.io/vega-lite/docs/stack.html#order).
     * - For line and trail marks, this `order` channel encodes order of data points in the
     * lines. This can be useful for creating [a connected
     * scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html).
     * Setting `order` to `{"value": null}` makes the line marks use the original order in the
     * data sources.
     * - Otherwise, this `order` channel encodes layer order of the marks.
     *
     * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating
     * additional aggregation grouping.
     */
    order?: OrderFieldDef[] | OrderDef;
    /**
     * The outer radius in pixels of arc marks.
     */
    radius?: RadiusClass;
    /**
     * The inner radius in pixels of arc marks.
     */
    radius2?: Radius2Class;
    /**
     * A field definition for the vertical facet of trellis plots.
     */
    row?: RowColumnEncodingFieldDef;
    /**
     * Shape of the mark.
     *
     * 1. For `point` marks the supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * 2. For `geoshape` marks it should be a field definition of the geojson data
     *
     * __Default value:__ If undefined, the default shape depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s `shape`
     * property. (`"circle"` if unset.)
     */
    shape?: MarkPropDefStringNullTypeForShape;
    /**
     * Size of the mark.
     * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
     * - For `"bar"` and `"tick"` – the bar and tick's size.
     * - For `"text"` – the text's font size.
     * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of
     * line with varying size)
     */
    size?: SizeClass;
    /**
     * Stroke color of the marks.
     * __Default value:__ If undefined, the default color depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color`
     * property.
     *
     * _Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the
     * `color` encoding if conflicting encodings are specified.
     */
    stroke?: StrokeClass;
    /**
     * Stroke dash of the marks.
     *
     * __Default value:__ `[1,0]` (No dash).
     */
    strokeDash?: MarkPropDefNumber;
    /**
     * Stroke opacity of the marks.
     *
     * __Default value:__ If undefined, the default opacity depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity`
     * property.
     */
    strokeOpacity?: StrokeOpacityClass;
    /**
     * Stroke width of the marks.
     *
     * __Default value:__ If undefined, the default stroke width depends on [mark
     * config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth`
     * property.
     */
    strokeWidth?: StrokeWidthClass;
    /**
     * Text of the `text` mark.
     */
    text?: TextDef;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: ThetaClass;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: Theta2Class;
    /**
     * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the
     * `tooltip` property in the mark
     * definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip in Vega-Lite.
     */
    tooltip?: StringFieldDef[] | FieldOrDatumDefWithConditionStringFieldDefString | null;
    /**
     * The URL of an image mark.
     */
    url?: URLClass;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: XClass;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: X2Class;
    /**
     * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    xError?: XErrorClass;
    /**
     * Secondary error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    xError2?: XError2Class;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: YClass;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: Y2Class;
    /**
     * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    yError?: YErrorClass;
    /**
     * Secondary error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
     */
    yError2?: YError2Class;
}

/**
 * Vega-Lite configuration object. This property can only be defined at the top-level of a
 * specification.
 */
export interface Config {
    /**
     * Arc-specific Config
     */
    arc?: RectConfig;
    /**
     * Area-Specific Config
     */
    area?: AreaConfig;
    /**
     * A boolean flag indicating if ARIA default attributes should be included for marks and
     * guides (SVG output only). If false, the `"aria-hidden"` attribute will be set for all
     * guides, removing them from the ARIA accessibility tree and Vega-Lite will not generate
     * default descriptions for marks.
     *
     * __Default value:__ `true`.
     */
    aria?: boolean;
    /**
     * How the visualization size should be determined. If a string, should be one of `"pad"`,
     * `"fit"` or `"none"`.
     * Object values can additionally specify parameters for content sizing and automatic
     * resizing.
     *
     * __Default value__: `pad`
     */
    autosize?: AutoSizeParams | AutosizeType;
    /**
     * Axis configuration, which determines default properties for all `x` and `y`
     * [axes](https://vega.github.io/vega-lite/docs/axis.html). For a full list of axis
     * configuration options, please see the [corresponding section of the axis
     * documentation](https://vega.github.io/vega-lite/docs/axis.html#config).
     */
    axis?: AxisConfig;
    /**
     * Config for axes with "band" scales.
     */
    axisBand?: AxisConfig;
    /**
     * Config for x-axis along the bottom edge of the chart.
     */
    axisBottom?: AxisConfig;
    /**
     * Config for axes with "point" or "band" scales.
     */
    axisDiscrete?: AxisConfig;
    /**
     * Config for y-axis along the left edge of the chart.
     */
    axisLeft?: AxisConfig;
    /**
     * Config for axes with "point" scales.
     */
    axisPoint?: AxisConfig;
    /**
     * Config for quantitative axes.
     */
    axisQuantitative?: AxisConfig;
    /**
     * Config for y-axis along the right edge of the chart.
     */
    axisRight?: AxisConfig;
    /**
     * Config for temporal axes.
     */
    axisTemporal?: AxisConfig;
    /**
     * Config for x-axis along the top edge of the chart.
     */
    axisTop?: AxisConfig;
    /**
     * X-axis specific config.
     */
    axisX?: AxisConfig;
    /**
     * Config for x-axes with "band" scales.
     */
    axisXBand?: AxisConfig;
    /**
     * Config for x-axes with "point" or "band" scales.
     */
    axisXDiscrete?: AxisConfig;
    /**
     * Config for x-axes with "point" scales.
     */
    axisXPoint?: AxisConfig;
    /**
     * Config for x-quantitative axes.
     */
    axisXQuantitative?: AxisConfig;
    /**
     * Config for x-temporal axes.
     */
    axisXTemporal?: AxisConfig;
    /**
     * Y-axis specific config.
     */
    axisY?: AxisConfig;
    /**
     * Config for y-axes with "band" scales.
     */
    axisYBand?: AxisConfig;
    /**
     * Config for y-axes with "point" or "band" scales.
     */
    axisYDiscrete?: AxisConfig;
    /**
     * Config for y-axes with "point" scales.
     */
    axisYPoint?: AxisConfig;
    /**
     * Config for y-quantitative axes.
     */
    axisYQuantitative?: AxisConfig;
    /**
     * Config for y-temporal axes.
     */
    axisYTemporal?: AxisConfig;
    /**
     * CSS color property to use as the background of the entire view.
     *
     * __Default value:__ `"white"`
     */
    background?: string;
    /**
     * Bar-Specific Config
     */
    bar?: BarConfig;
    /**
     * Box Config
     */
    boxplot?: BoxPlotConfig;
    /**
     * Circle-Specific Config
     */
    circle?: MarkConfig;
    /**
     * Default configuration for all concatenation and repeat view composition operators
     * (`concat`, `hconcat`, `vconcat`, and `repeat`)
     */
    concat?: CompositionConfig;
    /**
     * Default axis and legend title for count fields.
     *
     * __Default value:__ `'Count of Records`.
     */
    countTitle?: string;
    /**
     * Allow the `formatType` property for text marks and guides to accept a custom formatter
     * function [registered as a Vega
     * expression](https://vega.github.io/vega-lite/usage/compile.html#format-type).
     */
    customFormatTypes?: boolean;
    /**
     * ErrorBand Config
     */
    errorband?: ErrorBandConfig;
    /**
     * ErrorBar Config
     */
    errorbar?: ErrorBarConfig;
    /**
     * Default configuration for the `facet` view composition operator
     */
    facet?: CompositionConfig;
    /**
     * Defines how Vega-Lite generates title for fields. There are three possible styles:
     * - `"verbal"` (Default) - displays function in a verbal style (e.g., "Sum of field",
     * "Year-month of date", "field (binned)").
     * - `"function"` - displays function using parentheses and capitalized texts (e.g.,
     * "SUM(field)", "YEARMONTH(date)", "BIN(field)").
     * - `"plain"` - displays only the field name without functions (e.g., "field", "date",
     * "field").
     */
    fieldTitle?: FieldTitle;
    /**
     * Default font for all text marks, titles, and labels.
     */
    font?: string;
    /**
     * Geoshape-Specific Config
     */
    geoshape?: MarkConfig;
    /**
     * Header configuration, which determines default properties for all
     * [headers](https://vega.github.io/vega-lite/docs/header.html).
     *
     * For a full list of header configuration options, please see the [corresponding section of
     * in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
     */
    header?: HeaderConfig;
    /**
     * Header configuration, which determines default properties for column
     * [headers](https://vega.github.io/vega-lite/docs/header.html).
     *
     * For a full list of header configuration options, please see the [corresponding section of
     * in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
     */
    headerColumn?: HeaderConfig;
    /**
     * Header configuration, which determines default properties for non-row/column facet
     * [headers](https://vega.github.io/vega-lite/docs/header.html).
     *
     * For a full list of header configuration options, please see the [corresponding section of
     * in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
     */
    headerFacet?: HeaderConfig;
    /**
     * Header configuration, which determines default properties for row
     * [headers](https://vega.github.io/vega-lite/docs/header.html).
     *
     * For a full list of header configuration options, please see the [corresponding section of
     * in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
     */
    headerRow?: HeaderConfig;
    /**
     * Image-specific Config
     */
    image?: RectConfig;
    /**
     * Legend configuration, which determines default properties for all
     * [legends](https://vega.github.io/vega-lite/docs/legend.html). For a full list of legend
     * configuration options, please see the [corresponding section of in the legend
     * documentation](https://vega.github.io/vega-lite/docs/legend.html#config).
     */
    legend?: LegendConfig;
    /**
     * Line-Specific Config
     */
    line?: LineConfig;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property provides a global default for text marks, which is overridden by
     * mark or style config settings, and by the lineBreak mark encoding channel. If
     * signal-valued, either string or regular expression (regexp) values are valid.
     */
    lineBreak?: string;
    /**
     * Mark Config
     */
    mark?: MarkConfig;
    /**
     * D3 Number format for guide labels and text marks. For example `"s"` for SI units. Use
     * [D3's number format pattern](https://github.com/d3/d3-format#locale_format).
     */
    numberFormat?: string;
    /**
     * The default visualization padding, in pixels, from the edge of the visualization canvas
     * to the data rectangle. If a number, specifies padding for all sides.
     * If an object, the value should have the format `{"left": 5, "top": 5, "right": 5,
     * "bottom": 5}` to specify padding for each side of the visualization.
     *
     * __Default value__: `5`
     */
    padding?: PaddingClass | number;
    /**
     * Point-Specific Config
     */
    point?: MarkConfig;
    /**
     * Projection configuration, which determines default properties for all
     * [projections](https://vega.github.io/vega-lite/docs/projection.html). For a full list of
     * projection configuration options, please see the [corresponding section of the projection
     * documentation](https://vega.github.io/vega-lite/docs/projection.html#config).
     */
    projection?: Projection;
    /**
     * An object hash that defines default range arrays or schemes for using with scales.
     * For a full list of scale range configuration options, please see the [corresponding
     * section of the scale
     * documentation](https://vega.github.io/vega-lite/docs/scale.html#config).
     */
    range?: RangeConfig;
    /**
     * Rect-Specific Config
     */
    rect?: RectConfig;
    /**
     * Rule-Specific Config
     */
    rule?: MarkConfig;
    /**
     * Scale configuration determines default properties for all
     * [scales](https://vega.github.io/vega-lite/docs/scale.html). For a full list of scale
     * configuration options, please see the [corresponding section of the scale
     * documentation](https://vega.github.io/vega-lite/docs/scale.html#config).
     */
    scale?: ScaleConfig;
    /**
     * An object hash for defining default properties for each type of selections.
     */
    selection?: SelectionConfig;
    /**
     * Square-Specific Config
     */
    square?: MarkConfig;
    /**
     * An object hash that defines key-value mappings to determine default properties for marks
     * with a given [style](https://vega.github.io/vega-lite/docs/mark.html#mark-def). The keys
     * represent styles names; the values have to be valid [mark configuration
     * objects](https://vega.github.io/vega-lite/docs/mark.html#config).
     */
    style?: StyleConfigIndex;
    /**
     * Text-Specific Config
     */
    text?: MarkConfig;
    /**
     * Tick-Specific Config
     */
    tick?: TickConfig;
    /**
     * Default time format for raw time values (without time units) in text marks, legend labels
     * and header labels.
     *
     * __Default value:__ `"%b %d, %Y"`
     * __Note:__ Axes automatically determine the format for each label automatically so this
     * config does not affect axes.
     */
    timeFormat?: string;
    /**
     * Title configuration, which determines default properties for all
     * [titles](https://vega.github.io/vega-lite/docs/title.html). For a full list of title
     * configuration options, please see the [corresponding section of the title
     * documentation](https://vega.github.io/vega-lite/docs/title.html#config).
     */
    title?: BaseTitleNoValueRefs;
    /**
     * Trail-Specific Config
     */
    trail?: LineConfig;
    /**
     * Default properties for [single view
     * plots](https://vega.github.io/vega-lite/docs/spec.html#single).
     */
    view?: ViewConfig;
}

/**
 * Arc-specific Config
 *
 * Image-specific Config
 *
 * Rect-Specific Config
 */
export interface RectConfig {
    /**
     * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
     * of `"left"`, `"right"`, `"center"`.
     */
    align?: Align;
    /**
     * The rotation angle of the text, in degrees.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG element, removing
     * the mark item from the ARIA accessibility tree.
     */
    aria?: boolean;
    /**
     * Sets the type of user interface element of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "role" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRole?: string;
    /**
     * A human-readable, author-localized description for the role of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "aria-roledescription" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRoleDescription?: string;
    /**
     * Whether to keep aspect ratio of image marks.
     */
    aspect?: boolean;
    /**
     * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
     * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
     * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
     * `lineHeight` rather than `fontSize` alone.
     */
    baseline?: Baseline;
    /**
     * Offset between bars for binned field. The ideal value for this is either 0 (preferred by
     * statisticians) or 1 (Vega-Lite default, D3 example style).
     *
     * __Default value:__ `1`
     */
    binSpacing?: number;
    /**
     * The color blend mode for drawing an item on its current background. Any valid [CSS
     * mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value
     * can be used.
     *
     * __Default value: `"source-over"`
     */
    blend?: Blend | null;
    /**
     * Default color.
     *
     * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
     *
     * __Note:__
     * - This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     * - The `fill` and `stroke` properties have higher precedence than `color` and will
     * override `color`.
     */
    color?: ColorLinearGradient | string;
    /**
     * The default size of the bars on continuous scales.
     *
     * __Default value:__ `5`
     */
    continuousBandSize?: number;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomRight?: number;
    /**
     * The radius in pixels of rounded rectangles' top right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' top left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopRight?: number;
    /**
     * The mouse cursor used over the mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * A text description of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).
     */
    description?: string;
    /**
     * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
     * This property determines on which side is truncated in response to the limit parameter.
     *
     * __Default value:__ `"ltr"`
     */
    dir?: TextDirection;
    /**
     * The default size of the bars with discrete dimensions. If unspecified, the default size
     * is  `step-2`, which provides 2 pixel offset between bars.
     */
    discreteBandSize?: number;
    /**
     * The horizontal offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dx?: number;
    /**
     * The vertical offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dy?: number;
    /**
     * The ellipsis string for text truncated in response to the limit parameter.
     *
     * __Default value:__ `"…"`
     */
    ellipsis?: string;
    /**
     * The end angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    endAngle?: number;
    /**
     * Default fill color. This property has higher precedence than `config.color`. Set to
     * `null` to remove fill.
     *
     * __Default value:__ (None)
     */
    fill?: FillLinearGradient | null | string;
    /**
     * Whether the mark's color should be used as fill color instead of stroke color.
     *
     * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as
     * `geoshape` marks for
     * [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources;
     * otherwise, `true`.
     *
     * __Note:__ This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     */
    filled?: boolean;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The typeface to set the text in (e.g., `"Helvetica Neue"`).
     */
    font?: string;
    /**
     * The font size, in pixels.
     *
     * __Default value:__ `11`
     */
    fontSize?: number;
    /**
     * The font style (e.g., `"italic"`).
     */
    fontStyle?: string;
    /**
     * The font weight.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * Height of the marks.
     */
    height?: number;
    /**
     * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
     */
    href?: string;
    /**
     * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
     */
    innerRadius?: number;
    /**
     * The line interpolation method to use for line and area marks. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
     * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
     * function.
     * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
     * function.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
     * - If set to `"filter"` (default), all data items with null values will be skipped (for
     * line, trail, and area marks) or filtered (for other marks).
     * - If `null`, all data items are included. In this case, invalid values will be
     * interpreted as zeroes.
     */
    invalid?: Invalid | null;
    /**
     * The maximum length of the text mark in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0` -- indicating no limit
     */
    limit?: number;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property is ignored if the text is array-valued.
     */
    lineBreak?: string;
    /**
     * The line height in pixels (the spacing between subsequent lines of text) for multi-line
     * text marks.
     */
    lineHeight?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * For line and trail marks, this `order` property can be set to `null` or `false` to make
     * the lines use the original order in the data sources.
     */
    order?: boolean | null;
    /**
     * The orientation of a non-stacked bar, tick, area, and line charts.
     * The value is either horizontal (default) or vertical.
     * - For bar, rule and tick, this determines whether the size of the bar and tick
     * should be applied to x or y dimension.
     * - For area, this property determines the orient property of the Vega output.
     * - For line and trail marks, this property determines the sort order of the points in the
     * line
     * if `config.sortLineBy` is not specified.
     * For stacked charts, this is always determined by the orientation of the stack;
     * therefore explicitly specified value will be ignored.
     */
    orient?: Orientation;
    /**
     * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
     */
    outerRadius?: number;
    /**
     * The angular padding applied to sides of the arc, in radians.
     */
    padAngle?: number;
    /**
     * For arc mark, the primary (outer) radius in pixels.
     *
     * For text marks, polar coordinate radial offset, in pixels, of the text from the origin
     * determined by the `x` and `y` properties.
     */
    radius?: number;
    /**
     * The secondary (inner) radius in pixels of arc marks.
     */
    radius2?: number;
    /**
     * Shape of the point marks. Supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * __Default value:__ `"circle"`
     */
    shape?: string;
    /**
     * Default size for marks.
     * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that
     * this value sets the area of the symbol; the side lengths will increase with the square
     * root of this value.
     * - For `bar`, this represents the band size of the bar, in pixels.
     * - For `text`, this represents the font size, in pixels.
     *
     * __Default value:__
     * - `30` for point, circle, square marks; width/height's `step`
     * - `2` for bar marks with discrete dimensions;
     * - `5` for bar marks with continuous dimensions;
     * - `11` for text marks.
     */
    size?: number;
    /**
     * The start angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    startAngle?: number;
    /**
     * Default stroke color. This property has higher precedence than `config.color`. Set to
     * `null` to remove stroke.
     *
     * __Default value:__ (None)
     */
    stroke?: FillLinearGradient | null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The offset in pixels at which to draw the group stroke and fill. If unspecified, the
     * default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths
     * align with the pixel grid.
     */
    strokeOffset?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * Depending on the interpolation type, sets the tension parameter (for line and area marks).
     */
    tension?: number;
    /**
     * Placeholder text if the `text` channel is not specified
     */
    text?: string[] | string;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: number;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: number;
    /**
     * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks
     * will be equal to the time unit band step.
     * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
     */
    timeUnitBand?: number;
    /**
     * Default relative band position for a time unit. If set to `0`, the marks will be
     * positioned at the beginning of the time unit band step.
     * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
     */
    timeUnitBandPosition?: number;
    /**
     * The tooltip text string to show upon mouse hover or an object defining which fields
     * should the tooltip be derived from.
     *
     * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding`
     * will be used.
     * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted
     * data point will be used.
     * - If set to `null` or `false`, then no tooltip will be used.
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip  in Vega-Lite.
     *
     * __Default value:__ `null`
     */
    tooltip?: boolean | TooltipContent | number | null | string;
    /**
     * Width of the marks.
     */
    width?: number;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: number | XEnum;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: number | XEnum;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: number | YEnum;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: number | YEnum;
}

/**
 * Area-Specific Config
 */
export interface AreaConfig {
    /**
     * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
     * of `"left"`, `"right"`, `"center"`.
     */
    align?: Align;
    /**
     * The rotation angle of the text, in degrees.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG element, removing
     * the mark item from the ARIA accessibility tree.
     */
    aria?: boolean;
    /**
     * Sets the type of user interface element of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "role" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRole?: string;
    /**
     * A human-readable, author-localized description for the role of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "aria-roledescription" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRoleDescription?: string;
    /**
     * Whether to keep aspect ratio of image marks.
     */
    aspect?: boolean;
    /**
     * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
     * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
     * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
     * `lineHeight` rather than `fontSize` alone.
     */
    baseline?: Baseline;
    /**
     * The color blend mode for drawing an item on its current background. Any valid [CSS
     * mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value
     * can be used.
     *
     * __Default value: `"source-over"`
     */
    blend?: Blend | null;
    /**
     * Default color.
     *
     * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
     *
     * __Note:__
     * - This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     * - The `fill` and `stroke` properties have higher precedence than `color` and will
     * override `color`.
     */
    color?: ColorLinearGradient | string;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomRight?: number;
    /**
     * The radius in pixels of rounded rectangles' top right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' top left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopRight?: number;
    /**
     * The mouse cursor used over the mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * A text description of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).
     */
    description?: string;
    /**
     * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
     * This property determines on which side is truncated in response to the limit parameter.
     *
     * __Default value:__ `"ltr"`
     */
    dir?: TextDirection;
    /**
     * The horizontal offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dx?: number;
    /**
     * The vertical offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dy?: number;
    /**
     * The ellipsis string for text truncated in response to the limit parameter.
     *
     * __Default value:__ `"…"`
     */
    ellipsis?: string;
    /**
     * The end angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    endAngle?: number;
    /**
     * Default fill color. This property has higher precedence than `config.color`. Set to
     * `null` to remove fill.
     *
     * __Default value:__ (None)
     */
    fill?: FillLinearGradient | null | string;
    /**
     * Whether the mark's color should be used as fill color instead of stroke color.
     *
     * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as
     * `geoshape` marks for
     * [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources;
     * otherwise, `true`.
     *
     * __Note:__ This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     */
    filled?: boolean;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The typeface to set the text in (e.g., `"Helvetica Neue"`).
     */
    font?: string;
    /**
     * The font size, in pixels.
     *
     * __Default value:__ `11`
     */
    fontSize?: number;
    /**
     * The font style (e.g., `"italic"`).
     */
    fontStyle?: string;
    /**
     * The font weight.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * Height of the marks.
     */
    height?: number;
    /**
     * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
     */
    href?: string;
    /**
     * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
     */
    innerRadius?: number;
    /**
     * The line interpolation method to use for line and area marks. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
     * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
     * function.
     * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
     * function.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
     * - If set to `"filter"` (default), all data items with null values will be skipped (for
     * line, trail, and area marks) or filtered (for other marks).
     * - If `null`, all data items are included. In this case, invalid values will be
     * interpreted as zeroes.
     */
    invalid?: Invalid | null;
    /**
     * The maximum length of the text mark in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0` -- indicating no limit
     */
    limit?: number;
    /**
     * A flag for overlaying line on top of area marks, or an object defining the properties of
     * the overlayed lines.
     *
     * - If this value is an empty object (`{}`) or `true`, lines with default properties will
     * be used.
     *
     * - If this value is `false`, no lines would be automatically added to area marks.
     *
     * __Default value:__ `false`.
     */
    line?: boolean | OverlayMarkDef;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property is ignored if the text is array-valued.
     */
    lineBreak?: string;
    /**
     * The line height in pixels (the spacing between subsequent lines of text) for multi-line
     * text marks.
     */
    lineHeight?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * For line and trail marks, this `order` property can be set to `null` or `false` to make
     * the lines use the original order in the data sources.
     */
    order?: boolean | null;
    /**
     * The orientation of a non-stacked bar, tick, area, and line charts.
     * The value is either horizontal (default) or vertical.
     * - For bar, rule and tick, this determines whether the size of the bar and tick
     * should be applied to x or y dimension.
     * - For area, this property determines the orient property of the Vega output.
     * - For line and trail marks, this property determines the sort order of the points in the
     * line
     * if `config.sortLineBy` is not specified.
     * For stacked charts, this is always determined by the orientation of the stack;
     * therefore explicitly specified value will be ignored.
     */
    orient?: Orientation;
    /**
     * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
     */
    outerRadius?: number;
    /**
     * The angular padding applied to sides of the arc, in radians.
     */
    padAngle?: number;
    /**
     * A flag for overlaying points on top of line or area marks, or an object defining the
     * properties of the overlayed points.
     *
     * - If this property is `"transparent"`, transparent points will be used (for enhancing
     * tooltips and selections).
     *
     * - If this property is an empty object (`{}`) or `true`, filled points with default
     * properties will be used.
     *
     * - If this property is `false`, no points would be automatically added to line or area
     * marks.
     *
     * __Default value:__ `false`.
     */
    point?: boolean | OverlayMarkDef | PointEnum;
    /**
     * For arc mark, the primary (outer) radius in pixels.
     *
     * For text marks, polar coordinate radial offset, in pixels, of the text from the origin
     * determined by the `x` and `y` properties.
     */
    radius?: number;
    /**
     * The secondary (inner) radius in pixels of arc marks.
     */
    radius2?: number;
    /**
     * Shape of the point marks. Supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * __Default value:__ `"circle"`
     */
    shape?: string;
    /**
     * Default size for marks.
     * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that
     * this value sets the area of the symbol; the side lengths will increase with the square
     * root of this value.
     * - For `bar`, this represents the band size of the bar, in pixels.
     * - For `text`, this represents the font size, in pixels.
     *
     * __Default value:__
     * - `30` for point, circle, square marks; width/height's `step`
     * - `2` for bar marks with discrete dimensions;
     * - `5` for bar marks with continuous dimensions;
     * - `11` for text marks.
     */
    size?: number;
    /**
     * The start angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    startAngle?: number;
    /**
     * Default stroke color. This property has higher precedence than `config.color`. Set to
     * `null` to remove stroke.
     *
     * __Default value:__ (None)
     */
    stroke?: FillLinearGradient | null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The offset in pixels at which to draw the group stroke and fill. If unspecified, the
     * default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths
     * align with the pixel grid.
     */
    strokeOffset?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * Depending on the interpolation type, sets the tension parameter (for line and area marks).
     */
    tension?: number;
    /**
     * Placeholder text if the `text` channel is not specified
     */
    text?: string[] | string;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: number;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: number;
    /**
     * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks
     * will be equal to the time unit band step.
     * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
     */
    timeUnitBand?: number;
    /**
     * Default relative band position for a time unit. If set to `0`, the marks will be
     * positioned at the beginning of the time unit band step.
     * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
     */
    timeUnitBandPosition?: number;
    /**
     * The tooltip text string to show upon mouse hover or an object defining which fields
     * should the tooltip be derived from.
     *
     * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding`
     * will be used.
     * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted
     * data point will be used.
     * - If set to `null` or `false`, then no tooltip will be used.
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip  in Vega-Lite.
     *
     * __Default value:__ `null`
     */
    tooltip?: boolean | TooltipContent | number | null | string;
    /**
     * Width of the marks.
     */
    width?: number;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: number | XEnum;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: number | XEnum;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: number | YEnum;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: number | YEnum;
}

/**
 * Axis configuration, which determines default properties for all `x` and `y`
 * [axes](https://vega.github.io/vega-lite/docs/axis.html). For a full list of axis
 * configuration options, please see the [corresponding section of the axis
 * documentation](https://vega.github.io/vega-lite/docs/axis.html#config).
 *
 * Config for axes with "band" scales.
 *
 * Config for x-axis along the bottom edge of the chart.
 *
 * Config for axes with "point" or "band" scales.
 *
 * Config for y-axis along the left edge of the chart.
 *
 * Config for axes with "point" scales.
 *
 * Config for quantitative axes.
 *
 * Config for y-axis along the right edge of the chart.
 *
 * Config for temporal axes.
 *
 * Config for x-axis along the top edge of the chart.
 *
 * X-axis specific config.
 *
 * Config for x-axes with "band" scales.
 *
 * Config for x-axes with "point" or "band" scales.
 *
 * Config for x-axes with "point" scales.
 *
 * Config for x-quantitative axes.
 *
 * Config for x-temporal axes.
 *
 * Y-axis specific config.
 *
 * Config for y-axes with "band" scales.
 *
 * Config for y-axes with "point" or "band" scales.
 *
 * Config for y-axes with "point" scales.
 *
 * Config for y-quantitative axes.
 *
 * Config for y-temporal axes.
 */
export interface AxisConfig {
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG group, removing the
     * axis from the ARIA accessibility tree.
     *
     * __Default value:__ `true`
     */
    aria?: boolean;
    /**
     * An interpolation fraction indicating where, for `band` scales, axis ticks should be
     * positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5`
     * places ticks in the middle of their bands.
     *
     * __Default value:__ `0.5`
     */
    bandPosition?: number;
    /**
     * A text description of this axis for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If the `aria` property is true, for SVG output the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)
     * will be set to this description.
     * If the description is unspecified it will be automatically generated.
     */
    description?: string;
    /**
     * Disable axis by default.
     */
    disable?: boolean;
    /**
     * A boolean flag indicating if the domain (the axis baseline) should be included as part of
     * the axis.
     *
     * __Default value:__ `true`
     */
    domain?: boolean;
    /**
     * The stroke cap for the domain line's ending style. One of `"butt"`, `"round"` or
     * `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    domainCap?: StrokeCap;
    /**
     * Color of axis domain line.
     *
     * __Default value:__ `"gray"`.
     */
    domainColor?: null | string;
    /**
     * An array of alternating [stroke, space] lengths for dashed domain lines.
     */
    domainDash?: number[];
    /**
     * The pixel offset at which to start drawing with the domain dash array.
     */
    domainDashOffset?: number;
    /**
     * Opacity of the axis domain line.
     */
    domainOpacity?: number;
    /**
     * Stroke width of axis domain line
     *
     * __Default value:__ `1`
     */
    domainWidth?: number;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * A boolean flag indicating if grid lines should be included as part of the axis
     *
     * __Default value:__ `true` for [continuous
     * scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned;
     * otherwise, `false`.
     */
    grid?: boolean;
    /**
     * The stroke cap for grid lines' ending style. One of `"butt"`, `"round"` or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    gridCap?: StrokeCap;
    gridColor?: ConditionalAxisPropertyColorNull | null | string;
    gridDash?: number[] | ConditionalAxisPropertyNumberNull;
    gridDashOffset?: ConditionalAxisPropertyNumberNullClass | number;
    gridOpacity?: ConditionalAxisPropertyNumberNullClass | number;
    gridWidth?: ConditionalAxisPropertyNumberNullClass | number;
    labelAlign?: ConditionalAxisPropertyAlignNull | Align;
    /**
     * The rotation angle of the axis labels.
     *
     * __Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.
     */
    labelAngle?: number;
    labelBaseline?: ConditionalAxisPropertyTextBaselineNull | Baseline;
    /**
     * Indicates if labels should be hidden if they exceed the axis range. If `false` (the
     * default) no bounds overlap analysis is performed. If `true`, labels will be hidden if
     * they exceed the axis range by more than 1 pixel. If this property is a number, it
     * specifies the pixel tolerance: the maximum amount by which a label bounding box may
     * exceed the axis range.
     *
     * __Default value:__ `false`.
     */
    labelBound?: boolean | number;
    labelColor?: ConditionalAxisPropertyColorNull | null | string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels
     * text.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Indicates if the first and last axis labels should be aligned flush with the scale range.
     * Flush alignment for a horizontal axis will left-align the first label and right-align the
     * last label. For vertical axes, bottom and top text baselines are applied instead. If this
     * property is a number, it also indicates the number of pixels by which to offset the first
     * and last labels; for example, a value of 2 will flush-align the first and last labels and
     * also push them 2 pixels outward from the center of the axis. The additional adjustment
     * can sometimes help the labels better visually group with corresponding axis ticks.
     *
     * __Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.
     */
    labelFlush?: boolean | number;
    /**
     * Indicates the number of pixels by which to offset flush-adjusted labels. For example, a
     * value of `2` will push flush-adjusted labels 2 pixels outward from the center of the
     * axis. Offsets can help the labels better visually group with corresponding axis ticks.
     *
     * __Default value:__ `0`.
     */
    labelFlushOffset?: number;
    labelFont?: ConditionalAxisPropertyStringNull | string;
    labelFontSize?: ConditionalAxisPropertyNumberNullClass | number;
    labelFontStyle?: ConditionalAxisPropertyFontStyleNull | string;
    labelFontWeight?: ConditionalAxisPropertyFontWeightNull | number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of axis tick labels.
     *
     * __Default value:__ `180`
     */
    labelLimit?: number;
    /**
     * Line height in pixels for multi-line label text or label text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    labelLineHeight?: number;
    labelOffset?: ConditionalAxisPropertyNumberNullClass | number;
    labelOpacity?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * The strategy to use for resolving overlap of axis labels. If `false` (the default), no
     * overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing
     * every other label is used (this works well for standard linear axes). If set to
     * `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps
     * with the last visible label (this often works better for log-scaled axes).
     *
     * __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log
     * scales; otherwise `false`.
     */
    labelOverlap?: boolean | LabelOverlapEnum;
    labelPadding?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * A boolean flag indicating if labels should be included as part of the axis.
     *
     * __Default value:__ `true`.
     */
    labels?: boolean;
    /**
     * The minimum separation that must be between label bounding boxes for them to be
     * considered non-overlapping (default `0`). This property is ignored if *labelOverlap*
     * resolution is not enabled.
     */
    labelSeparation?: number;
    /**
     * The maximum extent in pixels that axis ticks and labels should use. This determines a
     * maximum offset value for axis titles.
     *
     * __Default value:__ `undefined`.
     */
    maxExtent?: number;
    /**
     * The minimum extent in pixels that axis ticks and labels should use. This determines a
     * minimum offset value for axis titles.
     *
     * __Default value:__ `30` for y-axis; `undefined` for x-axis.
     */
    minExtent?: number;
    /**
     * The offset, in pixels, by which to displace the axis from the edge of the enclosing group
     * or data rectangle.
     *
     * __Default value:__ derived from the [axis
     * config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s `offset`
     * (`0` by default)
     */
    offset?: number;
    /**
     * The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The
     * orientation can be used to further specialize the axis type (e.g., a y-axis oriented
     * towards the right edge of the chart).
     *
     * __Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.
     */
    orient?: Orient;
    /**
     * The anchor position of the axis in pixels. For x-axes with top or bottom orientation,
     * this sets the axis group x coordinate. For y-axes with left or right orientation, this
     * sets the axis group y coordinate.
     *
     * __Default value__: `0`
     */
    position?: number;
    /**
     * A string or array of strings indicating the name of custom styles to apply to the axis. A
     * style is a named collection of axis property defined within the [style
     * configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is
     * an array, later styles will override earlier styles.
     *
     * __Default value:__ (none)
     * __Note:__ Any specified style will augment the default style. For example, an x-axis mark
     * with `"style": "foo"` will use `config.axisX` and `config.style.foo` (the specified style
     * `"foo"` has higher precedence).
     */
    style?: string[] | string;
    /**
     * For band scales, indicates if ticks and grid lines should be placed at the `"center"` of
     * a band (default) or at the band `"extent"`s to indicate intervals
     */
    tickBand?: TickBand;
    /**
     * The stroke cap for the tick lines' ending style. One of `"butt"`, `"round"` or
     * `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    tickCap?: StrokeCap;
    tickColor?: ConditionalAxisPropertyColorNull | null | string;
    /**
     * A desired number of ticks, for axes visualizing quantitative scales. The resulting number
     * may be different so that values are "nice" (multiples of 2, 5, 10) and lie within the
     * underlying scale's range.
     *
     * For scales of type `"time"` or `"utc"`, the tick count can instead be a time interval
     * specifier. Legal string values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`,
     * `"day"`, `"week"`, `"month"`, and "year". Alternatively, an object-valued interval
     * specifier of the form `{"interval": "month", "step": 3}` includes a desired number of
     * interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct)
     * boundary.
     *
     * __Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)`
     * for y.
     */
    tickCount?: TimeIntervalStep | number | TimeInterval;
    tickDash?: number[] | ConditionalAxisPropertyNumberNull;
    tickDashOffset?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * Boolean flag indicating if an extra axis tick should be added for the initial position of
     * the axis. This flag is useful for styling axes for `band` scales such that ticks are
     * placed on band boundaries rather in the middle of a band. Use in conjunction with
     * `"bandPosition": 1` and an axis `"padding"` value of `0`.
     */
    tickExtra?: boolean;
    /**
     * The minimum desired step between axis ticks, in terms of scale domain values. For
     * example, a value of `1` indicates that ticks should not be less than 1 unit apart. If
     * `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to
     * enforce the minimum step value.
     */
    tickMinStep?: number;
    /**
     * Position offset in pixels to apply to ticks, labels, and gridlines.
     */
    tickOffset?: number;
    tickOpacity?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * Boolean flag indicating if pixel position values should be rounded to the nearest
     * integer.
     *
     * __Default value:__ `true`
     */
    tickRound?: boolean;
    /**
     * Boolean value that determines whether the axis should include ticks.
     *
     * __Default value:__ `true`
     */
    ticks?: boolean;
    tickSize?: ConditionalAxisPropertyNumberNullClass | number;
    tickWidth?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * Horizontal text alignment of axis titles.
     */
    titleAlign?: Align;
    /**
     * Text anchor position for placing axis titles.
     */
    titleAnchor?: TitleAnchor | null;
    /**
     * Angle in degrees of axis titles.
     */
    titleAngle?: number;
    /**
     * Vertical text baseline for axis titles. One of `"alphabetic"` (default), `"top"`,
     * `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
     * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
     * relative to the *lineHeight* rather than *fontSize* alone.
     */
    titleBaseline?: Baseline;
    /**
     * Color of the title, can be in hex color code or regular color name.
     */
    titleColor?: null | string;
    /**
     * Font of the title. (e.g., `"Helvetica Neue"`).
     */
    titleFont?: string;
    /**
     * Font size of the title.
     */
    titleFontSize?: number;
    /**
     * Font style of the title.
     */
    titleFontStyle?: string;
    /**
     * Font weight of the title.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    titleFontWeight?: number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of axis titles.
     */
    titleLimit?: number;
    /**
     * Line height in pixels for multi-line title text or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    titleLineHeight?: number;
    /**
     * Opacity of the axis title.
     */
    titleOpacity?: number;
    /**
     * The padding, in pixels, between title and axis.
     */
    titlePadding?: number;
    /**
     * X-coordinate of the axis title relative to the axis group.
     */
    titleX?: number;
    /**
     * Y-coordinate of the axis title relative to the axis group.
     */
    titleY?: number;
    /**
     * Coordinate space translation offset for axis layout. By default, axes are translated by a
     * 0.5 pixel offset for both the x and y coordinates in order to align stroked lines with
     * the pixel grid. However, for vector graphics output these pixel-specific adjustments may
     * be undesirable, in which case translate can be changed (for example, to zero).
     *
     * __Default value:__ `0.5`
     */
    translate?: number;
    /**
     * Explicitly set the visible axis tick values.
     */
    values?: Array<boolean | DateTime | number | string>;
    /**
     * A non-negative integer indicating the z-index of the axis.
     * If zindex is 0, axes should be drawn behind all chart elements.
     * To put them in front, set `zindex` to `1` or more.
     *
     * __Default value:__ `0` (behind the marks).
     */
    zindex?: number;
}

/**
 * Bar-Specific Config
 */
export interface BarConfig {
    /**
     * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
     * of `"left"`, `"right"`, `"center"`.
     */
    align?: Align;
    /**
     * The rotation angle of the text, in degrees.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG element, removing
     * the mark item from the ARIA accessibility tree.
     */
    aria?: boolean;
    /**
     * Sets the type of user interface element of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "role" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRole?: string;
    /**
     * A human-readable, author-localized description for the role of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "aria-roledescription" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRoleDescription?: string;
    /**
     * Whether to keep aspect ratio of image marks.
     */
    aspect?: boolean;
    /**
     * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
     * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
     * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
     * `lineHeight` rather than `fontSize` alone.
     */
    baseline?: Baseline;
    /**
     * Offset between bars for binned field. The ideal value for this is either 0 (preferred by
     * statisticians) or 1 (Vega-Lite default, D3 example style).
     *
     * __Default value:__ `1`
     */
    binSpacing?: number;
    /**
     * The color blend mode for drawing an item on its current background. Any valid [CSS
     * mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value
     * can be used.
     *
     * __Default value: `"source-over"`
     */
    blend?: Blend | null;
    /**
     * Default color.
     *
     * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
     *
     * __Note:__
     * - This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     * - The `fill` and `stroke` properties have higher precedence than `color` and will
     * override `color`.
     */
    color?: ColorLinearGradient | string;
    /**
     * The default size of the bars on continuous scales.
     *
     * __Default value:__ `5`
     */
    continuousBandSize?: number;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomRight?: number;
    /**
     * - For vertical bars, top-left and top-right corner radius.
     * - For horizontal bars, top-right and bottom-right corner radius.
     */
    cornerRadiusEnd?: number;
    /**
     * The radius in pixels of rounded rectangles' top right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' top left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopRight?: number;
    /**
     * The mouse cursor used over the mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * A text description of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).
     */
    description?: string;
    /**
     * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
     * This property determines on which side is truncated in response to the limit parameter.
     *
     * __Default value:__ `"ltr"`
     */
    dir?: TextDirection;
    /**
     * The default size of the bars with discrete dimensions. If unspecified, the default size
     * is  `step-2`, which provides 2 pixel offset between bars.
     */
    discreteBandSize?: number;
    /**
     * The horizontal offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dx?: number;
    /**
     * The vertical offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dy?: number;
    /**
     * The ellipsis string for text truncated in response to the limit parameter.
     *
     * __Default value:__ `"…"`
     */
    ellipsis?: string;
    /**
     * The end angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    endAngle?: number;
    /**
     * Default fill color. This property has higher precedence than `config.color`. Set to
     * `null` to remove fill.
     *
     * __Default value:__ (None)
     */
    fill?: FillLinearGradient | null | string;
    /**
     * Whether the mark's color should be used as fill color instead of stroke color.
     *
     * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as
     * `geoshape` marks for
     * [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources;
     * otherwise, `true`.
     *
     * __Note:__ This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     */
    filled?: boolean;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The typeface to set the text in (e.g., `"Helvetica Neue"`).
     */
    font?: string;
    /**
     * The font size, in pixels.
     *
     * __Default value:__ `11`
     */
    fontSize?: number;
    /**
     * The font style (e.g., `"italic"`).
     */
    fontStyle?: string;
    /**
     * The font weight.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * Height of the marks.
     */
    height?: number;
    /**
     * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
     */
    href?: string;
    /**
     * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
     */
    innerRadius?: number;
    /**
     * The line interpolation method to use for line and area marks. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
     * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
     * function.
     * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
     * function.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
     * - If set to `"filter"` (default), all data items with null values will be skipped (for
     * line, trail, and area marks) or filtered (for other marks).
     * - If `null`, all data items are included. In this case, invalid values will be
     * interpreted as zeroes.
     */
    invalid?: Invalid | null;
    /**
     * The maximum length of the text mark in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0` -- indicating no limit
     */
    limit?: number;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property is ignored if the text is array-valued.
     */
    lineBreak?: string;
    /**
     * The line height in pixels (the spacing between subsequent lines of text) for multi-line
     * text marks.
     */
    lineHeight?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * For line and trail marks, this `order` property can be set to `null` or `false` to make
     * the lines use the original order in the data sources.
     */
    order?: boolean | null;
    /**
     * The orientation of a non-stacked bar, tick, area, and line charts.
     * The value is either horizontal (default) or vertical.
     * - For bar, rule and tick, this determines whether the size of the bar and tick
     * should be applied to x or y dimension.
     * - For area, this property determines the orient property of the Vega output.
     * - For line and trail marks, this property determines the sort order of the points in the
     * line
     * if `config.sortLineBy` is not specified.
     * For stacked charts, this is always determined by the orientation of the stack;
     * therefore explicitly specified value will be ignored.
     */
    orient?: Orientation;
    /**
     * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
     */
    outerRadius?: number;
    /**
     * The angular padding applied to sides of the arc, in radians.
     */
    padAngle?: number;
    /**
     * For arc mark, the primary (outer) radius in pixels.
     *
     * For text marks, polar coordinate radial offset, in pixels, of the text from the origin
     * determined by the `x` and `y` properties.
     */
    radius?: number;
    /**
     * The secondary (inner) radius in pixels of arc marks.
     */
    radius2?: number;
    /**
     * Shape of the point marks. Supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * __Default value:__ `"circle"`
     */
    shape?: string;
    /**
     * Default size for marks.
     * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that
     * this value sets the area of the symbol; the side lengths will increase with the square
     * root of this value.
     * - For `bar`, this represents the band size of the bar, in pixels.
     * - For `text`, this represents the font size, in pixels.
     *
     * __Default value:__
     * - `30` for point, circle, square marks; width/height's `step`
     * - `2` for bar marks with discrete dimensions;
     * - `5` for bar marks with continuous dimensions;
     * - `11` for text marks.
     */
    size?: number;
    /**
     * The start angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    startAngle?: number;
    /**
     * Default stroke color. This property has higher precedence than `config.color`. Set to
     * `null` to remove stroke.
     *
     * __Default value:__ (None)
     */
    stroke?: FillLinearGradient | null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The offset in pixels at which to draw the group stroke and fill. If unspecified, the
     * default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths
     * align with the pixel grid.
     */
    strokeOffset?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * Depending on the interpolation type, sets the tension parameter (for line and area marks).
     */
    tension?: number;
    /**
     * Placeholder text if the `text` channel is not specified
     */
    text?: string[] | string;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: number;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: number;
    /**
     * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks
     * will be equal to the time unit band step.
     * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
     */
    timeUnitBand?: number;
    /**
     * Default relative band position for a time unit. If set to `0`, the marks will be
     * positioned at the beginning of the time unit band step.
     * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
     */
    timeUnitBandPosition?: number;
    /**
     * The tooltip text string to show upon mouse hover or an object defining which fields
     * should the tooltip be derived from.
     *
     * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding`
     * will be used.
     * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted
     * data point will be used.
     * - If set to `null` or `false`, then no tooltip will be used.
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip  in Vega-Lite.
     *
     * __Default value:__ `null`
     */
    tooltip?: boolean | TooltipContent | number | null | string;
    /**
     * Width of the marks.
     */
    width?: number;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: number | XEnum;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: number | XEnum;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: number | YEnum;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: number | YEnum;
}

/**
 * Box Config
 */
export interface BoxPlotConfig {
    box?: boolean | MarkConfig;
    /**
     * The extent of the whiskers. Available options include:
     * - `"min-max"`: min and max are the lower and upper whiskers respectively.
     * - A number representing multiple of the interquartile range. This number will be
     * multiplied by the IQR to determine whisker boundary, which spans from the smallest data
     * to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_
     * are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).
     *
     * __Default value:__ `1.5`.
     */
    extent?: number | ExtentEnum;
    median?: boolean | MarkConfig;
    outliers?: boolean | MarkConfig;
    rule?: boolean | MarkConfig;
    /**
     * Size of the box and median tick of a box plot
     */
    size?: number;
    ticks?: boolean | MarkConfig;
}

export enum ExtentEnum {
    MinMax = 'min-max',
}

/**
 * Default configuration for all concatenation and repeat view composition operators
 * (`concat`, `hconcat`, `vconcat`, and `repeat`)
 *
 * Default configuration for the `facet` view composition operator
 */
export interface CompositionConfig {
    /**
     * The number of columns to include in the view composition layout.
     *
     * __Default value__: `undefined` -- An infinite number of columns (a single row) will be
     * assumed. This is equivalent to
     * `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
     *
     * __Note__:
     *
     * 1) This property is only for:
     * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
     * - the `facet` and `repeat` operator with one field/repetition definition (without
     * row/column nesting)
     *
     * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using
     * the `row` channel (for `facet` and `repeat`).
     */
    columns?: number;
    /**
     * The default spacing in pixels between composed sub-views.
     *
     * __Default value__: `20`
     */
    spacing?: number;
}

/**
 * ErrorBand Config
 */
export interface ErrorBandConfig {
    band?: boolean | MarkConfig;
    borders?: boolean | MarkConfig;
    /**
     * The extent of the band. Available options include:
     * - `"ci"`: Extend the band to the confidence interval of the mean.
     * - `"stderr"`: The size of band are set to the value of standard error, extending from the
     * mean.
     * - `"stdev"`: The size of band are set to the value of standard deviation, extending from
     * the mean.
     * - `"iqr"`: Extend the band to the q1 and q3.
     *
     * __Default value:__ `"stderr"`.
     */
    extent?: ErrorbandExtent;
    /**
     * The line interpolation method for the error band. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: a piecewise constant function (a step function) consisting of alternating
     * horizontal and vertical lines. The y-value changes at the midpoint of each pair of
     * adjacent x-values.
     * - `"step-before"`: a piecewise constant function (a step function) consisting of
     * alternating horizontal and vertical lines. The y-value changes before the x-value.
     * - `"step-after"`: a piecewise constant function (a step function) consisting of
     * alternating horizontal and vertical lines. The y-value changes after the x-value.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * The tension parameter for the interpolation type of the error band.
     */
    tension?: number;
}

/**
 * The extent of the band. Available options include:
 * - `"ci"`: Extend the band to the confidence interval of the mean.
 * - `"stderr"`: The size of band are set to the value of standard error, extending from the
 * mean.
 * - `"stdev"`: The size of band are set to the value of standard deviation, extending from
 * the mean.
 * - `"iqr"`: Extend the band to the q1 and q3.
 *
 * __Default value:__ `"stderr"`.
 *
 * The extent of the rule. Available options include:
 * - `"ci"`: Extend the rule to the confidence interval of the mean.
 * - `"stderr"`: The size of rule are set to the value of standard error, extending from the
 * mean.
 * - `"stdev"`: The size of rule are set to the value of standard deviation, extending from
 * the mean.
 * - `"iqr"`: Extend the rule to the q1 and q3.
 *
 * __Default value:__ `"stderr"`.
 */
export enum ErrorbandExtent {
    Ci = 'ci',
    Iqr = 'iqr',
    Stderr = 'stderr',
    Stdev = 'stdev',
}

/**
 * ErrorBar Config
 */
export interface ErrorBarConfig {
    /**
     * The extent of the rule. Available options include:
     * - `"ci"`: Extend the rule to the confidence interval of the mean.
     * - `"stderr"`: The size of rule are set to the value of standard error, extending from the
     * mean.
     * - `"stdev"`: The size of rule are set to the value of standard deviation, extending from
     * the mean.
     * - `"iqr"`: Extend the rule to the q1 and q3.
     *
     * __Default value:__ `"stderr"`.
     */
    extent?: ErrorbandExtent;
    rule?: boolean | MarkConfig;
    ticks?: boolean | MarkConfig;
}

/**
 * Defines how Vega-Lite generates title for fields. There are three possible styles:
 * - `"verbal"` (Default) - displays function in a verbal style (e.g., "Sum of field",
 * "Year-month of date", "field (binned)").
 * - `"function"` - displays function using parentheses and capitalized texts (e.g.,
 * "SUM(field)", "YEARMONTH(date)", "BIN(field)").
 * - `"plain"` - displays only the field name without functions (e.g., "field", "date",
 * "field").
 */
export enum FieldTitle {
    Functional = 'functional',
    Plain = 'plain',
    Verbal = 'verbal',
}

/**
 * Header configuration, which determines default properties for all
 * [headers](https://vega.github.io/vega-lite/docs/header.html).
 *
 * For a full list of header configuration options, please see the [corresponding section of
 * in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
 *
 * Header configuration, which determines default properties for column
 * [headers](https://vega.github.io/vega-lite/docs/header.html).
 *
 * For a full list of header configuration options, please see the [corresponding section of
 * in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
 *
 * Header configuration, which determines default properties for non-row/column facet
 * [headers](https://vega.github.io/vega-lite/docs/header.html).
 *
 * For a full list of header configuration options, please see the [corresponding section of
 * in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
 *
 * Header configuration, which determines default properties for row
 * [headers](https://vega.github.io/vega-lite/docs/header.html).
 *
 * For a full list of header configuration options, please see the [corresponding section of
 * in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
 */
export interface HeaderConfig {
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * Horizontal text alignment of header labels. One of `"left"`, `"center"`, or `"right"`.
     */
    labelAlign?: Align;
    /**
     * The anchor position for placing the labels. One of `"start"`, `"middle"`, or `"end"`. For
     * example, with a label orientation of top these anchor positions map to a left-, center-,
     * or right-aligned label.
     */
    labelAnchor?: TitleAnchor | null;
    /**
     * The rotation angle of the header labels.
     *
     * __Default value:__ `0` for column header, `-90` for row header.
     */
    labelAngle?: number;
    /**
     * The vertical text baseline for the header labels. One of `"alphabetic"` (default),
     * `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`.
     * The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`,
     * but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
     */
    labelBaseline?: Baseline;
    /**
     * The color of the header label, can be in hex color code or regular color name.
     */
    labelColor?: string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the header's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * The font of the header label.
     */
    labelFont?: string;
    /**
     * The font size of the header label, in pixels.
     */
    labelFontSize?: number;
    /**
     * The font style of the header label.
     */
    labelFontStyle?: string;
    /**
     * The font weight of the header label.
     */
    labelFontWeight?: number | FontWeightEnum;
    /**
     * The maximum length of the header label in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0`, indicating no limit
     */
    labelLimit?: number;
    /**
     * Line height in pixels for multi-line header labels or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    labelLineHeight?: number;
    /**
     * The orientation of the header label. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
     */
    labelOrient?: Orient;
    /**
     * The padding, in pixel, between facet header's label and the plot.
     *
     * __Default value:__ `10`
     */
    labelPadding?: number;
    /**
     * A boolean flag indicating if labels should be included as part of the header.
     *
     * __Default value:__ `true`.
     */
    labels?: boolean;
    /**
     * Shortcut for setting both labelOrient and titleOrient.
     */
    orient?: Orient;
    /**
     * Set to null to disable title for the axis, legend, or header.
     */
    title?: null;
    /**
     * Horizontal text alignment (to the anchor) of header titles.
     */
    titleAlign?: Align;
    /**
     * The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For
     * example, with an orientation of top these anchor positions map to a left-, center-, or
     * right-aligned title.
     */
    titleAnchor?: TitleAnchor | null;
    /**
     * The rotation angle of the header title.
     *
     * __Default value:__ `0`.
     */
    titleAngle?: number;
    /**
     * The vertical text baseline for the header title. One of `"alphabetic"` (default),
     * `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`.
     * The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`,
     * but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
     *
     * __Default value:__ `"middle"`
     */
    titleBaseline?: Baseline;
    /**
     * Color of the header title, can be in hex color code or regular color name.
     */
    titleColor?: string;
    /**
     * Font of the header title. (e.g., `"Helvetica Neue"`).
     */
    titleFont?: string;
    /**
     * Font size of the header title.
     */
    titleFontSize?: number;
    /**
     * The font style of the header title.
     */
    titleFontStyle?: string;
    /**
     * Font weight of the header title.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    titleFontWeight?: number | FontWeightEnum;
    /**
     * The maximum length of the header title in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0`, indicating no limit
     */
    titleLimit?: number;
    /**
     * Line height in pixels for multi-line header title text or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    titleLineHeight?: number;
    /**
     * The orientation of the header title. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
     */
    titleOrient?: Orient;
    /**
     * The padding, in pixel, between facet header's title and the label.
     *
     * __Default value:__ `10`
     */
    titlePadding?: number;
}

/**
 * Legend configuration, which determines default properties for all
 * [legends](https://vega.github.io/vega-lite/docs/legend.html). For a full list of legend
 * configuration options, please see the [corresponding section of in the legend
 * documentation](https://vega.github.io/vega-lite/docs/legend.html#config).
 */
export interface LegendConfig {
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG group, removing the
     * legend from the ARIA accessibility tree.
     *
     * __Default value:__ `true`
     */
    aria?: boolean;
    /**
     * The height in pixels to clip symbol legend entries and limit their size.
     */
    clipHeight?: number;
    /**
     * The horizontal padding in pixels between symbol legend entries.
     *
     * __Default value:__ `10`.
     */
    columnPadding?: number;
    /**
     * The number of columns in which to arrange symbol legend entries. A value of `0` or lower
     * indicates a single row with one column per entry.
     */
    columns?: number;
    /**
     * Corner radius for the full legend.
     */
    cornerRadius?: number;
    /**
     * A text description of this legend for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If the `aria` property is true, for SVG output the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)
     * will be set to this description.
     * If the description is unspecified it will be automatically generated.
     */
    description?: string;
    /**
     * The direction of the legend, one of `"vertical"` or `"horizontal"`.
     *
     * __Default value:__
     * - For top-/bottom-`orient`ed legends, `"horizontal"`
     * - For left-/right-`orient`ed legends, `"vertical"`
     * - For top/bottom-left/right-`orient`ed legends, `"horizontal"` for gradient legends and
     * `"vertical"` for symbol legends.
     */
    direction?: Orientation;
    /**
     * Disable legend by default
     */
    disable?: boolean;
    /**
     * Background fill color for the full legend.
     */
    fillColor?: null | string;
    /**
     * The default direction (`"horizontal"` or `"vertical"`) for gradient legends.
     *
     * __Default value:__ `"vertical"`.
     */
    gradientDirection?: Orientation;
    /**
     * Max legend length for a horizontal gradient when `config.legend.gradientLength` is
     * undefined.
     *
     * __Default value:__ `200`
     */
    gradientHorizontalMaxLength?: number;
    /**
     * Min legend length for a horizontal gradient when `config.legend.gradientLength` is
     * undefined.
     *
     * __Default value:__ `100`
     */
    gradientHorizontalMinLength?: number;
    /**
     * The maximum allowed length in pixels of color ramp gradient labels.
     */
    gradientLabelLimit?: number;
    /**
     * Vertical offset in pixels for color ramp gradient labels.
     *
     * __Default value:__ `2`.
     */
    gradientLabelOffset?: number;
    /**
     * The length in pixels of the primary axis of a color gradient. This value corresponds to
     * the height of a vertical gradient or the width of a horizontal gradient.
     *
     * __Default value:__ `200`.
     */
    gradientLength?: number;
    /**
     * Opacity of the color gradient.
     */
    gradientOpacity?: number;
    /**
     * The color of the gradient stroke, can be in hex color code or regular color name.
     *
     * __Default value:__ `"lightGray"`.
     */
    gradientStrokeColor?: null | string;
    /**
     * The width of the gradient stroke, in pixels.
     *
     * __Default value:__ `0`.
     */
    gradientStrokeWidth?: number;
    /**
     * The thickness in pixels of the color gradient. This value corresponds to the width of a
     * vertical gradient or the height of a horizontal gradient.
     *
     * __Default value:__ `16`.
     */
    gradientThickness?: number;
    /**
     * Max legend length for a vertical gradient when `config.legend.gradientLength` is
     * undefined.
     *
     * __Default value:__ `200`
     */
    gradientVerticalMaxLength?: number;
    /**
     * Min legend length for a vertical gradient when `config.legend.gradientLength` is
     * undefined.
     *
     * __Default value:__ `100`
     */
    gradientVerticalMinLength?: number;
    /**
     * The alignment to apply to symbol legends rows and columns. The supported string values
     * are `"all"`, `"each"` (the default), and `none`. For more information, see the [grid
     * layout documentation](https://vega.github.io/vega/docs/layout).
     *
     * __Default value:__ `"each"`.
     */
    gridAlign?: LayoutAlign;
    /**
     * The alignment of the legend label, can be left, center, or right.
     */
    labelAlign?: Align;
    /**
     * The position of the baseline of legend label, can be `"top"`, `"middle"`, `"bottom"`, or
     * `"alphabetic"`.
     *
     * __Default value:__ `"middle"`.
     */
    labelBaseline?: Baseline;
    /**
     * The color of the legend label, can be in hex color code or regular color name.
     */
    labelColor?: null | string;
    /**
     * The font of the legend label.
     */
    labelFont?: string;
    /**
     * The font size of legend label.
     *
     * __Default value:__ `10`.
     */
    labelFontSize?: number;
    /**
     * The font style of legend label.
     */
    labelFontStyle?: string;
    /**
     * The font weight of legend label.
     */
    labelFontWeight?: number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of legend tick labels.
     *
     * __Default value:__ `160`.
     */
    labelLimit?: number;
    /**
     * The offset of the legend label.
     */
    labelOffset?: number;
    /**
     * Opacity of labels.
     */
    labelOpacity?: number;
    /**
     * The strategy to use for resolving overlap of labels in gradient legends. If `false`, no
     * overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing
     * every other label is used. If set to `"greedy"`, a linear scan of the labels is
     * performed, removing any label that overlaps with the last visible label (this often works
     * better for log-scaled axes).
     *
     * __Default value:__ `"greedy"` for `log scales otherwise `true`.
     */
    labelOverlap?: boolean | LabelOverlapEnum;
    /**
     * Padding in pixels between the legend and legend labels.
     */
    labelPadding?: number;
    /**
     * The minimum separation that must be between label bounding boxes for them to be
     * considered non-overlapping (default `0`). This property is ignored if *labelOverlap*
     * resolution is not enabled.
     */
    labelSeparation?: number;
    /**
     * Legend orient group layout parameters.
     */
    layout?: LegendLayout;
    /**
     * Custom x-position for legend with orient "none".
     */
    legendX?: number;
    /**
     * Custom y-position for legend with orient "none".
     */
    legendY?: number;
    /**
     * The offset in pixels by which to displace the legend from the data rectangle and axes.
     *
     * __Default value:__ `18`.
     */
    offset?: number;
    /**
     * The orientation of the legend, which determines how the legend is positioned within the
     * scene. One of `"left"`, `"right"`, `"top"`, `"bottom"`, `"top-left"`, `"top-right"`,
     * `"bottom-left"`, `"bottom-right"`, `"none"`.
     *
     * __Default value:__ `"right"`
     */
    orient?: LegendOrient;
    /**
     * The padding between the border and content of the legend group.
     *
     * __Default value:__ `0`.
     */
    padding?: number;
    /**
     * The vertical padding in pixels between symbol legend entries.
     *
     * __Default value:__ `2`.
     */
    rowPadding?: number;
    /**
     * Border stroke color for the full legend.
     */
    strokeColor?: null | string;
    /**
     * Border stroke dash pattern for the full legend.
     */
    strokeDash?: number[];
    /**
     * Border stroke width for the full legend.
     */
    strokeWidth?: number;
    /**
     * Default fill color for legend symbols. Only applied if there is no `"fill"` scale color
     * encoding for the legend.
     *
     * __Default value:__ `"transparent"`.
     */
    symbolBaseFillColor?: null | string;
    /**
     * Default stroke color for legend symbols. Only applied if there is no `"fill"` scale color
     * encoding for the legend.
     *
     * __Default value:__ `"gray"`.
     */
    symbolBaseStrokeColor?: null | string;
    /**
     * An array of alternating [stroke, space] lengths for dashed symbol strokes.
     */
    symbolDash?: number[];
    /**
     * The pixel offset at which to start drawing with the symbol stroke dash array.
     */
    symbolDashOffset?: number;
    /**
     * The default direction (`"horizontal"` or `"vertical"`) for symbol legends.
     *
     * __Default value:__ `"vertical"`.
     */
    symbolDirection?: Orientation;
    /**
     * The color of the legend symbol,
     */
    symbolFillColor?: null | string;
    /**
     * The maximum number of allowed entries for a symbol legend. Additional entries will be
     * dropped.
     */
    symbolLimit?: number;
    /**
     * Horizontal pixel offset for legend symbols.
     *
     * __Default value:__ `0`.
     */
    symbolOffset?: number;
    /**
     * Opacity of the legend symbols.
     */
    symbolOpacity?: number;
    /**
     * The size of the legend symbol, in pixels.
     *
     * __Default value:__ `100`.
     */
    symbolSize?: number;
    /**
     * Stroke color for legend symbols.
     */
    symbolStrokeColor?: null | string;
    /**
     * The width of the symbol's stroke.
     *
     * __Default value:__ `1.5`.
     */
    symbolStrokeWidth?: number;
    /**
     * The symbol shape. One of the plotting shapes `circle` (default), `square`, `cross`,
     * `diamond`, `triangle-up`, `triangle-down`, `triangle-right`, or `triangle-left`, the line
     * symbol `stroke`, or one of the centered directional shapes `arrow`, `wedge`, or
     * `triangle`. Alternatively, a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) can be provided.
     * For correct sizing, custom shape paths should be defined within a square bounding box
     * with coordinates ranging from -1 to 1 along both the x and y dimensions.
     *
     * __Default value:__ `"circle"`.
     */
    symbolType?: string;
    /**
     * The desired number of tick values for quantitative legends.
     */
    tickCount?: TimeIntervalStep | number | TimeInterval;
    /**
     * Set to null to disable title for the axis, legend, or header.
     */
    title?: null;
    /**
     * Horizontal text alignment for legend titles.
     *
     * __Default value:__ `"left"`.
     */
    titleAlign?: Align;
    /**
     * Text anchor position for placing legend titles.
     */
    titleAnchor?: TitleAnchor | null;
    /**
     * Vertical text baseline for legend titles.  One of `"alphabetic"` (default), `"top"`,
     * `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
     * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
     * relative to the *lineHeight* rather than *fontSize* alone.
     *
     * __Default value:__ `"top"`.
     */
    titleBaseline?: Baseline;
    /**
     * The color of the legend title, can be in hex color code or regular color name.
     */
    titleColor?: null | string;
    /**
     * The font of the legend title.
     */
    titleFont?: string;
    /**
     * The font size of the legend title.
     */
    titleFontSize?: number;
    /**
     * The font style of the legend title.
     */
    titleFontStyle?: string;
    /**
     * The font weight of the legend title.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    titleFontWeight?: number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of legend titles.
     *
     * __Default value:__ `180`.
     */
    titleLimit?: number;
    /**
     * Line height in pixels for multi-line title text or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    titleLineHeight?: number;
    /**
     * Opacity of the legend title.
     */
    titleOpacity?: number;
    /**
     * Orientation of the legend title.
     */
    titleOrient?: Orient;
    /**
     * The padding, in pixels, between title and legend.
     *
     * __Default value:__ `5`.
     */
    titlePadding?: number;
    /**
     * The opacity of unselected legend entries.
     *
     * __Default value:__ 0.35.
     */
    unselectedOpacity?: number;
    /**
     * The integer z-index indicating the layering of the legend group relative to other axis,
     * mark, and legend groups.
     */
    zindex?: number;
}

/**
 * Legend orient group layout parameters.
 */
export interface LegendLayout {
    /**
     * The anchor point for legend orient group layout.
     */
    anchor?: TitleAnchor | null;
    bottom?: BaseLegendLayout;
    'bottom-left'?: BaseLegendLayout;
    'bottom-right'?: BaseLegendLayout;
    /**
     * The bounds calculation to use for legend orient group layout.
     */
    bounds?: LayoutBounds;
    /**
     * A flag to center legends within a shared orient group.
     */
    center?: boolean;
    /**
     * The layout direction for legend orient group layout.
     */
    direction?: Orientation;
    left?: BaseLegendLayout;
    /**
     * The pixel margin between legends within a orient group.
     */
    margin?: number;
    /**
     * The pixel offset from the chart body for a legend orient group.
     */
    offset?: number;
    right?: BaseLegendLayout;
    top?: BaseLegendLayout;
    'top-left'?: BaseLegendLayout;
    'top-right'?: BaseLegendLayout;
}

export interface BaseLegendLayout {
    /**
     * The anchor point for legend orient group layout.
     */
    anchor?: TitleAnchor | null;
    /**
     * The bounds calculation to use for legend orient group layout.
     */
    bounds?: LayoutBounds;
    /**
     * A flag to center legends within a shared orient group.
     */
    center?: boolean;
    /**
     * The layout direction for legend orient group layout.
     */
    direction?: Orientation;
    /**
     * The pixel margin between legends within a orient group.
     */
    margin?: number;
    /**
     * The pixel offset from the chart body for a legend orient group.
     */
    offset?: number;
}

/**
 * Line-Specific Config
 *
 * Trail-Specific Config
 */
export interface LineConfig {
    /**
     * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
     * of `"left"`, `"right"`, `"center"`.
     */
    align?: Align;
    /**
     * The rotation angle of the text, in degrees.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG element, removing
     * the mark item from the ARIA accessibility tree.
     */
    aria?: boolean;
    /**
     * Sets the type of user interface element of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "role" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRole?: string;
    /**
     * A human-readable, author-localized description for the role of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "aria-roledescription" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRoleDescription?: string;
    /**
     * Whether to keep aspect ratio of image marks.
     */
    aspect?: boolean;
    /**
     * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
     * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
     * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
     * `lineHeight` rather than `fontSize` alone.
     */
    baseline?: Baseline;
    /**
     * The color blend mode for drawing an item on its current background. Any valid [CSS
     * mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value
     * can be used.
     *
     * __Default value: `"source-over"`
     */
    blend?: Blend | null;
    /**
     * Default color.
     *
     * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
     *
     * __Note:__
     * - This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     * - The `fill` and `stroke` properties have higher precedence than `color` and will
     * override `color`.
     */
    color?: ColorLinearGradient | string;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomRight?: number;
    /**
     * The radius in pixels of rounded rectangles' top right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' top left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopRight?: number;
    /**
     * The mouse cursor used over the mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * A text description of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).
     */
    description?: string;
    /**
     * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
     * This property determines on which side is truncated in response to the limit parameter.
     *
     * __Default value:__ `"ltr"`
     */
    dir?: TextDirection;
    /**
     * The horizontal offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dx?: number;
    /**
     * The vertical offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dy?: number;
    /**
     * The ellipsis string for text truncated in response to the limit parameter.
     *
     * __Default value:__ `"…"`
     */
    ellipsis?: string;
    /**
     * The end angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    endAngle?: number;
    /**
     * Default fill color. This property has higher precedence than `config.color`. Set to
     * `null` to remove fill.
     *
     * __Default value:__ (None)
     */
    fill?: FillLinearGradient | null | string;
    /**
     * Whether the mark's color should be used as fill color instead of stroke color.
     *
     * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as
     * `geoshape` marks for
     * [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources;
     * otherwise, `true`.
     *
     * __Note:__ This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     */
    filled?: boolean;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The typeface to set the text in (e.g., `"Helvetica Neue"`).
     */
    font?: string;
    /**
     * The font size, in pixels.
     *
     * __Default value:__ `11`
     */
    fontSize?: number;
    /**
     * The font style (e.g., `"italic"`).
     */
    fontStyle?: string;
    /**
     * The font weight.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * Height of the marks.
     */
    height?: number;
    /**
     * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
     */
    href?: string;
    /**
     * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
     */
    innerRadius?: number;
    /**
     * The line interpolation method to use for line and area marks. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
     * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
     * function.
     * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
     * function.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
     * - If set to `"filter"` (default), all data items with null values will be skipped (for
     * line, trail, and area marks) or filtered (for other marks).
     * - If `null`, all data items are included. In this case, invalid values will be
     * interpreted as zeroes.
     */
    invalid?: Invalid | null;
    /**
     * The maximum length of the text mark in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0` -- indicating no limit
     */
    limit?: number;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property is ignored if the text is array-valued.
     */
    lineBreak?: string;
    /**
     * The line height in pixels (the spacing between subsequent lines of text) for multi-line
     * text marks.
     */
    lineHeight?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * For line and trail marks, this `order` property can be set to `null` or `false` to make
     * the lines use the original order in the data sources.
     */
    order?: boolean | null;
    /**
     * The orientation of a non-stacked bar, tick, area, and line charts.
     * The value is either horizontal (default) or vertical.
     * - For bar, rule and tick, this determines whether the size of the bar and tick
     * should be applied to x or y dimension.
     * - For area, this property determines the orient property of the Vega output.
     * - For line and trail marks, this property determines the sort order of the points in the
     * line
     * if `config.sortLineBy` is not specified.
     * For stacked charts, this is always determined by the orientation of the stack;
     * therefore explicitly specified value will be ignored.
     */
    orient?: Orientation;
    /**
     * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
     */
    outerRadius?: number;
    /**
     * The angular padding applied to sides of the arc, in radians.
     */
    padAngle?: number;
    /**
     * A flag for overlaying points on top of line or area marks, or an object defining the
     * properties of the overlayed points.
     *
     * - If this property is `"transparent"`, transparent points will be used (for enhancing
     * tooltips and selections).
     *
     * - If this property is an empty object (`{}`) or `true`, filled points with default
     * properties will be used.
     *
     * - If this property is `false`, no points would be automatically added to line or area
     * marks.
     *
     * __Default value:__ `false`.
     */
    point?: boolean | OverlayMarkDef | PointEnum;
    /**
     * For arc mark, the primary (outer) radius in pixels.
     *
     * For text marks, polar coordinate radial offset, in pixels, of the text from the origin
     * determined by the `x` and `y` properties.
     */
    radius?: number;
    /**
     * The secondary (inner) radius in pixels of arc marks.
     */
    radius2?: number;
    /**
     * Shape of the point marks. Supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * __Default value:__ `"circle"`
     */
    shape?: string;
    /**
     * Default size for marks.
     * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that
     * this value sets the area of the symbol; the side lengths will increase with the square
     * root of this value.
     * - For `bar`, this represents the band size of the bar, in pixels.
     * - For `text`, this represents the font size, in pixels.
     *
     * __Default value:__
     * - `30` for point, circle, square marks; width/height's `step`
     * - `2` for bar marks with discrete dimensions;
     * - `5` for bar marks with continuous dimensions;
     * - `11` for text marks.
     */
    size?: number;
    /**
     * The start angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    startAngle?: number;
    /**
     * Default stroke color. This property has higher precedence than `config.color`. Set to
     * `null` to remove stroke.
     *
     * __Default value:__ (None)
     */
    stroke?: FillLinearGradient | null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The offset in pixels at which to draw the group stroke and fill. If unspecified, the
     * default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths
     * align with the pixel grid.
     */
    strokeOffset?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * Depending on the interpolation type, sets the tension parameter (for line and area marks).
     */
    tension?: number;
    /**
     * Placeholder text if the `text` channel is not specified
     */
    text?: string[] | string;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: number;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: number;
    /**
     * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks
     * will be equal to the time unit band step.
     * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
     */
    timeUnitBand?: number;
    /**
     * Default relative band position for a time unit. If set to `0`, the marks will be
     * positioned at the beginning of the time unit band step.
     * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
     */
    timeUnitBandPosition?: number;
    /**
     * The tooltip text string to show upon mouse hover or an object defining which fields
     * should the tooltip be derived from.
     *
     * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding`
     * will be used.
     * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted
     * data point will be used.
     * - If set to `null` or `false`, then no tooltip will be used.
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip  in Vega-Lite.
     *
     * __Default value:__ `null`
     */
    tooltip?: boolean | TooltipContent | number | null | string;
    /**
     * Width of the marks.
     */
    width?: number;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: number | XEnum;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: number | XEnum;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: number | YEnum;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: number | YEnum;
}

export interface PaddingClass {
    bottom?: number;
    left?: number;
    right?: number;
    top?: number;
}

/**
 * An object hash that defines default range arrays or schemes for using with scales.
 * For a full list of scale range configuration options, please see the [corresponding
 * section of the scale
 * documentation](https://vega.github.io/vega-lite/docs/scale.html#config).
 */
export interface RangeConfig {
    /**
     * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for categorical data.
     */
    category?: Array<number[] | boolean | number | null | string> | CategoryClass | RangeEnum;
    /**
     * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for diverging
     * quantitative ramps.
     */
    diverging?: Array<number[] | boolean | number | null | string> | CategoryClass | RangeEnum;
    /**
     * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for quantitative
     * heatmaps.
     */
    heatmap?: Array<number[] | boolean | number | null | string> | CategoryClass | RangeEnum;
    /**
     * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for rank-ordered data.
     */
    ordinal?: Array<number[] | boolean | number | null | string> | CategoryClass | RangeEnum;
    /**
     * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for sequential
     * quantitative ramps.
     */
    ramp?: Array<number[] | boolean | number | null | string> | CategoryClass | RangeEnum;
    /**
     * Array of [symbol](https://vega.github.io/vega/docs/marks/symbol/) names or paths for the
     * default shape palette.
     */
    symbol?: string[];
}

export interface CategoryClass {
    count?: number;
    extent?: number[];
    scheme: string[] | string;
}

/**
 * Scale configuration determines default properties for all
 * [scales](https://vega.github.io/vega-lite/docs/scale.html). For a full list of scale
 * configuration options, please see the [corresponding section of the scale
 * documentation](https://vega.github.io/vega-lite/docs/scale.html#config).
 */
export interface ScaleConfig {
    /**
     * Default inner padding for `x` and `y` band-ordinal scales.
     *
     * __Default value:__
     * - `barBandPaddingInner` for bar marks (`0.1` by default)
     * - `rectBandPaddingInner` for rect and other marks (`0` by default)
     */
    bandPaddingInner?: number;
    /**
     * Default outer padding for `x` and `y` band-ordinal scales.
     *
     * __Default value:__ `paddingInner/2` (which makes _width/height = number of unique values
     * * step_)
     */
    bandPaddingOuter?: number;
    /**
     * Default inner padding for `x` and `y` band-ordinal scales of `"bar"` marks.
     *
     * __Default value:__ `0.1`
     */
    barBandPaddingInner?: number;
    /**
     * If true, values that exceed the data domain are clamped to either the minimum or maximum
     * range value
     */
    clamp?: boolean;
    /**
     * Default padding for continuous scales.
     *
     * __Default:__ `5` for continuous x-scale of a vertical bar and continuous y-scale of a
     * horizontal bar.; `0` otherwise.
     */
    continuousPadding?: number;
    /**
     * The default max value for mapping quantitative fields to bar's size/bandSize.
     *
     * If undefined (default), we will use the axis's size (width or height) - 1.
     */
    maxBandSize?: number;
    /**
     * The default max value for mapping quantitative fields to text's size/fontSize.
     *
     * __Default value:__ `40`
     */
    maxFontSize?: number;
    /**
     * Default max opacity for mapping a field to opacity.
     *
     * __Default value:__ `0.8`
     */
    maxOpacity?: number;
    /**
     * Default max value for point size scale.
     */
    maxSize?: number;
    /**
     * Default max strokeWidth for the scale of strokeWidth for rule and line marks and of size
     * for trail marks.
     *
     * __Default value:__ `4`
     */
    maxStrokeWidth?: number;
    /**
     * The default min value for mapping quantitative fields to bar and tick's size/bandSize
     * scale with zero=false.
     *
     * __Default value:__ `2`
     */
    minBandSize?: number;
    /**
     * The default min value for mapping quantitative fields to tick's size/fontSize scale with
     * zero=false
     *
     * __Default value:__ `8`
     */
    minFontSize?: number;
    /**
     * Default minimum opacity for mapping a field to opacity.
     *
     * __Default value:__ `0.3`
     */
    minOpacity?: number;
    /**
     * Default minimum value for point size scale with zero=false.
     *
     * __Default value:__ `9`
     */
    minSize?: number;
    /**
     * Default minimum strokeWidth for the scale of strokeWidth for rule and line marks and of
     * size for trail marks with zero=false.
     *
     * __Default value:__ `1`
     */
    minStrokeWidth?: number;
    /**
     * Default outer padding for `x` and `y` point-ordinal scales.
     *
     * __Default value:__ `0.5` (which makes _width/height = number of unique values * step_)
     */
    pointPadding?: number;
    /**
     * Default range cardinality for
     * [`quantile`](https://vega.github.io/vega-lite/docs/scale.html#quantile) scale.
     *
     * __Default value:__ `4`
     */
    quantileCount?: number;
    /**
     * Default range cardinality for
     * [`quantize`](https://vega.github.io/vega-lite/docs/scale.html#quantize) scale.
     *
     * __Default value:__ `4`
     */
    quantizeCount?: number;
    /**
     * Default inner padding for `x` and `y` band-ordinal scales of `"rect"` marks.
     *
     * __Default value:__ `0`
     */
    rectBandPaddingInner?: number;
    /**
     * If true, rounds numeric output values to integers.
     * This can be helpful for snapping to the pixel grid.
     * (Only available for `x`, `y`, and `size` scales.)
     */
    round?: boolean;
    /**
     * Use the source data range before aggregation as scale domain instead of aggregated data
     * for aggregate axis.
     *
     * This is equivalent to setting `domain` to `"unaggregate"` for aggregated _quantitative_
     * fields by default.
     *
     * This property only works with aggregate functions that produce values within the raw data
     * domain (`"mean"`, `"average"`, `"median"`, `"q1"`, `"q3"`, `"min"`, `"max"`). For other
     * aggregations that produce values outside of the raw data domain (e.g. `"count"`,
     * `"sum"`), this property is ignored.
     *
     * __Default value:__ `false`
     */
    useUnaggregatedDomain?: boolean;
    /**
     * Reverse x-scale by default (useful for right-to-left charts).
     */
    xReverse?: boolean;
}

/**
 * An object hash for defining default properties for each type of selections.
 */
export interface SelectionConfig {
    /**
     * The default definition for an
     * [`interval`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All
     * properties and transformations
     * for an interval selection definition (except `type`) may be specified here.
     *
     * For instance, setting `interval` to `{"translate": false}` disables the ability to move
     * interval selections by default.
     */
    interval?: IntervalSelectionConfig;
    /**
     * The default definition for a
     * [`multi`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All
     * properties and transformations
     * for a multi selection definition (except `type`) may be specified here.
     *
     * For instance, setting `multi` to `{"toggle": "event.altKey"}` adds additional values to
     * multi selections when clicking with the alt-key pressed by default.
     */
    multi?: MultiSelectionConfig;
    /**
     * The default definition for a
     * [`single`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All
     * properties and transformations
     * for a single selection definition (except `type`) may be specified here.
     *
     * For instance, setting `single` to `{"on": "dblclick"}` populates single selections on
     * double-click by default.
     */
    single?: SingleSelectionConfig;
}

/**
 * The default definition for an
 * [`interval`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All
 * properties and transformations
 * for an interval selection definition (except `type`) may be specified here.
 *
 * For instance, setting `interval` to `{"translate": false}` disables the ability to move
 * interval selections by default.
 */
export interface IntervalSelectionConfig {
    /**
     * Establishes a two-way binding between the interval selection and the scales
     * used within the same view. This allows a user to interactively pan and
     * zoom the view.
     *
     * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
     */
    bind?: Bind;
    /**
     * Clears the selection, emptying it of all values. Can be a
     * [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable.
     *
     * __Default value:__ `dblclick`.
     *
     * __See also:__ [`clear`](https://vega.github.io/vega-lite/docs/clear.html) documentation.
     */
    clear?: boolean | ClearDerivedStream | string;
    /**
     * By default, `all` data values are considered to lie within an empty selection.
     * When set to `none`, empty selections contain no data values.
     */
    empty?: Empty;
    /**
     * An array of encoding channels. The corresponding data field values
     * must match for a data tuple to fall within the selection.
     *
     * __See also:__ [`encodings`](https://vega.github.io/vega-lite/docs/project.html)
     * documentation.
     */
    encodings?: SingleDefUnitChannel[];
    /**
     * An array of field names whose values must match for a data tuple to
     * fall within the selection.
     *
     * __See also:__ [`fields`](https://vega.github.io/vega-lite/docs/project.html)
     * documentation.
     */
    fields?: string[];
    /**
     * Initialize the selection with a mapping between [projected channels or field
     * names](https://vega.github.io/vega-lite/docs/project.html) and arrays of
     * initial values.
     *
     * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/init.html) documentation.
     */
    init?: { [key: string]: Array<boolean | DateTime | number | string> };
    /**
     * An interval selection also adds a rectangle mark to depict the
     * extents of the interval. The `mark` property can be used to customize the
     * appearance of the mark.
     *
     * __See also:__ [`mark`](https://vega.github.io/vega-lite/docs/selection-mark.html)
     * documentation.
     */
    mark?: BrushConfig;
    /**
     * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or
     * selector) that triggers the selection.
     * For interval selections, the event stream must specify a [start and
     * end](https://vega.github.io/vega/docs/event-streams/#between-filters).
     */
    on?: OnDerivedStream | string;
    /**
     * With layered and multi-view displays, a strategy that determines how
     * selections' data queries are resolved when applied in a filter transform,
     * conditional encoding rule, or scale domain.
     *
     * __See also:__ [`resolve`](https://vega.github.io/vega-lite/docs/selection-resolve.html)
     * documentation.
     */
    resolve?: SelectionResolution;
    /**
     * When truthy, allows a user to interactively move an interval selection
     * back-and-forth. Can be `true`, `false` (to disable panning), or a
     * [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)
     * which must include a start and end event to trigger continuous panning.
     *
     * __Default value:__ `true`, which corresponds to
     * `[mousedown, window:mouseup] > window:mousemove!` which corresponds to
     * clicks and dragging within an interval selection to reposition it.
     *
     * __See also:__ [`translate`](https://vega.github.io/vega-lite/docs/translate.html)
     * documentation.
     */
    translate?: boolean | string;
    /**
     * When truthy, allows a user to interactively resize an interval selection.
     * Can be `true`, `false` (to disable zooming), or a [Vega event stream
     * definition](https://vega.github.io/vega/docs/event-streams/). Currently,
     * only `wheel` events are supported.
     *
     * __Default value:__ `true`, which corresponds to `wheel!`.
     *
     * __See also:__ [`zoom`](https://vega.github.io/vega-lite/docs/zoom.html) documentation.
     */
    zoom?: boolean | string;
}

/**
 * Establishes a two-way binding between the interval selection and the scales
 * used within the same view. This allows a user to interactively pan and
 * zoom the view.
 *
 * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
 */
export enum Bind {
    Scales = 'scales',
}

/**
 * The default definition for a
 * [`multi`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All
 * properties and transformations
 * for a multi selection definition (except `type`) may be specified here.
 *
 * For instance, setting `multi` to `{"toggle": "event.altKey"}` adds additional values to
 * multi selections when clicking with the alt-key pressed by default.
 */
export interface MultiSelectionConfig {
    /**
     * When set, a selection is populated by interacting with the corresponding legend. Direct
     * manipulation interaction is disabled by default;
     * to re-enable it, set the selection's
     * [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties)
     * property.
     *
     * Legend bindings are restricted to selections that only specify a single field or encoding.
     */
    bind?: LegendStreamBinding | LegendBindingEnum;
    /**
     * Clears the selection, emptying it of all values. Can be a
     * [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable.
     *
     * __Default value:__ `dblclick`.
     *
     * __See also:__ [`clear`](https://vega.github.io/vega-lite/docs/clear.html) documentation.
     */
    clear?: boolean | ClearDerivedStream | string;
    /**
     * By default, `all` data values are considered to lie within an empty selection.
     * When set to `none`, empty selections contain no data values.
     */
    empty?: Empty;
    /**
     * An array of encoding channels. The corresponding data field values
     * must match for a data tuple to fall within the selection.
     *
     * __See also:__ [`encodings`](https://vega.github.io/vega-lite/docs/project.html)
     * documentation.
     */
    encodings?: SingleDefUnitChannel[];
    /**
     * An array of field names whose values must match for a data tuple to
     * fall within the selection.
     *
     * __See also:__ [`fields`](https://vega.github.io/vega-lite/docs/project.html)
     * documentation.
     */
    fields?: string[];
    /**
     * Initialize the selection with a mapping between [projected channels or field
     * names](https://vega.github.io/vega-lite/docs/project.html) and an initial
     * value (or array of values).
     *
     * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/init.html) documentation.
     */
    init?: { [key: string]: boolean | DateTime | number | null | string }[];
    /**
     * When true, an invisible voronoi diagram is computed to accelerate discrete
     * selection. The data value _nearest_ the mouse cursor is added to the selection.
     *
     * __See also:__ [`nearest`](https://vega.github.io/vega-lite/docs/nearest.html)
     * documentation.
     */
    nearest?: boolean;
    /**
     * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or
     * selector) that triggers the selection.
     * For interval selections, the event stream must specify a [start and
     * end](https://vega.github.io/vega/docs/event-streams/#between-filters).
     */
    on?: OnDerivedStream | string;
    /**
     * With layered and multi-view displays, a strategy that determines how
     * selections' data queries are resolved when applied in a filter transform,
     * conditional encoding rule, or scale domain.
     *
     * __See also:__ [`resolve`](https://vega.github.io/vega-lite/docs/selection-resolve.html)
     * documentation.
     */
    resolve?: SelectionResolution;
    /**
     * Controls whether data values should be toggled or only ever inserted into
     * multi selections. Can be `true`, `false` (for insertion only), or a
     * [Vega expression](https://vega.github.io/vega/docs/expressions/).
     *
     * __Default value:__ `true`, which corresponds to `event.shiftKey` (i.e.,
     * data values are toggled when a user interacts with the shift-key pressed).
     *
     * Setting the value to the Vega expression `"true"` will toggle data values
     * without the user pressing the shift-key.
     *
     * __See also:__ [`toggle`](https://vega.github.io/vega-lite/docs/toggle.html) documentation.
     */
    toggle?: boolean | string;
}

export interface LegendStreamBinding {
    legend: OnDerivedStream | string;
}

export enum LegendBindingEnum {
    Legend = 'legend',
}

/**
 * The default definition for a
 * [`single`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All
 * properties and transformations
 * for a single selection definition (except `type`) may be specified here.
 *
 * For instance, setting `single` to `{"on": "dblclick"}` populates single selections on
 * double-click by default.
 */
export interface SingleSelectionConfig {
    /**
     * When set, a selection is populated by input elements (also known as dynamic query
     * widgets)
     * or by interacting with the corresponding legend. Direct manipulation interaction is
     * disabled by default;
     * to re-enable it, set the selection's
     * [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties)
     * property.
     *
     * Legend bindings are restricted to selections that only specify a single field or
     * encoding.
     *
     * Query widget binding takes the form of Vega's [input element binding
     * definition](https://vega.github.io/vega/docs/signals/#bind)
     * or can be a mapping between projected field/encodings and binding definitions.
     *
     * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
     */
    bind?: LegendBindingEnum | FluffyBindCheckbox;
    /**
     * Clears the selection, emptying it of all values. Can be a
     * [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable.
     *
     * __Default value:__ `dblclick`.
     *
     * __See also:__ [`clear`](https://vega.github.io/vega-lite/docs/clear.html) documentation.
     */
    clear?: boolean | ClearDerivedStream | string;
    /**
     * By default, `all` data values are considered to lie within an empty selection.
     * When set to `none`, empty selections contain no data values.
     */
    empty?: Empty;
    /**
     * An array of encoding channels. The corresponding data field values
     * must match for a data tuple to fall within the selection.
     *
     * __See also:__ [`encodings`](https://vega.github.io/vega-lite/docs/project.html)
     * documentation.
     */
    encodings?: SingleDefUnitChannel[];
    /**
     * An array of field names whose values must match for a data tuple to
     * fall within the selection.
     *
     * __See also:__ [`fields`](https://vega.github.io/vega-lite/docs/project.html)
     * documentation.
     */
    fields?: string[];
    /**
     * Initialize the selection with a mapping between [projected channels or field
     * names](https://vega.github.io/vega-lite/docs/project.html) and initial values.
     *
     * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/init.html) documentation.
     */
    init?: { [key: string]: boolean | DateTime | number | null | string };
    /**
     * When true, an invisible voronoi diagram is computed to accelerate discrete
     * selection. The data value _nearest_ the mouse cursor is added to the selection.
     *
     * __See also:__ [`nearest`](https://vega.github.io/vega-lite/docs/nearest.html)
     * documentation.
     */
    nearest?: boolean;
    /**
     * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or
     * selector) that triggers the selection.
     * For interval selections, the event stream must specify a [start and
     * end](https://vega.github.io/vega/docs/event-streams/#between-filters).
     */
    on?: OnDerivedStream | string;
    /**
     * With layered and multi-view displays, a strategy that determines how
     * selections' data queries are resolved when applied in a filter transform,
     * conditional encoding rule, or scale domain.
     *
     * __See also:__ [`resolve`](https://vega.github.io/vega-lite/docs/selection-resolve.html)
     * documentation.
     */
    resolve?: SelectionResolution;
}

export interface FluffyBindCheckbox {
    debounce?: Binding | number;
    element?: Binding | string;
    input?: Binding | string;
    name?: Binding | string;
    type?: Binding | string;
    labels?: string[] | Binding;
    options?: any[] | Binding;
    max?: Binding | number;
    min?: Binding | number;
    step?: Binding | number;
    autocomplete?: Binding | string;
    placeholder?: Binding | string;
    legend?: FluffyBinding | string;
}

export interface FluffyBinding {
    debounce?: number;
    element?: string;
    input?: string;
    name?: string;
    type?: string;
    labels?: string[];
    options?: any[];
    max?: number;
    min?: number;
    step?: number;
    autocomplete?: string;
    placeholder?: string;
    between?: Stream[];
    consume?: boolean;
    filter?: string[] | string;
    markname?: string;
    marktype?: MarkType;
    source?: Source;
    throttle?: number;
    stream?: Stream;
    merge?: Stream[];
}

/**
 * An object hash that defines key-value mappings to determine default properties for marks
 * with a given [style](https://vega.github.io/vega-lite/docs/mark.html#mark-def). The keys
 * represent styles names; the values have to be valid [mark configuration
 * objects](https://vega.github.io/vega-lite/docs/mark.html#config).
 */
export interface StyleConfigIndex {
    /**
     * Arc-specific Config
     */
    arc?: RectConfig;
    /**
     * Area-Specific Config
     */
    area?: AreaConfig;
    /**
     * Bar-Specific Config
     */
    bar?: BarConfig;
    /**
     * Circle-Specific Config
     */
    circle?: MarkConfig;
    /**
     * Geoshape-Specific Config
     */
    geoshape?: MarkConfig;
    /**
     * Default style for chart subtitles
     */
    'group-subtitle'?: MarkConfig;
    /**
     * Default style for chart titles
     */
    'group-title'?: MarkConfig;
    /**
     * Default style for axis, legend, and header labels.
     */
    'guide-label'?: MarkConfig;
    /**
     * Default style for axis, legend, and header titles.
     */
    'guide-title'?: MarkConfig;
    /**
     * Image-specific Config
     */
    image?: RectConfig;
    /**
     * Line-Specific Config
     */
    line?: LineConfig;
    /**
     * Mark Config
     */
    mark?: MarkConfig;
    /**
     * Point-Specific Config
     */
    point?: MarkConfig;
    /**
     * Rect-Specific Config
     */
    rect?: RectConfig;
    /**
     * Rule-Specific Config
     */
    rule?: MarkConfig;
    /**
     * Square-Specific Config
     */
    square?: MarkConfig;
    /**
     * Text-Specific Config
     */
    text?: MarkConfig;
    /**
     * Tick-Specific Config
     */
    tick?: TickConfig;
    /**
     * Trail-Specific Config
     */
    trail?: LineConfig;
}

/**
 * Tick-Specific Config
 */
export interface TickConfig {
    /**
     * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
     * of `"left"`, `"right"`, `"center"`.
     */
    align?: Align;
    /**
     * The rotation angle of the text, in degrees.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG element, removing
     * the mark item from the ARIA accessibility tree.
     */
    aria?: boolean;
    /**
     * Sets the type of user interface element of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "role" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRole?: string;
    /**
     * A human-readable, author-localized description for the role of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "aria-roledescription" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRoleDescription?: string;
    /**
     * Whether to keep aspect ratio of image marks.
     */
    aspect?: boolean;
    /**
     * The width of the ticks.
     *
     * __Default value:__  3/4 of step (width step for horizontal ticks and height step for
     * vertical ticks).
     */
    bandSize?: number;
    /**
     * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
     * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
     * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
     * `lineHeight` rather than `fontSize` alone.
     */
    baseline?: Baseline;
    /**
     * The color blend mode for drawing an item on its current background. Any valid [CSS
     * mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value
     * can be used.
     *
     * __Default value: `"source-over"`
     */
    blend?: Blend | null;
    /**
     * Default color.
     *
     * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
     *
     * __Note:__
     * - This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     * - The `fill` and `stroke` properties have higher precedence than `color` and will
     * override `color`.
     */
    color?: ColorLinearGradient | string;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomRight?: number;
    /**
     * The radius in pixels of rounded rectangles' top right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' top left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopRight?: number;
    /**
     * The mouse cursor used over the mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * A text description of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).
     */
    description?: string;
    /**
     * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
     * This property determines on which side is truncated in response to the limit parameter.
     *
     * __Default value:__ `"ltr"`
     */
    dir?: TextDirection;
    /**
     * The horizontal offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dx?: number;
    /**
     * The vertical offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dy?: number;
    /**
     * The ellipsis string for text truncated in response to the limit parameter.
     *
     * __Default value:__ `"…"`
     */
    ellipsis?: string;
    /**
     * The end angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    endAngle?: number;
    /**
     * Default fill color. This property has higher precedence than `config.color`. Set to
     * `null` to remove fill.
     *
     * __Default value:__ (None)
     */
    fill?: FillLinearGradient | null | string;
    /**
     * Whether the mark's color should be used as fill color instead of stroke color.
     *
     * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as
     * `geoshape` marks for
     * [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources;
     * otherwise, `true`.
     *
     * __Note:__ This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     */
    filled?: boolean;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The typeface to set the text in (e.g., `"Helvetica Neue"`).
     */
    font?: string;
    /**
     * The font size, in pixels.
     *
     * __Default value:__ `11`
     */
    fontSize?: number;
    /**
     * The font style (e.g., `"italic"`).
     */
    fontStyle?: string;
    /**
     * The font weight.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * Height of the marks.
     */
    height?: number;
    /**
     * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
     */
    href?: string;
    /**
     * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
     */
    innerRadius?: number;
    /**
     * The line interpolation method to use for line and area marks. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
     * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
     * function.
     * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
     * function.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
     * - If set to `"filter"` (default), all data items with null values will be skipped (for
     * line, trail, and area marks) or filtered (for other marks).
     * - If `null`, all data items are included. In this case, invalid values will be
     * interpreted as zeroes.
     */
    invalid?: Invalid | null;
    /**
     * The maximum length of the text mark in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0` -- indicating no limit
     */
    limit?: number;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property is ignored if the text is array-valued.
     */
    lineBreak?: string;
    /**
     * The line height in pixels (the spacing between subsequent lines of text) for multi-line
     * text marks.
     */
    lineHeight?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * For line and trail marks, this `order` property can be set to `null` or `false` to make
     * the lines use the original order in the data sources.
     */
    order?: boolean | null;
    /**
     * The orientation of a non-stacked bar, tick, area, and line charts.
     * The value is either horizontal (default) or vertical.
     * - For bar, rule and tick, this determines whether the size of the bar and tick
     * should be applied to x or y dimension.
     * - For area, this property determines the orient property of the Vega output.
     * - For line and trail marks, this property determines the sort order of the points in the
     * line
     * if `config.sortLineBy` is not specified.
     * For stacked charts, this is always determined by the orientation of the stack;
     * therefore explicitly specified value will be ignored.
     */
    orient?: Orientation;
    /**
     * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
     */
    outerRadius?: number;
    /**
     * The angular padding applied to sides of the arc, in radians.
     */
    padAngle?: number;
    /**
     * For arc mark, the primary (outer) radius in pixels.
     *
     * For text marks, polar coordinate radial offset, in pixels, of the text from the origin
     * determined by the `x` and `y` properties.
     */
    radius?: number;
    /**
     * The secondary (inner) radius in pixels of arc marks.
     */
    radius2?: number;
    /**
     * Shape of the point marks. Supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * __Default value:__ `"circle"`
     */
    shape?: string;
    /**
     * Default size for marks.
     * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that
     * this value sets the area of the symbol; the side lengths will increase with the square
     * root of this value.
     * - For `bar`, this represents the band size of the bar, in pixels.
     * - For `text`, this represents the font size, in pixels.
     *
     * __Default value:__
     * - `30` for point, circle, square marks; width/height's `step`
     * - `2` for bar marks with discrete dimensions;
     * - `5` for bar marks with continuous dimensions;
     * - `11` for text marks.
     */
    size?: number;
    /**
     * The start angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    startAngle?: number;
    /**
     * Default stroke color. This property has higher precedence than `config.color`. Set to
     * `null` to remove stroke.
     *
     * __Default value:__ (None)
     */
    stroke?: FillLinearGradient | null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The offset in pixels at which to draw the group stroke and fill. If unspecified, the
     * default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths
     * align with the pixel grid.
     */
    strokeOffset?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * Depending on the interpolation type, sets the tension parameter (for line and area marks).
     */
    tension?: number;
    /**
     * Placeholder text if the `text` channel is not specified
     */
    text?: string[] | string;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: number;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: number;
    /**
     * Thickness of the tick mark.
     *
     * __Default value:__  `1`
     */
    thickness?: number;
    /**
     * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks
     * will be equal to the time unit band step.
     * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
     */
    timeUnitBand?: number;
    /**
     * Default relative band position for a time unit. If set to `0`, the marks will be
     * positioned at the beginning of the time unit band step.
     * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
     */
    timeUnitBandPosition?: number;
    /**
     * The tooltip text string to show upon mouse hover or an object defining which fields
     * should the tooltip be derived from.
     *
     * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding`
     * will be used.
     * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted
     * data point will be used.
     * - If set to `null` or `false`, then no tooltip will be used.
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip  in Vega-Lite.
     *
     * __Default value:__ `null`
     */
    tooltip?: boolean | TooltipContent | number | null | string;
    /**
     * Width of the marks.
     */
    width?: number;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: number | XEnum;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: number | XEnum;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: number | YEnum;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: number | YEnum;
}

/**
 * Circle-Specific Config
 *
 * Geoshape-Specific Config
 *
 * Mark Config
 *
 * Point-Specific Config
 *
 * Rule-Specific Config
 *
 * Square-Specific Config
 *
 * Default style for chart subtitles
 *
 * Default style for chart titles
 *
 * Default style for axis, legend, and header labels.
 *
 * Default style for axis, legend, and header titles.
 *
 * Text-Specific Config
 *
 * Area-Specific Config
 *
 * Bar-Specific Config
 *
 * Arc-specific Config
 *
 * Image-specific Config
 *
 * Rect-Specific Config
 *
 * Line-Specific Config
 *
 * Trail-Specific Config
 *
 * Tick-Specific Config
 */
export interface AnyMarkConfig {
    /**
     * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One
     * of `"left"`, `"right"`, `"center"`.
     */
    align?: Align;
    /**
     * The rotation angle of the text, in degrees.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG element, removing
     * the mark item from the ARIA accessibility tree.
     *
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG group, removing the
     * axis from the ARIA accessibility tree.
     *
     * __Default value:__ `true`
     */
    aria?: boolean;
    /**
     * Sets the type of user interface element of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "role" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRole?: string;
    /**
     * A human-readable, author-localized description for the role of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the "aria-roledescription" attribute.
     * Warning: this property is experimental and may be changed in the future.
     */
    ariaRoleDescription?: string;
    /**
     * Whether to keep aspect ratio of image marks.
     */
    aspect?: boolean;
    /**
     * The vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`,
     * `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values
     * operate similarly to `"top"` and `"bottom"`, but are calculated relative to the
     * `lineHeight` rather than `fontSize` alone.
     */
    baseline?: Baseline;
    /**
     * The color blend mode for drawing an item on its current background. Any valid [CSS
     * mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value
     * can be used.
     *
     * __Default value: `"source-over"`
     */
    blend?: Blend | null;
    /**
     * Default color.
     *
     * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
     *
     * __Note:__
     * - This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     * - The `fill` and `stroke` properties have higher precedence than `color` and will
     * override `color`.
     */
    color?: ColorLinearGradient | string;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' bottom right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusBottomRight?: number;
    /**
     * The radius in pixels of rounded rectangles' top right corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopLeft?: number;
    /**
     * The radius in pixels of rounded rectangles' top left corner.
     *
     * __Default value:__ `0`
     */
    cornerRadiusTopRight?: number;
    /**
     * The mouse cursor used over the mark. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * A text description of the mark item for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If specified, this property determines the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).
     *
     * A text description of this axis for [ARIA
     * accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) (SVG
     * output only).
     * If the `aria` property is true, for SVG output the ["aria-label"
     * attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)
     * will be set to this description.
     * If the description is unspecified it will be automatically generated.
     */
    description?: string;
    /**
     * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left).
     * This property determines on which side is truncated in response to the limit parameter.
     *
     * __Default value:__ `"ltr"`
     */
    dir?: TextDirection;
    /**
     * The horizontal offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dx?: number;
    /**
     * The vertical offset, in pixels, between the text label and its anchor point. The offset
     * is applied after rotation by the _angle_ property.
     */
    dy?: number;
    /**
     * The ellipsis string for text truncated in response to the limit parameter.
     *
     * __Default value:__ `"…"`
     */
    ellipsis?: string;
    /**
     * The end angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    endAngle?: number;
    /**
     * Default fill color. This property has higher precedence than `config.color`. Set to
     * `null` to remove fill.
     *
     * __Default value:__ (None)
     */
    fill?: FillLinearGradient | null | string;
    /**
     * Whether the mark's color should be used as fill color instead of stroke color.
     *
     * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as
     * `geoshape` marks for
     * [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources;
     * otherwise, `true`.
     *
     * __Note:__ This property cannot be used in a [style
     * config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
     */
    filled?: boolean;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * The typeface to set the text in (e.g., `"Helvetica Neue"`).
     */
    font?: string;
    /**
     * The font size, in pixels.
     *
     * __Default value:__ `11`
     */
    fontSize?: number;
    /**
     * The font style (e.g., `"italic"`).
     */
    fontStyle?: string;
    /**
     * The font weight.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * Height of the marks.
     */
    height?: number;
    /**
     * A URL to load upon mouse click. If defined, the mark acts as a hyperlink.
     */
    href?: string;
    /**
     * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
     */
    innerRadius?: number;
    /**
     * The line interpolation method to use for line and area marks. One of the following:
     * - `"linear"`: piecewise linear segments, as in a polyline.
     * - `"linear-closed"`: close the linear segments to form a polygon.
     * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
     * - `"step-before"`: alternate between vertical and horizontal segments, as in a step
     * function.
     * - `"step-after"`: alternate between horizontal and vertical segments, as in a step
     * function.
     * - `"basis"`: a B-spline, with control point duplication on the ends.
     * - `"basis-open"`: an open B-spline; may not intersect the start or end.
     * - `"basis-closed"`: a closed B-spline, as in a loop.
     * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
     * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but
     * will intersect other control points.
     * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
     * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the
     * spline.
     * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
     */
    interpolate?: Interpolate;
    /**
     * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
     * - If set to `"filter"` (default), all data items with null values will be skipped (for
     * line, trail, and area marks) or filtered (for other marks).
     * - If `null`, all data items are included. In this case, invalid values will be
     * interpreted as zeroes.
     */
    invalid?: Invalid | null;
    /**
     * The maximum length of the text mark in pixels. The text value will be automatically
     * truncated if the rendered size exceeds the limit.
     *
     * __Default value:__ `0` -- indicating no limit
     */
    limit?: number;
    /**
     * A delimiter, such as a newline character, upon which to break text strings into multiple
     * lines. This property is ignored if the text is array-valued.
     */
    lineBreak?: string;
    /**
     * The line height in pixels (the spacing between subsequent lines of text) for multi-line
     * text marks.
     */
    lineHeight?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * For line and trail marks, this `order` property can be set to `null` or `false` to make
     * the lines use the original order in the data sources.
     */
    order?: boolean | null;
    /**
     * The orientation of a non-stacked bar, tick, area, and line charts.
     * The value is either horizontal (default) or vertical.
     * - For bar, rule and tick, this determines whether the size of the bar and tick
     * should be applied to x or y dimension.
     * - For area, this property determines the orient property of the Vega output.
     * - For line and trail marks, this property determines the sort order of the points in the
     * line
     * if `config.sortLineBy` is not specified.
     * For stacked charts, this is always determined by the orientation of the stack;
     * therefore explicitly specified value will be ignored.
     *
     * The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The
     * orientation can be used to further specialize the axis type (e.g., a y-axis oriented
     * towards the right edge of the chart).
     *
     * __Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.
     */
    orient?: StyleOrient;
    /**
     * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
     */
    outerRadius?: number;
    /**
     * The angular padding applied to sides of the arc, in radians.
     */
    padAngle?: number;
    /**
     * For arc mark, the primary (outer) radius in pixels.
     *
     * For text marks, polar coordinate radial offset, in pixels, of the text from the origin
     * determined by the `x` and `y` properties.
     */
    radius?: number;
    /**
     * The secondary (inner) radius in pixels of arc marks.
     */
    radius2?: number;
    /**
     * Shape of the point marks. Supported values include:
     * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
     * `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
     * - the line symbol `"stroke"`
     * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
     * - a custom [SVG path
     * string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct
     * sizing, custom shape paths should be defined within a square bounding box with
     * coordinates ranging from -1 to 1 along both the x and y dimensions.)
     *
     * __Default value:__ `"circle"`
     */
    shape?: string;
    /**
     * Default size for marks.
     * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that
     * this value sets the area of the symbol; the side lengths will increase with the square
     * root of this value.
     * - For `bar`, this represents the band size of the bar, in pixels.
     * - For `text`, this represents the font size, in pixels.
     *
     * __Default value:__
     * - `30` for point, circle, square marks; width/height's `step`
     * - `2` for bar marks with discrete dimensions;
     * - `5` for bar marks with continuous dimensions;
     * - `11` for text marks.
     */
    size?: number;
    /**
     * The start angle in radians for arc marks.
     * A value of `0` indicates up (north), increasing values proceed clockwise.
     */
    startAngle?: number;
    /**
     * Default stroke color. This property has higher precedence than `config.color`. Set to
     * `null` to remove stroke.
     *
     * __Default value:__ (None)
     */
    stroke?: FillLinearGradient | null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The offset in pixels at which to draw the group stroke and fill. If unspecified, the
     * default behavior is to dynamically offset stroked groups such that 1 pixel stroke widths
     * align with the pixel grid.
     */
    strokeOffset?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * Depending on the interpolation type, sets the tension parameter (for line and area marks).
     */
    tension?: number;
    /**
     * Text-Specific Config
     *
     * Placeholder text if the `text` channel is not specified
     */
    text?: string[] | string;
    /**
     * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the
     * start arc angle. (A value of 0 indicates up or “north”, increasing values proceed
     * clockwise.)
     *
     * - For text marks, polar coordinate angle in radians.
     */
    theta?: number;
    /**
     * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing
     * values proceed clockwise.
     */
    theta2?: number;
    /**
     * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks
     * will be equal to the time unit band step.
     * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
     */
    timeUnitBand?: number;
    /**
     * Default relative band position for a time unit. If set to `0`, the marks will be
     * positioned at the beginning of the time unit band step.
     * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
     */
    timeUnitBandPosition?: number;
    /**
     * The tooltip text string to show upon mouse hover or an object defining which fields
     * should the tooltip be derived from.
     *
     * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding`
     * will be used.
     * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted
     * data point will be used.
     * - If set to `null` or `false`, then no tooltip will be used.
     *
     * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for
     * a detailed discussion about tooltip  in Vega-Lite.
     *
     * __Default value:__ `null`
     */
    tooltip?: boolean | TooltipContent | number | null | string;
    /**
     * Width of the marks.
     */
    width?: number;
    /**
     * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified
     * `x2` or `width`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x?: number | XEnum;
    /**
     * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"width"` for the width of the
     * plot.
     */
    x2?: number | XEnum;
    /**
     * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified
     * `y2` or `height`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y?: number | YEnum;
    /**
     * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
     *
     * The `value` of this channel can be a number or a string `"height"` for the height of the
     * plot.
     */
    y2?: number | YEnum;
    /**
     * Line-Specific Config
     *
     * A flag for overlaying line on top of area marks, or an object defining the properties of
     * the overlayed lines.
     *
     * - If this value is an empty object (`{}`) or `true`, lines with default properties will
     * be used.
     *
     * - If this value is `false`, no lines would be automatically added to area marks.
     *
     * __Default value:__ `false`.
     */
    line?: boolean | OverlayMarkDef;
    /**
     * Point-Specific Config
     *
     * A flag for overlaying points on top of line or area marks, or an object defining the
     * properties of the overlayed points.
     *
     * - If this property is `"transparent"`, transparent points will be used (for enhancing
     * tooltips and selections).
     *
     * - If this property is an empty object (`{}`) or `true`, filled points with default
     * properties will be used.
     *
     * - If this property is `false`, no points would be automatically added to line or area
     * marks.
     *
     * __Default value:__ `false`.
     */
    point?: boolean | OverlayMarkDef | PointEnum;
    /**
     * Offset between bars for binned field. The ideal value for this is either 0 (preferred by
     * statisticians) or 1 (Vega-Lite default, D3 example style).
     *
     * __Default value:__ `1`
     */
    binSpacing?: number;
    /**
     * The default size of the bars on continuous scales.
     *
     * __Default value:__ `5`
     */
    continuousBandSize?: number;
    /**
     * - For vertical bars, top-left and top-right corner radius.
     * - For horizontal bars, top-right and bottom-right corner radius.
     */
    cornerRadiusEnd?: number;
    /**
     * The default size of the bars with discrete dimensions. If unspecified, the default size
     * is  `step-2`, which provides 2 pixel offset between bars.
     */
    discreteBandSize?: number;
    /**
     * The width of the ticks.
     *
     * __Default value:__  3/4 of step (width step for horizontal ticks and height step for
     * vertical ticks).
     */
    bandSize?: number;
    /**
     * Thickness of the tick mark.
     *
     * __Default value:__  `1`
     */
    thickness?: number;
    /**
     * An interpolation fraction indicating where, for `band` scales, axis ticks should be
     * positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5`
     * places ticks in the middle of their bands.
     *
     * __Default value:__ `0.5`
     */
    bandPosition?: number;
    /**
     * A boolean flag indicating if the domain (the axis baseline) should be included as part of
     * the axis.
     *
     * __Default value:__ `true`
     */
    domain?: boolean;
    /**
     * The stroke cap for the domain line's ending style. One of `"butt"`, `"round"` or
     * `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    domainCap?: StrokeCap;
    /**
     * Color of axis domain line.
     *
     * __Default value:__ `"gray"`.
     */
    domainColor?: null | string;
    /**
     * An array of alternating [stroke, space] lengths for dashed domain lines.
     */
    domainDash?: number[];
    /**
     * The pixel offset at which to start drawing with the domain dash array.
     */
    domainDashOffset?: number;
    /**
     * Opacity of the axis domain line.
     */
    domainOpacity?: number;
    /**
     * Stroke width of axis domain line
     *
     * __Default value:__ `1`
     */
    domainWidth?: number;
    /**
     * When used with the default `"number"` and `"time"` format type, the text formatting
     * pattern for labels of guides (axes, legends, headers) and text marks.
     *
     * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number
     * format pattern](https://github.com/d3/d3-format#locale_format).
     * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format
     * pattern](https://github.com/d3/d3-time-format#locale_format).
     *
     * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for
     * more examples.
     *
     * When used with a [custom
     * `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this
     * value will be passed as `format` alongside `datum.value` to the registered function.
     *
     * __Default value:__  Derived from
     * [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for
     * number format and from
     * [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time
     * format.
     */
    format?: { [key: string]: any } | string;
    /**
     * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format
     * type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
     *
     * __Default value:__
     * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
     * - `"number"` for quantitative fields as well as ordinal and nominal fields without
     * `timeUnit`.
     */
    formatType?: string;
    /**
     * A boolean flag indicating if grid lines should be included as part of the axis
     *
     * __Default value:__ `true` for [continuous
     * scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned;
     * otherwise, `false`.
     */
    grid?: boolean;
    /**
     * The stroke cap for grid lines' ending style. One of `"butt"`, `"round"` or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    gridCap?: StrokeCap;
    gridColor?: ConditionalAxisPropertyColorNull | null | string;
    gridDash?: number[] | ConditionalAxisPropertyNumberNull;
    gridDashOffset?: ConditionalAxisPropertyNumberNullClass | number;
    gridOpacity?: ConditionalAxisPropertyNumberNullClass | number;
    gridWidth?: ConditionalAxisPropertyNumberNullClass | number;
    labelAlign?: ConditionalAxisPropertyAlignNull | Align;
    /**
     * The rotation angle of the axis labels.
     *
     * __Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.
     */
    labelAngle?: number;
    labelBaseline?: ConditionalAxisPropertyTextBaselineNull | Baseline;
    /**
     * Indicates if labels should be hidden if they exceed the axis range. If `false` (the
     * default) no bounds overlap analysis is performed. If `true`, labels will be hidden if
     * they exceed the axis range by more than 1 pixel. If this property is a number, it
     * specifies the pixel tolerance: the maximum amount by which a label bounding box may
     * exceed the axis range.
     *
     * __Default value:__ `false`.
     */
    labelBound?: boolean | number;
    labelColor?: ConditionalAxisPropertyColorNull | null | string;
    /**
     * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.
     *
     * __Note:__ The label text and value can be assessed via the `label` and `value` properties
     * of the axis's backing `datum` object.
     */
    labelExpr?: string;
    /**
     * Indicates if the first and last axis labels should be aligned flush with the scale range.
     * Flush alignment for a horizontal axis will left-align the first label and right-align the
     * last label. For vertical axes, bottom and top text baselines are applied instead. If this
     * property is a number, it also indicates the number of pixels by which to offset the first
     * and last labels; for example, a value of 2 will flush-align the first and last labels and
     * also push them 2 pixels outward from the center of the axis. The additional adjustment
     * can sometimes help the labels better visually group with corresponding axis ticks.
     *
     * __Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.
     */
    labelFlush?: boolean | number;
    /**
     * Indicates the number of pixels by which to offset flush-adjusted labels. For example, a
     * value of `2` will push flush-adjusted labels 2 pixels outward from the center of the
     * axis. Offsets can help the labels better visually group with corresponding axis ticks.
     *
     * __Default value:__ `0`.
     */
    labelFlushOffset?: number;
    labelFont?: ConditionalAxisPropertyStringNull | string;
    labelFontSize?: ConditionalAxisPropertyNumberNullClass | number;
    labelFontStyle?: ConditionalAxisPropertyFontStyleNull | string;
    labelFontWeight?: ConditionalAxisPropertyFontWeightNull | number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of axis tick labels.
     *
     * __Default value:__ `180`
     */
    labelLimit?: number;
    /**
     * Line height in pixels for multi-line label text or label text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    labelLineHeight?: number;
    labelOffset?: ConditionalAxisPropertyNumberNullClass | number;
    labelOpacity?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * The strategy to use for resolving overlap of axis labels. If `false` (the default), no
     * overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing
     * every other label is used (this works well for standard linear axes). If set to
     * `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps
     * with the last visible label (this often works better for log-scaled axes).
     *
     * __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log
     * scales; otherwise `false`.
     */
    labelOverlap?: boolean | LabelOverlapEnum;
    labelPadding?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * A boolean flag indicating if labels should be included as part of the axis.
     *
     * __Default value:__ `true`.
     */
    labels?: boolean;
    /**
     * The minimum separation that must be between label bounding boxes for them to be
     * considered non-overlapping (default `0`). This property is ignored if *labelOverlap*
     * resolution is not enabled.
     */
    labelSeparation?: number;
    /**
     * The maximum extent in pixels that axis ticks and labels should use. This determines a
     * maximum offset value for axis titles.
     *
     * __Default value:__ `undefined`.
     */
    maxExtent?: number;
    /**
     * The minimum extent in pixels that axis ticks and labels should use. This determines a
     * minimum offset value for axis titles.
     *
     * __Default value:__ `30` for y-axis; `undefined` for x-axis.
     */
    minExtent?: number;
    /**
     * The offset, in pixels, by which to displace the axis from the edge of the enclosing group
     * or data rectangle.
     *
     * __Default value:__ derived from the [axis
     * config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s `offset`
     * (`0` by default)
     */
    offset?: number;
    /**
     * The anchor position of the axis in pixels. For x-axes with top or bottom orientation,
     * this sets the axis group x coordinate. For y-axes with left or right orientation, this
     * sets the axis group y coordinate.
     *
     * __Default value__: `0`
     */
    position?: number;
    /**
     * A string or array of strings indicating the name of custom styles to apply to the axis. A
     * style is a named collection of axis property defined within the [style
     * configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is
     * an array, later styles will override earlier styles.
     *
     * __Default value:__ (none)
     * __Note:__ Any specified style will augment the default style. For example, an x-axis mark
     * with `"style": "foo"` will use `config.axisX` and `config.style.foo` (the specified style
     * `"foo"` has higher precedence).
     */
    style?: string[] | string;
    /**
     * For band scales, indicates if ticks and grid lines should be placed at the `"center"` of
     * a band (default) or at the band `"extent"`s to indicate intervals
     */
    tickBand?: TickBand;
    /**
     * The stroke cap for the tick lines' ending style. One of `"butt"`, `"round"` or
     * `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    tickCap?: StrokeCap;
    tickColor?: ConditionalAxisPropertyColorNull | null | string;
    /**
     * A desired number of ticks, for axes visualizing quantitative scales. The resulting number
     * may be different so that values are "nice" (multiples of 2, 5, 10) and lie within the
     * underlying scale's range.
     *
     * For scales of type `"time"` or `"utc"`, the tick count can instead be a time interval
     * specifier. Legal string values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`,
     * `"day"`, `"week"`, `"month"`, and "year". Alternatively, an object-valued interval
     * specifier of the form `{"interval": "month", "step": 3}` includes a desired number of
     * interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct)
     * boundary.
     *
     * __Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)`
     * for y.
     */
    tickCount?: TimeIntervalStep | number | TimeInterval;
    tickDash?: number[] | ConditionalAxisPropertyNumberNull;
    tickDashOffset?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * Boolean flag indicating if an extra axis tick should be added for the initial position of
     * the axis. This flag is useful for styling axes for `band` scales such that ticks are
     * placed on band boundaries rather in the middle of a band. Use in conjunction with
     * `"bandPosition": 1` and an axis `"padding"` value of `0`.
     */
    tickExtra?: boolean;
    /**
     * The minimum desired step between axis ticks, in terms of scale domain values. For
     * example, a value of `1` indicates that ticks should not be less than 1 unit apart. If
     * `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to
     * enforce the minimum step value.
     */
    tickMinStep?: number;
    /**
     * Position offset in pixels to apply to ticks, labels, and gridlines.
     */
    tickOffset?: number;
    tickOpacity?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * Boolean flag indicating if pixel position values should be rounded to the nearest
     * integer.
     *
     * __Default value:__ `true`
     */
    tickRound?: boolean;
    /**
     * Boolean value that determines whether the axis should include ticks.
     *
     * __Default value:__ `true`
     */
    ticks?: boolean;
    tickSize?: ConditionalAxisPropertyNumberNullClass | number;
    tickWidth?: ConditionalAxisPropertyNumberNullClass | number;
    /**
     * A title for the field. If `null`, the title will be removed.
     *
     * __Default value:__  derived from the field's name and transformation function
     * (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function
     * is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or
     * has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit
     * (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field
     * name.
     *
     * __Notes__:
     *
     * 1) You can customize the default field title format by providing the
     * [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config)
     * property in the [config](https://vega.github.io/vega-lite/docs/config.html) or
     * [`fieldTitle` function via the `compile` function's
     * options](https://vega.github.io/vega-lite/docs/compile.html#field-title).
     *
     * 2) If both field definition's `title` and axis, header, or legend `title` are defined,
     * axis/header/legend title will be used.
     */
    title?: string[] | null | string;
    /**
     * Horizontal text alignment of axis titles.
     */
    titleAlign?: Align;
    /**
     * Text anchor position for placing axis titles.
     */
    titleAnchor?: TitleAnchor | null;
    /**
     * Angle in degrees of axis titles.
     */
    titleAngle?: number;
    /**
     * Vertical text baseline for axis titles. One of `"alphabetic"` (default), `"top"`,
     * `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
     * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
     * relative to the *lineHeight* rather than *fontSize* alone.
     */
    titleBaseline?: Baseline;
    /**
     * Color of the title, can be in hex color code or regular color name.
     */
    titleColor?: null | string;
    /**
     * Font of the title. (e.g., `"Helvetica Neue"`).
     */
    titleFont?: string;
    /**
     * Font size of the title.
     */
    titleFontSize?: number;
    /**
     * Font style of the title.
     */
    titleFontStyle?: string;
    /**
     * Font weight of the title.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    titleFontWeight?: number | FontWeightEnum;
    /**
     * Maximum allowed pixel width of axis titles.
     */
    titleLimit?: number;
    /**
     * Line height in pixels for multi-line title text or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    titleLineHeight?: number;
    /**
     * Opacity of the axis title.
     */
    titleOpacity?: number;
    /**
     * The padding, in pixels, between title and axis.
     */
    titlePadding?: number;
    /**
     * X-coordinate of the axis title relative to the axis group.
     */
    titleX?: number;
    /**
     * Y-coordinate of the axis title relative to the axis group.
     */
    titleY?: number;
    /**
     * Coordinate space translation offset for axis layout. By default, axes are translated by a
     * 0.5 pixel offset for both the x and y coordinates in order to align stroked lines with
     * the pixel grid. However, for vector graphics output these pixel-specific adjustments may
     * be undesirable, in which case translate can be changed (for example, to zero).
     *
     * __Default value:__ `0.5`
     */
    translate?: number;
    /**
     * Explicitly set the visible axis tick values.
     */
    values?: Array<boolean | DateTime | number | string>;
    /**
     * A non-negative integer indicating the z-index of the axis.
     * If zindex is 0, axes should be drawn behind all chart elements.
     * To put them in front, set `zindex` to `1` or more.
     *
     * __Default value:__ `0` (behind the marks).
     */
    zindex?: number;
}

/**
 * The orientation of a non-stacked bar, tick, area, and line charts.
 * The value is either horizontal (default) or vertical.
 * - For bar, rule and tick, this determines whether the size of the bar and tick
 * should be applied to x or y dimension.
 * - For area, this property determines the orient property of the Vega output.
 * - For line and trail marks, this property determines the sort order of the points in the
 * line
 * if `config.sortLineBy` is not specified.
 * For stacked charts, this is always determined by the orientation of the stack;
 * therefore explicitly specified value will be ignored.
 *
 * The direction of the legend, one of `"vertical"` or `"horizontal"`.
 *
 * __Default value:__
 * - For top-/bottom-`orient`ed legends, `"horizontal"`
 * - For left-/right-`orient`ed legends, `"vertical"`
 * - For top/bottom-left/right-`orient`ed legends, `"horizontal"` for gradient legends and
 * `"vertical"` for symbol legends.
 *
 * The default direction (`"horizontal"` or `"vertical"`) for gradient legends.
 *
 * __Default value:__ `"vertical"`.
 *
 * The layout direction for legend orient group layout.
 *
 * The default direction (`"horizontal"` or `"vertical"`) for symbol legends.
 *
 * __Default value:__ `"vertical"`.
 *
 * Orientation of the box plot. This is normally automatically determined based on types of
 * fields on x and y channels. However, an explicit `orient` be specified when the
 * orientation is ambiguous.
 *
 * __Default value:__ `"vertical"`.
 *
 * Orientation of the error bar. This is normally automatically determined, but can be
 * specified when the orientation is ambiguous and cannot be automatically determined.
 *
 * Orientation of the error band. This is normally automatically determined, but can be
 * specified when the orientation is ambiguous and cannot be automatically determined.
 *
 * The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The
 * orientation can be used to further specialize the axis type (e.g., a y-axis oriented
 * towards the right edge of the chart).
 *
 * __Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.
 */
export enum StyleOrient {
    Bottom = 'bottom',
    Horizontal = 'horizontal',
    Left = 'left',
    Right = 'right',
    Top = 'top',
    Vertical = 'vertical',
}

/**
 * Title configuration, which determines default properties for all
 * [titles](https://vega.github.io/vega-lite/docs/title.html). For a full list of title
 * configuration options, please see the [corresponding section of the title
 * documentation](https://vega.github.io/vega-lite/docs/title.html#config).
 */
export interface BaseTitleNoValueRefs {
    /**
     * Horizontal text alignment for title text. One of `"left"`, `"center"`, or `"right"`.
     */
    align?: Align;
    /**
     * The anchor position for placing the title and subtitle text. One of `"start"`,
     * `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions
     * map to a left-, center-, or right-aligned title.
     */
    anchor?: TitleAnchor | null;
    /**
     * Angle in degrees of title and subtitle text.
     */
    angle?: number;
    /**
     * A boolean flag indicating if [ARIA
     * attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) should be
     * included (SVG output only).
     * If `false`, the "aria-hidden" attribute will be set on the output SVG group, removing the
     * title from the ARIA accessibility tree.
     *
     * __Default value:__ `true`
     */
    aria?: boolean;
    /**
     * Vertical text baseline for title and subtitle text. One of `"alphabetic"` (default),
     * `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and
     * `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated
     * relative to the *lineHeight* rather than *fontSize* alone.
     */
    baseline?: Baseline;
    /**
     * Text color for title text.
     */
    color?: null | string;
    /**
     * Delta offset for title and subtitle text x-coordinate.
     */
    dx?: number;
    /**
     * Delta offset for title and subtitle text y-coordinate.
     */
    dy?: number;
    /**
     * Font name for title text.
     */
    font?: string;
    /**
     * Font size in pixels for title text.
     */
    fontSize?: number;
    /**
     * Font style for title text.
     */
    fontStyle?: string;
    /**
     * Font weight for title text.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    fontWeight?: number | FontWeightEnum;
    /**
     * The reference frame for the anchor position, one of `"bounds"` (to anchor relative to the
     * full bounding box) or `"group"` (to anchor relative to the group width or height).
     */
    frame?: string;
    /**
     * The maximum allowed length in pixels of title and subtitle text.
     */
    limit?: number;
    /**
     * Line height in pixels for multi-line title text or title text with `"line-top"` or
     * `"line-bottom"` baseline.
     */
    lineHeight?: number;
    /**
     * The orthogonal offset in pixels by which to displace the title group from its position
     * along the edge of the chart.
     */
    offset?: number;
    /**
     * Default title orientation (`"top"`, `"bottom"`, `"left"`, or `"right"`)
     */
    orient?: TitleOrient;
    /**
     * Text color for subtitle text.
     */
    subtitleColor?: null | string;
    /**
     * Font name for subtitle text.
     */
    subtitleFont?: string;
    /**
     * Font size in pixels for subtitle text.
     */
    subtitleFontSize?: number;
    /**
     * Font style for subtitle text.
     */
    subtitleFontStyle?: string;
    /**
     * Font weight for subtitle text.
     * This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`,
     * ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
     */
    subtitleFontWeight?: number | FontWeightEnum;
    /**
     * Line height in pixels for multi-line subtitle text.
     */
    subtitleLineHeight?: number;
    /**
     * The padding in pixels between title and subtitle text.
     */
    subtitlePadding?: number;
    /**
     * The integer z-index indicating the layering of the title group relative to other axis,
     * mark, and legend groups.
     *
     * __Default value:__ `0`.
     */
    zindex?: number;
}

/**
 * Default properties for [single view
 * plots](https://vega.github.io/vega-lite/docs/spec.html#single).
 */
export interface ViewConfig {
    /**
     * Whether the view should be clipped.
     */
    clip?: boolean;
    /**
     * The default height when the plot has a continuous y-field for x or latitude, or has arc
     * marks.
     *
     * __Default value:__ `200`
     */
    continuousHeight?: number;
    /**
     * The default width when the plot has a continuous field for x or longitude, or has arc
     * marks.
     *
     * __Default value:__ `200`
     */
    continuousWidth?: number;
    /**
     * The radius in pixels of rounded rectangles or arcs' corners.
     *
     * __Default value:__ `0`
     */
    cornerRadius?: number;
    /**
     * The mouse cursor used over the view. Any valid [CSS cursor
     * type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
     */
    cursor?: Cursor;
    /**
     * The default height when the plot has non arc marks and either a discrete y-field or no
     * y-field.
     * The height can be either a number indicating a fixed height or an object in the form of
     * `{step: number}` defining the height per discrete step.
     *
     * __Default value:__ a step size based on `config.view.step`.
     */
    discreteHeight?: DiscreteHeightClass | number;
    /**
     * The default width when the plot has non-arc marks and either a discrete x-field or no
     * x-field.
     * The width can be either a number indicating a fixed width or an object in the form of
     * `{step: number}` defining the width per discrete step.
     *
     * __Default value:__ a step size based on `config.view.step`.
     */
    discreteWidth?: DiscreteWidthClass | number;
    /**
     * The fill color.
     *
     * __Default value:__ `undefined`
     */
    fill?: null | string;
    /**
     * The fill opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    fillOpacity?: number;
    /**
     * Default height
     *
     * __Deprecated:__ Since Vega-Lite 4.0. Please use continuousHeight and discreteHeight
     * instead.
     */
    height?: number;
    /**
     * The overall opacity (value between [0,1]).
     *
     * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or
     * `square` marks or layered `bar` charts and `1` otherwise.
     */
    opacity?: number;
    /**
     * Default step size for x-/y- discrete fields.
     */
    step?: number;
    /**
     * The stroke color.
     *
     * __Default value:__ `"#ddd"`
     */
    stroke?: null | string;
    /**
     * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
     *
     * __Default value:__ `"butt"`
     */
    strokeCap?: StrokeCap;
    /**
     * An array of alternating stroke, space lengths for creating dashed or dotted lines.
     */
    strokeDash?: number[];
    /**
     * The offset (in pixels) into which to begin drawing with the stroke dash array.
     */
    strokeDashOffset?: number;
    /**
     * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
     *
     * __Default value:__ `"miter"`
     */
    strokeJoin?: StrokeJoin;
    /**
     * The miter limit at which to bevel a line join.
     */
    strokeMiterLimit?: number;
    /**
     * The stroke opacity (value between [0,1]).
     *
     * __Default value:__ `1`
     */
    strokeOpacity?: number;
    /**
     * The stroke width, in pixels.
     */
    strokeWidth?: number;
    /**
     * Default width
     *
     * __Deprecated:__ Since Vega-Lite 4.0. Please use continuousWidth and discreteWidth instead.
     */
    width?: number;
}

export interface DiscreteHeightClass {
    step: number;
}

export interface DiscreteWidthClass {
    step: number;
}

/**
 * A specification of the view that gets faceted.
 *
 * A full layered plot specification, which may contains `encoding` and `projection`
 * properties that will be applied to underlying unit (single-view) specifications.
 *
 * A specification of the view that gets repeated.
 *
 * Any specification in Vega-Lite.
 *
 * Unit spec that can have a composite mark and row or column channels (shorthand for a
 * facet spec).
 *
 * Base interface for a repeat specification.
 *
 * Base interface for a facet specification.
 *
 * Base interface for a generalized concatenation specification.
 *
 * Base interface for a vertical concatenation specification.
 *
 * Base interface for a horizontal concatenation specification.
 *
 * A unit specification, which can contain either [primitive marks or composite
 * marks](https://vega.github.io/vega-lite/docs/mark.html#types).
 */
export interface CoordinateSpec {
    /**
     * An object describing the data source. Set to `null` to ignore the parent's data source.
     * If no data is set, it is derived from the parent.
     */
    data?: URLData | null;
    /**
     * Description of this mark for commenting purpose.
     */
    description?: string;
    /**
     * A shared key-value mapping between encoding channels and definition of fields in the
     * underlying layers.
     *
     * A key-value mapping between encoding channels and definition of fields.
     */
    encoding?: SpecEncoding;
    /**
     * The height of a visualization.
     *
     * - For a plot with a continuous y-field, height should be a number.
     * - For a plot with either a discrete y-field or no y-field, height can be either a number
     * indicating a fixed height or an object in the form of `{step: number}` defining the
     * height per discrete step. (No y-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on height, it should be set to `"container"`.
     *
     * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous
     * y-field and `config.view.discreteHeight` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * height of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     *
     * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
     */
    height?: Step | number | HeightEnum;
    /**
     * Layer or single view specifications to be layered.
     *
     * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as
     * layering facet specifications is not allowed. Instead, use the [facet
     * operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a
     * facet.
     */
    layer?: LayerElement[];
    /**
     * Name of the visualization for later reference.
     */
    name?: string;
    /**
     * An object defining properties of the geographic projection shared by underlying layers.
     *
     * An object defining properties of geographic projection, which will be applied to `shape`
     * path for `"geoshape"` marks
     * and to `latitude` and `"longitude"` channels for other marks.
     */
    projection?: Projection;
    /**
     * Scale, axis, and legend resolutions for view composition specifications.
     */
    resolve?: Resolve;
    /**
     * Title for the plot.
     */
    title?: string[] | TitleParams | string;
    /**
     * An array of data transformations such as filter and new field calculation.
     */
    transform?: Transform[];
    /**
     * An object defining the view background's fill and stroke.
     *
     * __Default value:__ none (transparent)
     *
     * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
     */
    view?: ViewBackground;
    /**
     * The width of a visualization.
     *
     * - For a plot with a continuous x-field, width should be a number.
     * - For a plot with either a discrete x-field or no x-field, width can be either a number
     * indicating a fixed width or an object in the form of `{step: number}` defining the width
     * per discrete step. (No x-field is equivalent to having one discrete step.)
     * - To enable responsive sizing on width, it should be set to `"container"`.
     *
     * __Default value:__
     * Based on `config.view.continuousWidth` for a plot with a continuous x-field and
     * `config.view.discreteWidth` otherwise.
     *
     * __Note:__ For plots with [`row` and `column`
     * channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the
     * width of a single view and the `"container"` option cannot be used.
     *
     * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
     *
     * __Deprecated:__ Please avoid using width in a unit spec that's a part of a layer spec.
     */
    width?: Step | number | HeightEnum;
    /**
     * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`,
     * `"line"`,
     * `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition
     * object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
     */
    mark?: Def | BoxPlot;
    /**
     * A key-value mapping between selection names and definitions.
     */
    selection?: { [key: string]: SelectionDef };
    /**
     * The alignment to apply to grid rows and columns.
     * The supported string values are `"all"`, `"each"`, and `"none"`.
     *
     * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed
     * one after the other.
     * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or
     * column may be of variable size.
     * - For `"all"`, subviews will be aligned and each row or column will be sized identically
     * based on the maximum observed size. String values for this property will be applied to
     * both grid rows and columns.
     *
     * Alternatively, an object value of the form `{"row": string, "column": string}` can be
     * used to supply different alignments for rows and columns.
     *
     * __Default value:__ `"all"`.
     */
    align?: RowColLayoutAlign | LayoutAlign;
    /**
     * The bounds calculation method to use for determining the extent of a sub-plot. One of
     * `full` (the default) or `flush`.
     *
     * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will
     * be used.
     * - If set to `flush`, only the specified width and height values for the sub-view will be
     * used. The `flush` setting can be useful when attempting to place sub-plots without axes
     * or legends into a uniform grid structure.
     *
     * __Default value:__ `"full"`
     */
    bounds?: LayoutBounds;
    /**
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply
     * different centering values for rows and columns.
     *
     * __Default value:__ `false`
     *
     * Boolean flag indicating if subviews should be centered relative to their respective rows
     * or columns.
     *
     * __Default value:__ `false`
     */
    center?: boolean | RowColBoolean;
    /**
     * The spacing in pixels between sub-views of the composition operator.
     * An object of the form `{"row": number, "column": number}` can be used to set
     * different spacing values for rows and columns.
     *
     * __Default value__: Depends on `"spacing"` property of [the view composition
     * configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by
     * default)
     *
     * The spacing in pixels between sub-views of the concat operator.
     *
     * __Default value__: `10`
     */
    spacing?: RowColNumber | number;
    /**
     * The number of columns to include in the view composition layout.
     *
     * __Default value__: `undefined` -- An infinite number of columns (a single row) will be
     * assumed. This is equivalent to
     * `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
     *
     * __Note__:
     *
     * 1) This property is only for:
     * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
     * - the `facet` and `repeat` operator with one field/repetition definition (without
     * row/column nesting)
     *
     * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using
     * the `row` channel (for `facet` and `repeat`).
     */
    columns?: number;
    /**
     * Definition for fields to be repeated. One of:
     * 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be
     * referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row.
     * You can set the number of columns to control the wrapping.
     * 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated
     * along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat":
     * "column"}` can be used to refer to the repeated field respectively.
     */
    repeat?: string[] | RepeatMapping;
    /**
     * A specification of the view that gets repeated.
     *
     * A specification of the view that gets faceted.
     */
    spec?: NormalizedSpecSpec;
    /**
     * Definition for how to facet the data. One of:
     * 1) [a field definition for faceting the plot by one
     * field](https://vega.github.io/vega-lite/docs/facet.html#field-def)
     * 2) [An object that maps `row` and `column` channels to their field
     * definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
     */
    facet?: FacetFieldName;
    /**
     * A list of views to be concatenated.
     */
    concat?: Spec[];
    /**
     * A list of views to be concatenated and put into a column.
     */
    vconcat?: Spec[];
    /**
     * A list of views to be concatenated and put into a row.
     */
    hconcat?: Spec[];
}
